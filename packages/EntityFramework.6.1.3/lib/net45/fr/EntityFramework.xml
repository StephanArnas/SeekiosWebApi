<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
      <summary>Représente un attribut placé sur une propriété pour indiquer que la colonne de base de données à laquelle la propriété est mappée comporte un index.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> pour un index qui sera nommé par convention et pour lequel aucun ordre de colonnes, aucun clustering ou aucune unicité n'est spécifié.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> pour un index portant le nom spécifié et pour lequel aucun ordre de colonnes, aucun clustering ou aucune unicité n'est spécifié.</summary>
      <param name="name">Nom de l'index.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> pour un index avec les nom et ordre de colonnes indiqués, mais pour lequel aucun clustering ni aucune unicité n'est spécifié.</summary>
      <param name="name">Nom de l'index.</param>
      <param name="order">Nombre qui sera utilisé pour déterminer l'ordre des colonnes pour les index multicolonnes.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Détermine si cet attribut spécifie les mêmes nom et configuration que l'attribut donné.</summary>
      <returns>true si l'autre objet équivaut à cet objet ; sinon, false.</returns>
      <param name="other">Attribut à comparer.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
      <summary>Détermine si cet attribut spécifie les mêmes nom et configuration que l'attribut donné.</summary>
      <returns>true si l'autre objet équivaut à cet objet ; sinon, false.</returns>
      <param name="obj">Attribut à comparer.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
      <summary>Obtient ou définit une valeur permettant d'indiquer si l'index définit un index cluster.</summary>
      <returns>true si l'index définit un index cluster ; false si l'index définit un index non cluster.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
      <summary>Détermine ou définit si <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> a été défini avec une valeur.</summary>
      <returns>true si <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> a été défini avec une valeur ; sinon, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
      <summary>Obtient ou définit une valeur permettant d'indiquer si un index unique doit être défini.</summary>
      <returns>true pour définir un index unique ; false pour définir un index non unique.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
      <summary>Détermine ou définit si <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> a été défini avec une valeur.</summary>
      <returns>true si <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> a été défini avec une valeur ; sinon, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
      <summary>Obtient ou définit le nom de l'index.</summary>
      <returns>Nom de l'index.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
      <summary>Obtient ou définit un nombre qui détermine l'ordre des colonnes pour les index multicolonnes.La valeur est -1 si aucun ordre de colonnes n'a été spécifié.</summary>
      <returns>Nombre qui détermine l'ordre des colonnes pour les index multicolonnes ou -1 si aucun ordre de colonnes n'a été spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
      <summary>Obtient ou définit un ID différent pour chaque instance d'objet de sorte que les descripteurs de type ne tenteront pas de combiner toutes les instances d'IndexAttribute en une seule instance.</summary>
      <returns>Un ID différent pour chaque instance d'objet.</returns>
    </member>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Implémentation de IDatabaseInitializer qui recréera et, éventuellement, réalimentera la base de données avec les données, uniquement si la base de données n'existe pas.Pour alimenter la base de données, créez une classe dérivée et substituez la méthode Seed.</summary>
      <typeparam name="TContext"> Type du contexte. </typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     Exécute la stratégie pour initialiser la base de données pour le contexte donné. </summary>
      <param name="context"> Contexte. </param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>Méthode qui doit être substituée pour ajouter réellement des données au contexte à alimenter.L'implémentation par défaut n'exécute aucune opération.</summary>
      <param name="context"> Contexte à alimenter. </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Une instance de cette classe est obtenue d'un objet <see cref="T:System.Data.Entity.DbContext" /> et peut être utilisée pour gérer la base de données réelle qui soutient un DbContext ou une connexion.Cela inclut la création, la suppression et la recherche de l'existence d'une base de données.Notez que la suppression et la recherche de l'existence d'une base de données peuvent être effectuées à l'aide d'une simple     connexion (c'est-à-diresans contexte complet) au moyen des méthodes statiques de la classe.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>Démarre une transaction sur la connexion du magasin sous-jacent</summary>
      <returns>objet <see cref="T:System.Data.Entity.DbContextTransaction" /> encapsulant l'accès à l'objet de transaction du magasin sous-jacent</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Commence une transaction sur la connexion du magasin sous-jacent avec le niveau d'isolation spécifié</summary>
      <returns>objet <see cref="T:System.Data.Entity.DbContextTransaction" /> encapsulant l'accès à l'objet de transaction du magasin sous-jacent</returns>
      <param name="isolationLevel">Niveau d'isolation de la base de données avec lequel la transaction de magasin sous-jacent sera créée.</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>Obtient ou définit la valeur du délai d'attente, en secondes, pour toutes les opérations dans le contexte.La valeur par défaut est Null, ce qui indique que la valeur par défaut du fournisseur sous-jacent sera utilisée.</summary>
      <returns>Délai d'attente, en secondes, ou null pour utiliser la valeur par défaut du fournisseur.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Vérifie si la base de données est compatible ou non avec le modèle Code First actuel.</summary>
      <returns>true si le hachage modèle dans le contexte et la base de données correspondent ; sinon, false.</returns>
      <param name="throwIfNoMetadata">Si la valeur est true, une exception est levée si les métadonnées du modèle ne se trouvent pas dans la base de données.Si la valeur est false, cette méthode retourne la valeur true si les métadonnées sont introuvables.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Retourne la connexion qui est utilisée par ce contexte.Cela peut provoquer la création de la connexion si elle n'existe pas déjà.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Crée une base de données sur le serveur de bases de données pour le modèle défini dans le contexte de sauvegarde.Notez que l'appel de cette méthode avant que la stratégie d'initialisation de la base de données ne soit exécutée désactivera l'exécution de cette stratégie.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Crée une base de données sur le serveur de bases de données pour le modèle défini dans le contexte de sauvegarde, mais uniquement si une base de données avec le même nom n'existe pas déjà sur le serveur.</summary>
      <returns>true si la base de données n'existait pas et a été créée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.CurrentTransaction">
      <summary>Obtient la transaction à laquelle la connexion au magasin sous-jacent est inscrite.Ce paramètre peut être null.</summary>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>Fabrique de connexions à utiliser lors de la création d'un <see cref="T:System.Data.Common.DbConnection" /> à partir d'un simple nom de base de données ou d'une simple chaîne de connexion.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Supprime la base de données sur le serveur de bases de données si elle existe, sinon, aucune action n'est effectuée.L'appel de cette méthode en dehors d'un initialiseur marque la base de données comme n'ayant pas été initialisée.Cela signifie que si une tentative a lieu pour utiliser la base de données après sa suppression, n'importe initialiseur défini s'exécutera et, en général, tentera de recréer la base de données automatiquement.</summary>
      <returns>true si la base de données existait et a été supprimée ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Supprime la base de données sur le serveur de bases de données si elle existe, sinon, aucune action n'est effectuée.</summary>
      <returns>true si la base de données existait et a été supprimée ; sinon, false.</returns>
      <param name="existingConnection">Connexion existante à la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Supprime la base de données sur le serveur de bases de données si elle existe, sinon, aucune action n'est effectuée.La connexion à la base de données est créée avec le nom de base de données spécifié ou la chaîne de connexion, comme décrit dans la documentation pour la classe <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si la base de données existait et a été supprimée ; sinon, false.</returns>
      <param name="nameOrConnectionString">Nom de la base de données ou chaîne de connexion vers la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Détermine si la base de données spécifiée est égale à la base de données active.</summary>
      <returns>true si la base de données spécifiée est égale à la base de données active ; sinon, false.</returns>
      <param name="obj">Base de données à comparer à l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Exécute la commande DDL/DML donnée sur la base de données.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Résultat retourné par la base de données après avoir exécuté la commande.</returns>
      <param name="transactionalBehavior">Contrôle la création d'une transaction pour cette commande.</param>
      <param name="sql">Chaîne de commande.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de commande.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Exécute la commande DDL/DML donnée sur la base de données.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Résultat retourné par la base de données après avoir exécuté la commande.</returns>
      <param name="sql">Chaîne de commande.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de commande.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Exécute de façon asynchrone la commande DDL/DML donnée sur la base de données.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le résultat retourné par la base de données après avoir exécuté la commande.</returns>
      <param name="transactionalBehavior">Contrôle la création d'une transaction pour cette commande.</param>
      <param name="sql">Chaîne de commande.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de commande.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Exécute de façon asynchrone la commande DDL/DML donnée sur la base de données.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le résultat retourné par la base de données après avoir exécuté la commande.</returns>
      <param name="transactionalBehavior">Contrôle la création d'une transaction pour cette commande.</param>
      <param name="sql">Chaîne de commande.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de commande.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>Exécute de façon asynchrone la commande DDL/DML donnée sur la base de données.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le résultat retourné par la base de données après avoir exécuté la commande.</returns>
      <param name="sql">Chaîne de commande.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de commande.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Exécute de façon asynchrone la commande DDL/DML donnée sur la base de données.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le résultat retourné par la base de données après avoir exécuté la commande.</returns>
      <param name="sql">Chaîne de commande.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de commande.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Vérifie si la base de données existe ou non sur le serveur.</summary>
      <returns>true si la base de données existe ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Vérifie si la base de données existe ou non sur le serveur.</summary>
      <returns>true si la base de données existe ; sinon, false.</returns>
      <param name="existingConnection">Connexion existante à la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Vérifie si la base de données existe ou non sur le serveur.La connexion à la base de données est créée avec le nom de base de données spécifié ou la chaîne de connexion, comme décrit dans la documentation pour la classe <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si la base de données existe ; sinon, false.</returns>
      <param name="nameOrConnectionString">Nom de la base de données ou chaîne de connexion vers la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Retourne la fonction de hachage pour cette base de données.</summary>
      <returns>Fonction de hachage pour cette base de données.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Exécute le <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> enregistré sur ce contexte.Si le paramètre « force » est défini sur true, l'initialiseur est exécuté qu'il ait ou n'ait pas déjà été exécuté.Cela peut être utile si une base de données est supprimée pendant qu'une application s'exécute et doit être réinitialisée.Si « force » a la valeur false, alors, l'initialiseur est exécuté uniquement s'il n'a pas déjà été exécuté pour ce contexte, modèle et connexion dans ce domaine d'application.Cette méthode est en général utilisée lorsqu'il est nécessaire de vérifier que la base de données a été créée et alimentée avant de démarrer une opération où une opération différée peut entraîner des problèmes, par exemple lorsque l'opération fait partie d'une transaction.</summary>
      <param name="force">S'il a la valeur true, l'initialiseur est exécuté même s'il a déjà été exécuté.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Log">
      <summary>Définissez cette propriété afin d'enregistrer le code SQL généré par le <see cref="T:System.Data.Entity.DbContext" /> pour le délégué spécifié.Par exemple, pour enregistrer le code dans la console, définissez cette propriété sur <see cref="M:System.Console.Write(System.String)" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Définit l'initialiseur de la base de données à utiliser pour le type de contexte donné.L'initialiseur de base de données est appelé lorsque le type <see cref="T:System.Data.Entity.DbContext" /> donné est utilisé pour accéder à une base de données pour la première fois.La stratégie par défaut pour les contextes Code First est une instance de <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="strategy">Initialiseur à utiliser, ou Null pour désactiver l'initialisation du type de contexte donné.</param>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des éléments du type générique donné.Le type peut être tout type possédant des propriétés correspondantes aux noms des colonnes retournées par la requête, ou peut être un type primitif simple.Le type spécifié n'est pas nécessairement un type d'entité.Les résultats de cette requête ne sont jamais suivis par le contexte, même si le type d'objet retourné est un type d'entité.Utilisez la méthode <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> pour retourner des entités suivies par le contexte.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de requête SQL.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'objet retourné par la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des éléments du type donné.Le type peut être tout type possédant des propriétés correspondantes aux noms des colonnes retournées par la requête, ou peut être un type primitif simple.Le type spécifié n'est pas nécessairement un type d'entité.Les résultats de cette requête ne sont jamais suivis par le contexte, même si le type d'objet retourné est un type d'entité.Utilisez la méthode <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> pour retourner des entités suivies par le contexte.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="elementType">Type d'objet retourné par la requête.</param>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de requête SQL.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Retourne une représentation sous forme de chaîne de la base de données.</summary>
      <returns>Représentation sous forme de chaîne de la base de données.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>Permet à l'utilisateur de transmettre une transaction de base de données créée en dehors de l'objet <see cref="T:System.Data.Entity.Database" /> si vous souhaitez qu'Entity Framework exécute des commandes dans cette transaction externe.Sinon, passez une valeur Null pour effacer les connaissances de l'infrastructure de cette transaction.</summary>
      <param name="transaction">transaction externe</param>
      <exception cref="T:System.InvalidOperationException">Exception levée si la transaction est déjà terminée</exception>
      <exception cref="T:System.InvalidOperationException">Levée si la connexion associée à l'objet <see cref="T:System.Data.Entity.Database" /> est déjà inscrite dans une transaction <see cref="T:System.Transactions.TransactionScope" /></exception>
      <exception cref="T:System.InvalidOperationException">Levée si la connexion associée à l'objet <see cref="T:System.Data.Entity.Database" /> fait déjà partie d'une transaction</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si la connexion associée à la transaction ne correspond pas à la connexion Entity Framework</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>Une classe dérivée de cette classe peut être placée dans le même assembly comme classe dérivée de <see cref="T:System.Data.Entity.DbContext" /> pour définir la configuration Entity Framework d'une application.La configuration est définie en appelant des méthodes protégées et en définissant des propriétés protégées de cette classe dans le constructeur de votre type dérivé.Le type à utiliser peut également être inscrit dans le fichier de configuration de l'application.Pour d'informations sur la configuration d'Entity Framework, consultez http://go.microsoft.com/fwlink/?LinkId=260883.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Ajoute une instance de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> à la chaîne de la responsabilité des programmes de résolution utilisés pour résoudre les dépendances requises par Entity Framework.</summary>
      <param name="resolver">Programme de résolution à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Ajoute une instance de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> à la chaîne de la responsabilité des programmes de résolution utilisés pour résoudre les dépendances requises par Entity Framework.</summary>
      <param name="resolver">Programme de résolution à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>Inscrit un <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" /> au démarrage de l'application.Notez que les intercepteurs peuvent également être ajoutés et supprimés à tout moment à l'aide de <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" />.</summary>
      <param name="interceptor">Intercepteur à inscrire.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>Obtient le <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> utilisé pour résoudre les dépendances de service dans Entity Framework.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> utilisé pour résoudre les dépendances de service dans Entity Framework.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifique.</summary>
      <returns>true si cette instance est égale à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
      <summary>Obtient le code de hachage associé à cette instance.</summary>
      <returns>Code de hachage associé à cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>Tente de découvrir et de charger <see cref="T:System.Data.Entity.DbConfiguration" /> à partir de l'assembly donné.Cette méthode est destinée à être utilisée par les outils pour vérifier que la configuration correcte est chargée dans le domaine d'application.Les outils doivent utiliser cette méthode avant d'accéder à la propriété <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />.Si les outils connaissent le type <see cref="T:System.Data.Entity.DbContext" /> actuellement utilisé, la méthode <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" /> doit être utilisée car elle rend plus probable la détection de la configuration correcte.</summary>
      <param name="assemblyHint">
        <see cref="T:System.Reflection.Assembly" /> à utiliser pour la découverte de la configuration.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>Tente de découvrir et de charger le <see cref="T:System.Data.Entity.DbConfiguration" /> associé au type <see cref="T:System.Data.Entity.DbContext" /> donné.Cette méthode est destinée à être utilisée par les outils pour vérifier que la configuration correcte est chargée dans le domaine d'application.Les outils doivent utiliser cette méthode avant d'accéder à la propriété <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />.</summary>
      <param name="contextType">Type <see cref="T:System.Data.Entity.DbContext" /> à utiliser pour la découverte de la configuration.</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>Se produit lors de l'initialisation d'Entity Framework après que DbConfiguration a été construit mais avant qu'il soit verrouillé prêt à être utilisé. </summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</summary>
      <returns>Copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>Instance singleton de <see cref="T:System.Data.Entity.DbConfiguration" /> pour ce domaine d'application.Elle peut être définie au démarrage de l'application avant d'utiliser les fonctionnalités d'Entity Framework et après elle doit être traitée en lecture seule.</summary>
      <param name="configuration">Instance de <see cref="T:System.Data.Entity.DbConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir une fabrique permettant à <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> de créer des instances d'un contexte qui ne possède pas de constructeur public et sans paramètre.</summary>
      <param name="factory">Délégué à utiliser pour créer des instances de contexte.</param>
      <typeparam name="TContext">Type de contexte pour lequel la fabrique doit être utilisée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir une fabrique permettant à <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> de créer des instances d'un contexte qui ne possède pas de constructeur public et sans paramètre.</summary>
      <param name="contextType">Type de contexte pour lequel la fabrique doit être utilisée.</param>
      <param name="factory">Délégué à utiliser pour créer des instances de contexte.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir l'initialiseur de base de données pour le type de contexte donné.L'initialiseur de base de données est appelé lorsque le type <see cref="T:System.Data.Entity.DbContext" /> donné est utilisé pour accéder à une base de données pour la première fois.La stratégie par défaut pour les contextes Code First est une instance de <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="initializer">Initialiseur à utiliser, ou Null pour désactiver l'initialisation du type de contexte donné.</param>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir une fabrique pour le type de <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" /> à utiliser avec <see cref="P:System.Data.Entity.Database.Log" />.</summary>
      <param name="logFormatterFactory">Délégué qui va créer des instances de formateur.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>Définit le <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" /> utilisé pour créer des connexions par convention si aucune chaîne de connexion ou connexion n'est fournie ou peut être découverte par <see cref="T:System.Data.Entity.DbContext" />.Notez qu'une fabrique de connexions par défaut est définie dans le fichier app.config ou web.config lorsque le package EntityFramework NuGet est installé.Comme pour tous les paramètres du fichier de configuration, la fabrique de connexions par défaut définie dans le fichier de configuration aura priorité sur un paramètre configuré avec cette méthode.Par conséquent, le paramètre doit être supprimé du fichier de configuration, sinon l'appel de cette méthode n'aura aucun effet.Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour modifier la fabrique de connexions par défaut utilisée.</summary>
      <param name="connectionFactory">Fabrique de connexions.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir un délégué <see cref="T:System.Func`3" /> pouvant être utilisé pour la création du <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> par défaut pour tout type de <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" />.Cette fabrique par défaut sera utilisée uniquement si aucune fabrique n'est définie explicitement dans <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> et si aucune fabrique n'a été inscrite pour le fournisseur en service à l'aide de la méthode <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />.</summary>
      <param name="factory">Fabrique pour créer des instances de <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> pour un <see cref="T:System.Data.Common.DbConnection" /> et un <see cref="T:System.String" /> qui représentent le schéma par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir l'instance globale de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> qui sera utilisée chaque fois qu'un fournisseur spatial est obligatoire et qu'un fournisseur spatial spécifique du fournisseur est introuvable.Normalement, un fournisseur spatial spécifique du fournisseur est obtenu à partir d'une implémentation <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> qui est à son tour retournée en résolvant un service pour <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> et en transmettant le nom invariant de fournisseur comme clé.Cependant, cela ne fonctionne pas pour les instances d'autonomes de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> et de <see cref="T:System.Data.Entity.Spatial.DbGeography" />, car il est impossible de connaître le fournisseur spatial à utiliser.Par conséquent, lors de la création d'instances autonomes de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> et <see cref="T:System.Data.Entity.Spatial.DbGeography" />, le fournisseur spatial global est toujours utilisé.</summary>
      <param name="spatialProvider">Fournisseur spatial.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
      <param name="transactionHandlerFactory">Fonction qui retourne une nouvelle instance d'un gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> à utiliser avec le fournisseur représenté par le nom invariant spécifié.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel cette stratégie d'exécution est utilisée.</param>
      <param name="getExecutionStrategy">Fonction qui retourne une nouvelle instance d'une stratégie d'exécution.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> à utiliser avec le fournisseur représenté par le nom invariant spécifié et pour un nom de serveur donné.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel cette stratégie d'exécution est utilisée.</param>
      <param name="getExecutionStrategy">Fonction qui retourne une nouvelle instance d'une stratégie d'exécution.</param>
      <param name="serverName">Chaîne qui sera comparée au nom du serveur dans la chaîne de connexion.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir un délégué <see cref="T:System.Func`3" /> qui autorise la création d'un <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> personnalisé pour le fournisseur donné, pour tout type de <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> dont la fabrique n'est pas définie explicitement.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET pour lequel ce générateur doit être utilisé.</param>
      <param name="factory">Fabrique pour créer des instances de <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> pour un <see cref="T:System.Data.Common.DbConnection" /> et un <see cref="T:System.String" /> qui représentent le schéma par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir l'implémentation de <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> qui permet d'obtenir les jetons de manifeste du fournisseur à partir des connexions sans nécessairement ouvrir la connexion.</summary>
      <param name="resolver">Programme de résolution de jeton de manifeste.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir une fabrique pour les implémentations de <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> qui autorise les annotations personnalisées représentées par les instances <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> à sérialiser depuis et vers EDMX XML.</summary>
      <param name="annotationName">Nom de l'annotation personnalisée qui sera gérée par ce sérialiseur.</param>
      <param name="serializerFactory">Délégué qui sera utilisé pour créer des instances du sérialiseur.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> à utiliser avec le fournisseur représenté par le nom invariant spécifié.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET pour lequel ce générateur doit être utilisé.</param>
      <param name="sqlGenerator">Délégué qui retourne une nouvelle instance du générateur SQL chaque fois qu'il est appelé.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir un <see cref="T:System.Func`2" /> comme fabrique de clés du cache du modèle, qui autorise la modification de la clé utilisée pour mettre en cache le modèle derrière un <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="keyFactory">Fabrique de clés.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir le service de pluralisation.</summary>
      <param name="pluralizationService">Service de pluralisation à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un fournisseur ADO.NET.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel ce fournisseur est utilisé.</param>
      <param name="providerFactory">Instance du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir l'implémentation de <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" /> qui permet d'obtenir un <see cref="T:System.Data.Common.DbProviderFactory" /> à partir d'un <see cref="T:System.Data.Common.DbConnection" /> si l'implémentation par défaut n'est pas suffisante.</summary>
      <param name="providerFactoryResolver">Service de fabrique de fournisseurs.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un fournisseur Entity Framework.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel ce fournisseur est utilisé.</param>
      <param name="provider">Instance du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir une implémentation de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> à utiliser pour un fournisseur spécifique et un jeton de manifeste du fournisseur.</summary>
      <param name="key">
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> qui indique le type de connexion ADO.NET pour lequel ce fournisseur spatial est utilisé.</param>
      <param name="spatialProvider">Fournisseur spatial.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour définir une implémentation de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> à utiliser pour un fournisseur spécifique avec tout jeton de manifeste.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel ce fournisseur spatial est utilisé.</param>
      <param name="spatialProvider">Fournisseur spatial.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un vérificateur d'existence de table de base de données d'un fournisseur donné.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel ce fournisseur est utilisé.</param>
      <param name="tableExistenceChecker">Vérificateur d'existence de table à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> à utiliser avec le fournisseur représenté par le nom invariant spécifié.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel ce gestionnaire de transactions est utilisé.</param>
      <param name="transactionHandlerFactory">Fonction qui retourne une nouvelle instance d'un gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
      <summary>Appelez cette méthode à partir du constructeur d'une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" /> pour inscrire un <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> à utiliser avec le fournisseur représenté par le nom invariant spécifié et pour un nom de serveur donné.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel ce gestionnaire de transactions est utilisé.</param>
      <param name="transactionHandlerFactory">Fonction qui retourne une nouvelle instance d'un gestionnaire de transactions.</param>
      <param name="serverName">Chaîne qui sera comparée au nom du serveur dans la chaîne de connexion.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>Cet attribut peut être placé sur une sous-classe de <see cref="T:System.Data.Entity.DbContext" /> pour indiquer que la sous-classe de <see cref="T:System.Data.Entity.DbConfiguration" /> représentant la configuration basée sur le code de l'application se trouve dans un assembly différent de celui du type de contexte.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>Indique que la sous-classe de <see cref="T:System.Data.Entity.DbConfiguration" /> représentée par le nom qualifié d'assembly donné doit être utilisée pour la configuration basée sur le code de cette application.</summary>
      <param name="configurationTypeName">Type <see cref="T:System.Data.Entity.DbConfiguration" /> à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>Indique que la sous-classe spécifiée de <see cref="T:System.Data.Entity.DbConfiguration" /> doit être utilisée pour la configuration basée sur le code de cette application.</summary>
      <param name="configurationType">Type <see cref="T:System.Data.Entity.DbConfiguration" /> à utiliser.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>Obtient la sous-classe de <see cref="T:System.Data.Entity.DbConfiguration" /> qui doit être utilisée pour la configuration basée sur le code de cette application.</summary>
      <returns>Sous-classe de <see cref="T:System.Data.Entity.DbConfiguration" /> qui doit être utilisée pour la configuration basée sur le code de cette application.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Une instance DbContext représente une combinaison de modèles d'unité de travail et de référentiel pouvant être utilisée pour interroger une base de données et un groupe simultanément de sorte que les modifications seront ensuite réécrites sur le magasin sous la forme d'une unité.DbContext est conceptuellement semblable à ObjectContext.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Construit une nouvelle instance de contexte à l'aide de conventions pour créer le nom de la base de données sur laquelle une connexion sera établie.Par convention, le nom est le nom complet (espace de noms + nom de classe) de la classe de contexte dérivée.Consultez les notes de la classe pour savoir comment l'utiliser pour créer une connexion.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la connexion existante pour se connecter à une base de données.La connexion ne sera pas supprimée en même temps que le contexte si <paramref name="contextOwnsConnection" /> a la valeur false.</summary>
      <param name="existingConnection">Connexion existante à utiliser pour le nouveau contexte.</param>
      <param name="contextOwnsConnection">Si elle a la valeur true, la connexion est supprimée en même temps que le contexte ; sinon, elle doit être supprimée par l'appelant.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la connexion existante pour la connexion à une base de données, et l'initialise à partir du modèle donné.La connexion ne sera pas supprimée en même temps que le contexte si <paramref name="contextOwnsConnection" /> a la valeur false.</summary>
      <param name="existingConnection">Connexion existante à utiliser pour le nouveau contexte.</param>
      <param name="model">Modèle qui soutiendra ce contexte.</param>
      <param name="contextOwnsConnection">Si elle a la valeur true, la connexion est supprimée en même temps que le contexte ; sinon, elle doit être supprimée par l'appelant.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>Construit une nouvelle instance de contexte autour d'un ObjectContext existant.</summary>
      <param name="objectContext">ObjectContext existant pour encapsuler le nouveau contexte.</param>
      <param name="dbContextOwnsObjectContext">S'il a la valeur true, l'objet ObjectContext est supprimé en même temps que l'objet DbContext ; sinon, la connexion doit être supprimée par l'appelant.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Construit une nouvelle instance de contexte à l'aide de conventions pour créer le nom de la base de données sur laquelle une connexion sera établie et l'initialise à partir du modèle donné.Par convention, le nom est le nom complet (espace de noms + nom de classe) de la classe de contexte dérivée.Consultez les notes de la classe pour savoir comment l'utiliser pour créer une connexion.</summary>
      <param name="model">Modèle qui soutiendra ce contexte.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la chaîne donnée, comme le nom ou la chaîne de connexion de la base de données sur laquelle une connexion sera établie.Consultez les notes de la classe pour savoir comment l'utiliser pour créer une connexion.</summary>
      <param name="nameOrConnectionString">Nom de la base de données ou une chaîne de connexion.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la chaîne donnée, comme le nom ou la chaîne de connexion de la base de données sur laquelle une connexion sera établie, et l'initialise pour le modèle donné.Consultez les notes de la classe pour savoir comment l'utiliser pour créer une connexion.</summary>
      <param name="nameOrConnectionString">Nom de la base de données ou une chaîne de connexion.</param>
      <param name="model">Modèle qui soutiendra ce contexte.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Fournit l'accès aux fonctionnalités du contexte relatives au suivi des modifications d'entités.</summary>
      <returns>Objet utilisé pour accéder aux fonctionnalités relatives au suivi des modifications.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Fournit l'accès aux options de configuration pour le contexte.</summary>
      <returns>Objet utilisé pour accéder aux options de configuration.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Crée une instance de base de données pour ce contexte et vous permet de créer, supprimer ou vérifier l'existence de la base de données sous-jacente.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Appelle la méthode Dispose protégée.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Supprime le contexte.Le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> sous-jacent est également supprimé s'il a été créé par ce contexte ou si la propriété a été passée à ce contexte lorsque ce contexte a été créé.La connexion à la base de données (objet <see cref="T:System.Data.Common.DbConnection" /> ) est également supprimée si elle a été créé par ce contexte ou si la propriété a été passée à ce contexte lorsque ce contexte a été créé.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> pour l'entité spécifique, qui fournit l'accès aux informations sur l'entité et la capacité d'effectuer des actions sur l'entité.</summary>
      <returns>Entrée de l'entité.</returns>
      <param name="entity">Entité.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> pour l'entité spécifique, qui fournit l'accès aux informations sur l'entité et la capacité d'effectuer des actions sur l'entité.</summary>
      <returns>Entrée de l'entité.</returns>
      <param name="entity">Entité.</param>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Détermine si l'objet DbContext spécifié est identique au DbContext actuel.</summary>
      <returns>true si l'objet DbContext spécifié est égal au DbContext actuel ; sinon, false.</returns>
      <param name="obj">Objet DbContext à comparer au DbContext actuel.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Retourne la fonction de hachage pour cet objet DbContext.</summary>
      <returns>Fonction de hachage pour cet objet DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Renvoie le type du DbContext actuel.</summary>
      <returns>Type du DbContext actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Valide des entités suivies et retourne une collection de <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> qui contient les résultats de la validation.</summary>
      <returns>Collection de résultats de la validation pour les entités non valides.La collection n'est jamais null et ne doit pas contenir de valeurs null ou de résultats pour les entités valides.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Cette méthode est appelée lorsque le modèle d'un contexte dérivé a été initialisé, mais avant que le modèle ne soit verrouillé et utilisé pour initialiser le contexte.L'implémentation par défaut de cette méthode n'a aucun effet, mais elle peut être substituée dans une classe dérivée afin que le modèle puisse être configuré ultérieurement avant qu'il ne soit verrouillé.</summary>
      <param name="modelBuilder">Générateur qui définit le modèle pour le contexte créé.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Enregistre toutes les modifications effectuées dans ce contexte dans la base de données sous-jacente.</summary>
      <returns>Nombre d'objets écrit dans la base de données sous-jacente.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Une erreur s'est produite lors de l'envoi des mises à jour à la base de données.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Une commande de base de données n'a pas affecté le nombre de lignes attendu.Cela indique généralement une violation d'accès simultané, c'est-à-dire qu'une ligne a été modifiée dans la base de données après avoir fait l'objet d'une demande.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">L'opération d'enregistrement a été abandonnée en raison de l'échec de la validation des valeurs de propriétés de l'entité.</exception>
      <exception cref="T:System.NotSupportedException">Une tentative a été effectuée pour utiliser un comportement non pris en charge, comme l'exécution simultanée de plusieurs commandes asynchrones sur la même instance de contexte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le contexte ou la connexion a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Une erreur s'est produite lors de la tentative de traiter les entités dans le contexte, avant ou après l'envoi des commandes à la base de données.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>Enregistre de façon asynchrone toutes les modifications effectuées dans ce contexte dans la base de données sous-jacente.</summary>
      <returns>Tâche qui représente l'opération d'enregistrement asynchrone.Le résultat de la tâche contient le nombre d'objets écrit dans la base de données sous-jacente.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Une erreur s'est produite lors de l'envoi des mises à jour à la base de données.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Une commande de base de données n'a pas affecté le nombre de lignes attendu.Cela indique généralement une violation d'accès simultané, c'est-à-dire qu'une ligne a été modifiée dans la base de données après avoir fait l'objet d'une demande.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">L'opération d'enregistrement a été abandonnée en raison de l'échec de la validation des valeurs de propriétés de l'entité.</exception>
      <exception cref="T:System.NotSupportedException">Une tentative a été effectuée pour utiliser un comportement non pris en charge, comme l'exécution simultanée de plusieurs commandes asynchrones sur la même instance de contexte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le contexte ou la connexion a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Une erreur s'est produite lors de la tentative de traiter les entités dans le contexte, avant ou après l'envoi des commandes à la base de données.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Enregistre de façon asynchrone toutes les modifications effectuées dans ce contexte dans la base de données sous-jacente.</summary>
      <returns>Tâche qui représente l'opération d'enregistrement asynchrone.Le résultat de la tâche contient le nombre d'objets écrit dans la base de données sous-jacente.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Levée si le contexte a été supprimé.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Retourne une instance <see cref="T:System.Data.Entity.DbSet`1" /> pour l'accès aux entités du type donné dans le contexte et le magasin sous-jacent.</summary>
      <returns>Jeu pour le type d'entité donné.</returns>
      <typeparam name="TEntity">Type d'entité pour lequel un jeu doit être retourné.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Retourne une instance <see cref="T:System.Data.Entity.DbSet" /> non générique pour l'accès aux entités du type donné dans le contexte et le magasin sous-jacent.</summary>
      <returns>Jeu pour le type d'entité donné.</returns>
      <param name="entityType">Type d'entité pour lequel un ensemble doit être retourné.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Point d'extension qui autorise l'utilisateur à substituer le comportement par défaut de la validation des entités ajoutées ou modifiées uniquement.</summary>
      <returns>true pour poursuivre la validation, sinon, false.</returns>
      <param name="entityEntry">Instance DbEntityEntry supposée être validée.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Retourne l'ObjectContext Entity Framework qui est sous ce contexte.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Retourne sous forme de chaîne de DbContext.</summary>
      <returns>Représentation sous forme de chaîne de DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Point d'extension qui permet à l'utilisateur de personnaliser la validation d'une entité ou de filtrer les résultats de la validation.Appelée par <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />.</summary>
      <returns>Résultat de la validation d'entité.Peut être null en cas de substitution.</returns>
      <param name="entityEntry">Instance DbEntityEntry à valider.</param>
      <param name="items">Dictionnaire défini par l'utilisateur qui contient des informations supplémentaires sur la validation personnalisée.Il sera passé à <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> et sera exposé en tant que <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />.Ce paramètre est facultatif et peut avoir la valeur null.</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>Encapsule l'accès à l'objet de transaction sur la connexion au magasin sous-jacent et garantit qu'Entity Framework exécute les commandes sur la base de données dans le contexte de cette transaction.Une instance de cette classe est récupérée via l'appel de BeginTransaction() sur l'objet <see cref="T:System.Data.Entity.DbContext" /><see cref="T:System.Data.Entity.Database" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>Valide la transaction de magasin sous-jacent.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>Nettoie cet objet de transaction et garantit qu'Entity Framework n'utilise plus cette transaction.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>Libère les ressources utilisées par cet objet de transaction.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
      <summary>Détermine si cette instance est identique à l'objet spécifié.</summary>
      <returns>true si cette instance est identique à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
      <summary>Retourne le code de hachage de l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType">
      <summary>Obtient le type sous-jacent associé à cette instance.</summary>
      <returns>Type sous-jacent associé à cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>Restaure la transaction de magasin sous-jacent.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
      <summary>Obtient la transaction (de magasin) de base de données qui est sous-jacente à cette transaction de contexte.</summary>
      <returns>Transaction (de magasin) de base de données qui est sous-jacente à cette transaction de contexte.</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>Indique que la méthode donnée est un proxy pour une fonction EDM.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbFunctionAttribute" />.</summary>
      <param name="namespaceName">Espace de noms de la fonction mapped-to.</param>
      <param name="functionName">Nom de la fonction mapped-to.</param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>Nom de la fonction mapped-to.</summary>
      <returns>Nom de la fonction mapped-to.</returns>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>Espace de noms de la fonction mapped-to.</summary>
      <returns>Espace de noms de la fonction mapped-to.</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>Fournit les méthodes du common language runtime (CLR) qui exposent des fonctions canoniques EDM à utiliser dans les requêtes LINQ to Entities <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddDays pour ajouter le nombre de jours donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de jours à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddDays pour ajouter le nombre de jours donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de jours à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddHours pour ajouter le nombre d'heures donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'heures à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddHours pour ajouter le nombre d'heures donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'heures à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddHours pour ajouter le nombre d'heures donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'heures à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMicroseconds pour ajouter le nombre de microsecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de microsecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMicroseconds pour ajouter le nombre de microsecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de microsecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMicroseconds pour ajouter le nombre de microsecondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de microsecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMilliseconds pour ajouter le nombre de millisecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de millisecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMilliseconds pour ajouter le nombre de millisecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de millisecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMilliseconds pour ajouter le nombre de millisecondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de millisecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMinutes pour ajouter le nombre de minutes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de minutes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMinutes pour ajouter le nombre de minutes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de minutes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMinutes pour ajouter le nombre de minutes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de minutes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMonths pour ajouter le nombre de mois donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de mois à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMonths pour ajouter le nombre de mois donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de mois à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddNanoseconds pour ajouter le nombre de nanosecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de nanosecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddNanoseconds pour ajouter le nombre de nanosecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de nanosecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddNanoseconds pour ajouter le nombre de nanosecondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de nanosecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddSeconds pour ajouter le nombre de secondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de secondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddSeconds pour ajouter le nombre de secondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de secondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddSeconds pour ajouter le nombre de secondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de secondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddYears pour ajouter le nombre d'années donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'années à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddYears pour ajouter le nombre d'années donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'années à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode fait office d'opérateur qui garantit que l'entrée est traitée comme une chaîne non-Unicode.</summary>
      <returns>Chaîne d'entrée traitée comme une chaîne non-Unicode.</returns>
      <param name="value">Chaîne d'entrée.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode fait office d'opérateur qui garantit que l'entrée est traitée comme une chaîne Unicode.</summary>
      <returns>Chaîne d'entrée traitée comme une chaîne Unicode.</returns>
      <param name="value">Chaîne d'entrée.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique CreateDateTime pour créer un objet <see cref="T:System.DateTime" />.</summary>
      <returns>Nouvelle date/heure.</returns>
      <param name="year">Année.</param>
      <param name="month">Mois (de base 1).</param>
      <param name="day">Jour (de base 1).</param>
      <param name="hour">Heures.</param>
      <param name="minute">Minutes.</param>
      <param name="second">Secondes, y compris les parties fractionnaires des secondes si vous le souhaitez.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique CreateDateTimeOffset pour créer un objet <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Nouvelle date/heure.</returns>
      <param name="year">Année.</param>
      <param name="month">Mois (de base 1).</param>
      <param name="day">Jour (de base 1).</param>
      <param name="hour">Heures.</param>
      <param name="minute">Minutes.</param>
      <param name="second">Secondes, y compris les parties fractionnaires des secondes si vous le souhaitez.</param>
      <param name="timeZoneOffset">La partie décalage de fuseau horaire de la nouvelle date.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique CreateTime pour créer un objet <see cref="T:System.TimeSpan" />.</summary>
      <returns>Nouvel intervalle de temps.</returns>
      <param name="hour">Heures.</param>
      <param name="minute">Minutes.</param>
      <param name="second">Secondes, y compris les parties fractionnaires des secondes si vous le souhaitez.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffDays pour calculer le nombre de jours entre deux dates/heures.</summary>
      <returns>Nombre de jours entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffDays pour calculer le nombre de jours entre deux dates/heures.</summary>
      <returns>Nombre de jours entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffHours pour calculer le nombre d'heures entre deux dates/heures.</summary>
      <returns>Nombre d'heures entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffHours pour calculer le nombre d'heures entre deux dates/heures.</summary>
      <returns>Nombre d'heures entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffHours pour calculer le nombre d'heures entre deux intervalles de temps.</summary>
      <returns>Nombre d'heures entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMicroseconds pour calculer le nombre de microsecondes entre deux dates/heures.</summary>
      <returns>Nombre de microsecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMicroseconds pour calculer le nombre de microsecondes entre deux dates/heures.</summary>
      <returns>Nombre de microsecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMicroseconds pour calculer le nombre de microsecondes entre deux intervalles de temps.</summary>
      <returns>Nombre de microsecondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMilliseconds pour calculer le nombre de millisecondes entre deux dates/heures.</summary>
      <returns>Nombre de millisecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMilliseconds pour calculer le nombre de millisecondes entre deux dates/heures.</summary>
      <returns>Nombre de millisecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMilliseconds pour calculer le nombre de millisecondes entre deux intervalles de temps.</summary>
      <returns>Nombre de millisecondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMinutes pour calculer le nombre de minutes entre deux dates/heures.</summary>
      <returns>Nombre de minutes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMinutes pour calculer le nombre de minutes entre deux dates/heures.</summary>
      <returns>Nombre de minutes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMinutes pour calculer le nombre de minutes entre deux intervalles de temps.</summary>
      <returns>Nombre de minutes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMonths pour calculer le nombre de mois entre deux dates/heures.</summary>
      <returns>Nombre de mois entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMonths pour calculer le nombre de mois entre deux dates/heures.</summary>
      <returns>Nombre de mois entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffNanoseconds pour calculer le nombre de nanosecondes entre deux dates/heures.</summary>
      <returns>Nombre de nanosecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffNanoseconds pour calculer le nombre de nanosecondes entre deux dates/heures.</summary>
      <returns>Nombre de nanosecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffNanoseconds pour calculer le nombre de nanosecondes entre deux intervalles de temps.</summary>
      <returns>Nombre de nanosecondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffSeconds pour calculer le nombre de secondes entre deux dates/heures.</summary>
      <returns>Nombre de secondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffSeconds pour calculer le nombre de secondes entre deux dates/heures.</summary>
      <returns>Nombre de secondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffSeconds pour calculer le nombre de secondes entre deux intervalles de temps.</summary>
      <returns>Nombre de secondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffYears pour calculer le nombre d'années entre deux dates/heures.</summary>
      <returns>Nombre d'années entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffYears pour calculer le nombre d'années entre deux dates/heures.</summary>
      <returns>Nombre d'années entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique GetTotalOffsetMinutes pour retourner le nombre de minutes de décalage la date/heure donnée par rapport à la date/heure UTC.Cette valeur est généralement comprise entre +780 et -780 (+ ou - 13 heures).</summary>
      <returns>Décalage de l'entrée par rapport à la date/heure UTC.</returns>
      <param name="dateTimeOffsetArgument">Valeur de date/heure à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Left pour retourner le nombre donné de caractères le plus à gauche dans une chaîne.</summary>
      <returns>Chaîne contenant le nombre de caractères demandés en partant de la gauche de la chaîne d'entrée.</returns>
      <param name="stringArgument">Chaîne d'entrée.</param>
      <param name="length">Nombre de caractères à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Reverse pour retourner une chaîne donnée avec l'ordre des caractères inversé.</summary>
      <returns>Chaîne d'entrée dont l'ordre des caractères est inversé.</returns>
      <param name="stringArgument">Chaîne d'entrée.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Right pour retourner le nombre donné de caractères le plus à droite dans une chaîne.</summary>
      <returns>Chaîne contenant le nombre de caractères demandés en partant de la droite de la chaîne d'entrée.</returns>
      <param name="stringArgument">Chaîne d'entrée.</param>
      <param name="length">Nombre de caractères à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Truncate pour tronquer la valeur donnée au nombre de chiffres spécifié.</summary>
      <returns>Valeur tronquée.</returns>
      <param name="value">Valeur à tronquer.</param>
      <param name="digits">Nombre de chiffres à conserver.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Truncate pour tronquer la valeur donnée au nombre de chiffres spécifié.</summary>
      <returns>Valeur tronquée.</returns>
      <param name="value">Valeur à tronquer.</param>
      <param name="digits">Nombre de chiffres à conserver.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique TruncateTime pour ajouter la date donnée sans heure.</summary>
      <returns>Date d'entrée avec la partie horaire effacée.</returns>
      <param name="dateValue">Valeur de date/heure à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique TruncateTime pour ajouter la date donnée sans heure.</summary>
      <returns>Date d'entrée avec la partie horaire effacée.</returns>
      <param name="dateValue">Valeur de date/heure à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>DbModelBuilder est utilisé pour mapper des classes CLR à un schéma de base de données.Cette approche centrée sur le code pour générer un modèle EDM (Entity Data Model) est appelée Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbModelBuilder" />.Le processus de découverte du modèle initial utilise l'ensemble de conventions inclus dans la dernière version de l'Entity Framework installée sur votre ordinateur.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbModelBuilder" /> qui utilisera un ensemble spécifique de conventions pour découvrir le modèle initial.</summary>
      <param name="modelBuilderVersion">Version des conventions à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Crée un <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> selon la configuration créée à l'aide de ce générateur.La connexion est utilisée pour déterminer le fournisseur de bases de données utilisé, car cela affecte la couche de base de données du modèle généré.</summary>
      <returns>Modèle construit.</returns>
      <param name="providerConnection">Connexion à utiliser pour déterminer les informations sur le fournisseur de services.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Crée un <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> selon la configuration créée à l'aide de ce générateur.Les informations sur le fournisseur de services doivent être spécifiées parce que cela affecte la couche de base de données du modèle généré.Pour SqlClient le nom invariant est « System.Data.SqlClient » et le jeton de manifeste est l'année de version (par exemple,« 2005 », « 2008 », etc.).</summary>
      <returns>Modèle construit.</returns>
      <param name="providerInfo">Fournisseur de bases de données avec lequel le modèle est utilisé.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Enregistre un type en tant que type complexe dans le modèle et retourne un objet qui peut être utilisé pour configurer le type complexe.Cette méthode peut être appelée plusieurs fois pour le même type pour créer plusieurs lignes de configuration.</summary>
      <returns>Objet de configuration pour le type complexe spécifié.</returns>
      <typeparam name="TComplexType">Type à enregistrer ou configurer.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Obtient le <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> de ce DbModelBuilder.Le registre autorise l'enregistrement d'une entité dérivée et de configurations de type complexe avec ce générateur.</summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Fournit l'accès aux paramètres de ce DbModelBuilder relatif aux conventions.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Enregistre un type d'entité dans le cadre du modèle et retourne un objet qui peut être utilisé pour configurer l'entité.Cette méthode peut être appelée plusieurs fois pour la même entité, pour créer plusieurs lignes de configuration.</summary>
      <returns>Objet de configuration pour le type d'entité spécifié.</returns>
      <typeparam name="TEntityType">Type à enregistrer ou configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Spécifie si <see cref="T:System.Data.Entity.DbModelBuilder" /> est égal à l'objet spécifié.</summary>
      <returns>true si <see cref="T:System.Data.Entity.DbModelBuilder" /> est égal à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>Configure le nom de schéma de base de données par défaut.Ce nom de schéma de base de données par défaut est utilisé pour les objets de base de données qui n'ont pas de nom de schéma explicite configuré.</summary>
      <returns>La même instance de DbModelBuilder pour que plusieurs appels puissent être chaînés.</returns>
      <param name="schema">Nom du schéma de base de données par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Exclut un type du modèle.Cela est utilisé pour supprimer des types du modèle, ajoutés par convention pendant la découverte initiale du modèle.</summary>
      <returns>La même instance de DbModelBuilder pour que plusieurs appels puissent être chaînés.</returns>
      <typeparam name="T">Type à exclure.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Exclut les types spécifiés du modèle.Cela est utilisé pour supprimer des types du modèle, ajoutés par convention pendant la découverte initiale du modèle.</summary>
      <returns>La même instance de DbModelBuilder pour que plusieurs appels puissent être chaînés.</returns>
      <param name="types">Types à exclure du modèle.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>Démarre la configuration d'une convention légère qui s'applique à toutes les propriétés du modèle.</summary>
      <returns>Objet de configuration pour la convention.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>Démarre la configuration d'une convention légère qui s'applique à toutes les propriétés primitives du type spécifié dans le modèle.</summary>
      <returns>Objet de configuration pour la convention.</returns>
      <typeparam name="T">Type de propriétés auxquelles cette convention s'applique.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)">
      <summary>Inscrit un type d'entité dans le cadre du modèle.</summary>
      <param name="entityType">Type à inscrire.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <returns>Représentation sous forme de chaîne de <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <summary>Démarre la configuration d'une convention légère qui s'applique à l'ensemble des types d'entités et types complexes du modèle qui héritent du type spécifié par l'argument générique ou qui implémentent ce type.Cette méthode ne stocke pas les types dans le modèle.</summary>
      <returns>Objet de configuration pour la convention.</returns>
      <typeparam name="T">Type des entités ou types complexes auxquels cette convention s'applique.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types">
      <summary>Démarre la configuration d'une convention légère qui s'applique à l'ensemble des types d'entités et types complexes du modèle.</summary>
      <returns>Objet de configuration pour la convention.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Une valeur de cette énumération peut être fournie directement à la classe <see cref="T:System.Data.Entity.DbModelBuilder" /> ou peut être utilisée dans le <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> appliqué à une classe dérivée de <see cref="T:System.Data.Entity.DbContext" />.La valeur utilisée définit quelle version des conventions DbContext et DbModelBuilder doit être utilisée lors de la génération d'un modèle de code, également appelé Code First.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>     Indique que la version la plus récente des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> doit être utilisée. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     Indique que la version des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> fournie avec Entity Framework v4.1 doit être utilisée. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     Indique que la version des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> fournie avec Entity Framework v5.0 doit être utilisée. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Indique que la version des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> fournie avec Entity Framework v5.0 lorsque vous cibles .NET Framework 4 doit être utilisée.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     Indique que la version des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> fournie avec Entity Framework v6.0 doit être utilisée. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Cet attribut peut être appliqué à une classe dérivée de <see cref="T:System.Data.Entity.DbContext" /> pour définir quelle version des conventions DbContext et <see cref="T:System.Data.Entity.DbModelBuilder" /> doit être utilisée lors de la génération d'un modèle de code, également appelé Code First.Voyez l'énumération <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> pour plus d'informations sur les versions de DbModelBuilder.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />.</summary>
      <param name="version">Version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" /> à utiliser.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Obtient la version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <returns>Version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Version non générique de <see cref="T:System.Data.Entity.DbSet`1" /> qui peut être utilisée lorsque le type d'entité n'est pas connu au moment de la génération.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor">
      <summary>Crée une instance d'un <see cref="T:System.Data.Entity.DbSet" /> lors d'un appel depuis le constructeur d'un type dérivé qui servira à vérifier une deuxième fois DbSets.Les méthodes et les propriétés qui serviront au double test doivent être implémentées par le double test, à l'exception d'AsNoTracking, d'AsStreaming et d'Include pour lesquels l'implémentation par défaut correspond à une absence d'opération.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Ajoute l'entité donnée au contexte sous-jacent au jeu avec l'état « Added », de sorte qu'elle sera insérée dans la base de données lorsque SaveChanges est appelé.</summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>Ajoute la collection d'entités spécifiée au contexte sous-jacent au jeu. Chaque entité passe alors à l'état « Added » afin d'être insérée dans la base de données lorsque SaveChanges sera appelé.</summary>
      <returns>Collection d'entités.</returns>
      <param name="entities">Collection d'entités à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Joint l'entité donnée au contexte sous-jacent au jeu.Autrement dit, l'entité est placée dans le contexte dans un état Unchanged, tout comme si elle avait été lue à partir de la base de données.</summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à attacher.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.DbSet`1" /> générique équivalent.</summary>
      <returns>Objet défini générique.</returns>
      <typeparam name="TEntity">Type d'entité pour lequel le jeu a été créé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu.Notez que cette instance n'est pas ajoutée ou jointe au jeu.L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy.</summary>
      <returns>Instance d'entité, qui peut être un proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu ou pour un type dérivé du type de ce jeu.Notez que cette instance n'est pas ajoutée ou jointe au jeu.L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy.</summary>
      <returns>Instance d'entité, qui peut être un proxy.</returns>
      <param name="derivedEntityType">Type d'entité à créer.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Détermine si le jeu spécifié est égal au jeu actuel.</summary>
      <returns>true si l'objet spécifié est égal au jeu actuel ; sinon, false.</returns>
      <param name="obj">Jeu à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Recherche une entité avec les valeurs de clé primaire données.Si une entité avec les valeurs de clé primaire données existe dans le contexte, elle est retournée immédiatement sans demande au magasin.Sinon, une demande d'entité avec les valeurs de clé primaire données est faite au magasin et cette entité, si trouvée, est jointe au contexte et retournée.Si aucune entité n'est trouvée dans le contexte ou le magasin, null est retourné.</summary>
      <returns>Entité trouvée, ou bien une valeur null.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
      <exception cref="T:System.InvalidOperationException">Exception levée si plusieurs entités existent dans le contexte avec les valeurs de clé primaire données.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si le type d'entité ne fait pas partie du modèle de données de ce contexte.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si les valeurs de clé ne correspondent pas aux valeurs de clé du type d'entité recherché.</exception>
      <exception cref="T:System.InvalidOperationException">Levée si le contexte a été supprimé.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>Recherche de façon asynchrone une entité avec les valeurs de clé primaire données.Si une entité avec les valeurs de clé primaire données existe dans le contexte, elle est retournée immédiatement sans demande au magasin.Sinon, une demande d'entité avec les valeurs de clé primaire données est faite au magasin et cette entité, si trouvée, est jointe au contexte et retournée.Si aucune entité n'est trouvée dans le contexte ou le magasin, null est retourné.</summary>
      <returns>Tâche qui représente l'opération de recherche asynchrone.Le résultat de la tâche contient l'entité trouvée ou Null.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
      <exception cref="T:System.InvalidOperationException">Exception levée si plusieurs entités existent dans le contexte avec les valeurs de clé primaire données.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si le type d'entité ne fait pas partie du modèle de données de ce contexte.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si les valeurs de clé ne correspondent pas aux valeurs de clé du type d'entité recherché.</exception>
      <exception cref="T:System.InvalidOperationException">Levée si le contexte a été supprimé.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Recherche de façon asynchrone une entité avec les valeurs de clé primaire données.Si une entité avec les valeurs de clé primaire données existe dans le contexte, elle est retournée immédiatement sans demande au magasin.Sinon, une demande d'entité avec les valeurs de clé primaire données est faite au magasin et cette entité, si trouvée, est jointe au contexte et retournée.Si aucune entité n'est trouvée dans le contexte ou le magasin, null est retourné.</summary>
      <returns>Tâche qui représente l'opération de recherche asynchrone.Le résultat de la tâche contient l'entité trouvée ou Null.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
      <exception cref="T:System.InvalidOperationException">Exception levée si plusieurs entités existent dans le contexte avec les valeurs de clé primaire données.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si le type d'entité ne fait pas partie du modèle de données de ce contexte.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si les valeurs de clé ne correspondent pas aux valeurs de clé du type d'entité recherché.</exception>
      <exception cref="T:System.InvalidOperationException">Levée si le contexte a été supprimé.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Retourne la fonction de hachage pour le jeu spécifié.</summary>
      <returns>Fonction de hachage pour le jeu.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Obtient le type de jeu actuel.</summary>
      <returns>Type du jeu actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Obtient un <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui représente une vue locale de toutes les entités ajoutées, inchangées et modifiées dans ce jeu.Cette vue locale reste synchronisée lorsque les entités sont ajoutées ou supprimées du contexte.De même, les entités ajoutées à ou supprimées de la vue locale seront ajoutées ou supprimées automatiquement du contexte.</summary>
      <returns>Vue locale.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Marque l'entité donnée comme Deleted, de sorte qu'elle sera supprimée de la base de données lorsque SaveChanges est appelé.Notez que l'entité doit exister dans le contexte dans un autre état avant que cette méthode soit appelée.</summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>Supprime la collection d'entités spécifiée du contexte sous-jacent au jeu. Chaque entité passe alors à l'état « Deleted » afin d'être supprimée dans la base de données lorsque SaveChanges sera appelé.</summary>
      <returns>Collection d'entités.</returns>
      <param name="entities">Collection d'entités à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des entités dans ce jeu.Par défaut, les entités retournées sont suivies par le contexte ; cela peut être modifié en appelant AsNoTracking sur le <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> retourné.Notez que les entités retournées sont toujours du type de ce jeu et jamais d'un type dérivé.Si la table ou les tables interrogées peuvent contenir des données pour d'autres types d'entités, la requête SQL doit être écrite convenablement pour garantir que seules les entités du type correct sont retournées.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de requête SQL.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>Un objet DbSet représente la collection de toutes les entités dans le contexte, ou des entités pouvant être interrogées à partir de la base de données, d'un type donné.Les objets DbSet sont créés à partir d'un DbContext à l'aide de la méthode DbContext.Set.</summary>
      <typeparam name="TEntity">Type qui définit l'ensemble.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor">
      <summary>Crée une instance d'un <see cref="T:System.Data.Entity.DbSet`1" /> lors d'un appel depuis le constructeur d'un type dérivé qui servira à vérifier une deuxième fois DbSets.Les méthodes et les propriétés qui serviront au double test doivent être implémentées par le double test, à l'exception d'AsNoTracking, d'AsStreaming et d'Include pour lesquels l'implémentation par défaut correspond à une absence d'opération.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Ajoute l'entité donnée au contexte sous-jacent au jeu avec l'état « Added », de sorte qu'elle sera insérée dans la base de données lorsque SaveChanges est appelé.</summary>
      <param name="entity">Entité à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ajoute la collection d'entités spécifiée au contexte sous-jacent au jeu. Chaque entité passe alors à l'état « Added » afin d'être insérée dans la base de données lorsque SaveChanges sera appelé.</summary>
      <returns>Collection d'entités.</returns>
      <param name="entities">Collection d'entités à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Joint l'entité donnée au contexte sous-jacent au jeu.Autrement dit, l'entité est placée dans le contexte dans un état Unchanged, tout comme si elle avait été lue à partir de la base de données.</summary>
      <param name="entity">Entité à attacher.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu.Notez que cette instance n'est pas ajoutée ou jointe au jeu.L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu ou pour un type dérivé du type de ce jeu.Notez que cette instance n'est pas ajoutée ou jointe au jeu.L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy.</summary>
      <typeparam name="TDerivedEntity">Type d'entité à créer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Détermine si l'objet DbSet spécifié est identique au DbSet actuel.</summary>
      <returns>true si le DbSet spécifié est égal au DbSet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer au DbSet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Recherche une entité avec les valeurs de clé primaire données.Si une entité avec les valeurs de clé primaire données existe dans le contexte, elle est retournée immédiatement sans demande au magasin.Sinon, une demande d'entité avec les valeurs de clé primaire données est faite au magasin et cette entité, si trouvée, est jointe au contexte et retournée.Si aucune entité n'est trouvée dans le contexte ou le magasin, null est retourné.</summary>
      <returns>Entité trouvée, ou bien une valeur null.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
      <exception cref="T:System.InvalidOperationException">Exception levée si plusieurs entités existent dans le contexte avec les valeurs de clé primaire données.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si le type d'entité ne fait pas partie du modèle de données de ce contexte.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si les valeurs de clé ne correspondent pas aux valeurs de clé du type d'entité recherché.</exception>
      <exception cref="T:System.InvalidOperationException">Levée si le contexte a été supprimé.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])">
      <summary>Recherche de façon asynchrone une entité avec les valeurs de clé primaire données.Si une entité avec les valeurs de clé primaire données existe dans le contexte, elle est retournée immédiatement sans demande au magasin.Sinon, une demande d'entité avec les valeurs de clé primaire données est faite au magasin et cette entité, si trouvée, est jointe au contexte et retournée.Si aucune entité n'est trouvée dans le contexte ou le magasin, null est retourné.</summary>
      <returns>Tâche qui représente l'opération de recherche asynchrone.Le résultat de la tâche contient l'entité trouvée ou Null.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Recherche de façon asynchrone une entité avec les valeurs de clé primaire données.Si une entité avec les valeurs de clé primaire données existe dans le contexte, elle est retournée immédiatement sans demande au magasin.Sinon, une demande d'entité avec les valeurs de clé primaire données est faite au magasin et cette entité, si trouvée, est jointe au contexte et retournée.Si aucune entité n'est trouvée dans le contexte ou le magasin, null est retourné.</summary>
      <returns>Tâche qui représente l'opération de recherche asynchrone.Le résultat de la tâche contient l'entité trouvée ou Null.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
      <exception cref="T:System.InvalidOperationException">Exception levée si plusieurs entités existent dans le contexte avec les valeurs de clé primaire données.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si le type d'entité ne fait pas partie du modèle de données de ce contexte.</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si les valeurs de clé ne correspondent pas aux valeurs de clé du type d'entité recherché.</exception>
      <exception cref="T:System.InvalidOperationException">Levée si le contexte a été supprimé.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Retourne la fonction de hachage pour cet objet DbSet.</summary>
      <returns>Fonction de hachage pour cet objet DbSet.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Renvoie le type du DbSet actuel.</summary>
      <returns>Type du DbSet actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Obtient un <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui représente une vue locale de toutes les entités ajoutées, inchangées et modifiées dans ce jeu.Cette vue locale reste synchronisée lorsque les entités sont ajoutées ou supprimées du contexte.De même, les entités ajoutées à ou supprimées de la vue locale seront ajoutées ou supprimées automatiquement du contexte.</summary>
      <returns>Vue locale.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.DbSet" /> non générique équivalent.</summary>
      <returns>Objet défini non générique.</returns>
      <param name="entry">Objet défini générique.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Marque l'entité donnée comme Deleted, de sorte qu'elle sera supprimée de la base de données lorsque SaveChanges est appelé.Notez que l'entité doit exister dans le contexte dans un autre état avant que cette méthode soit appelée.</summary>
      <param name="entity">Entité à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime la collection d'entités spécifiée du contexte sous-jacent au jeu. Chaque entité passe alors à l'état « Deleted » afin d'être supprimée dans la base de données lorsque SaveChanges sera appelé.</summary>
      <returns>Collection d'entités.</returns>
      <param name="entities">Collection d'entités à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des entités dans ce jeu.Par défaut, les entités retournées sont suivies par le contexte ; cela peut être modifié en appelant AsNoTracking sur le <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> retourné.Notez que les entités retournées sont toujours du type de ce jeu et jamais d'un type dérivé.Si la table ou les tables interrogées peuvent contenir des données pour d'autres types d'entités, la requête SQL doit être écrite convenablement pour garantir que seules les entités du type correct sont retournées.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de requête SQL.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Implémentation de IDatabaseInitializer qui recréera toujours et, éventuellement réalimentera, la base de données avec les données la première fois qu'un contexte est utilisé dans le domaine d'application.Pour alimenter la base de données, créez une classe dérivée et substituez la méthode Seed.</summary>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné.</summary>
      <param name="context">Contexte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>Méthode qui doit être substituée pour ajouter réellement des données au contexte à alimenter.L'implémentation par défaut n'exécute aucune opération.</summary>
      <param name="context">Contexte à alimenter.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Implémentation de IDatabaseInitializer qui supprime, recrée et, éventuellement, alimente de nouveau la base de données uniquement si le modèle a changé depuis la création de la base de données.</summary>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné.</summary>
      <param name="context">Contexte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Méthode qui doit être substituée pour ajouter réellement des données au contexte à alimenter.L'implémentation par défaut n'exécute aucune opération.</summary>
      <param name="context">Contexte à alimenter.</param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     Décrit l'état d'une entité. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     L'entité est suivie par le contexte, mais n'existe pas encore dans la base de données. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     L'entité est suivie par le contexte et existe dans la base de données, mais est marquée pour suppression de la base de données lors du prochain appel de SaveChanges. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>L'entité n'est pas suivie par le contexte.Une entité est dans cet état dès qu'elle a été créée avec un nouvel opérateur ou avec l'une des méthodes de création du <see cref="T:System.Data.Entity.DbSet" />.</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     L'entité est suivie par le contexte et existe dans la base de données, et certaines de ses valeurs de propriété ont été modifiées. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     L'entité est suivie par le contexte et existe dans la base de données, et les valeurs de propriété n'ont pas changé par rapport aux valeurs dans la base de données. </summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Une implémentation de cette interface est utilisée pour initialiser la base de données sous-jacente lorsqu'une instance d'une classe dérivée <see cref="T:System.Data.Entity.DbContext" /> est utilisée pour la première fois.Cette initialisation permet de créer de façon conditionnelle la base de données et/ou de l'alimenter en données.La stratégie utilisée est définie avec la propriété statique InitializationStrategy de la classe <see cref="T:System.Data.Entity.Database" />.Les implémentations suivantes sont fournies : <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />,     <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />, <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <typeparam name="TContext">Ce paramètre de type est contravariant. Autrement dit, vous pouvez utiliser le type que vous avez spécifié ou tout type moins dérivé. Pour plus d'informations sur la covariance et la contravariance, consultez .</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     Exécute la stratégie pour initialiser la base de données pour le contexte donné. </summary>
      <param name="context"> Contexte. </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>Un <see cref="T:System.Data.Entity.IDbSet`1" /> représente la collection de toutes les entités dans le contexte, ou des entités pouvant être interrogées à partir de la base de données, d'un type donné.<see cref="T:System.Data.Entity.DbSet`1" /> est une implémentation concrète d'IDbSet.</summary>
      <typeparam name="TEntity">Type qui définit l'ensemble.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Ajoute l'entité donnée au contexte sous-jacent au jeu avec l'état « Added », de sorte qu'elle sera insérée dans la base de données lorsque SaveChanges est appelé.</summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Joint l'entité donnée au contexte sous-jacent au jeu.Autrement dit, l'entité est placée dans le contexte dans un état Unchanged, tout comme si elle avait été lue à partir de la base de données.</summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à attacher.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu.Notez que cette instance n'est pas ajoutée ou jointe au jeu.L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy.</summary>
      <returns>Instance d'entité, qui peut être un proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu ou pour un type dérivé du type de ce jeu.Notez que cette instance n'est pas ajoutée ou jointe au jeu.L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy.</summary>
      <returns>Instance d'entité, qui peut être un proxy.</returns>
      <typeparam name="TDerivedEntity">Type d'entité à créer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Recherche une entité avec les valeurs de clé primaire données.Si une entité avec les valeurs de clé primaire données existe dans le contexte, elle est retournée immédiatement sans demande au magasin.Sinon, une demande d'entité avec les valeurs de clé primaire données est faite au magasin et cette entité, si trouvée, est jointe au contexte et retournée.Si aucune entité n'est trouvée dans le contexte ou le magasin, null est retourné.</summary>
      <returns>Entité trouvée, ou bien une valeur null.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Obtient un <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui représente une vue locale de toutes les entités ajoutées, inchangées et modifiées dans ce jeu.Cette vue locale reste synchronisée lorsque les entités sont ajoutées ou supprimées du contexte.De même, les entités ajoutées à ou supprimées de la vue locale seront ajoutées ou supprimées automatiquement du contexte.</summary>
      <returns>Vue locale.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Marque l'entité donnée comme Deleted, de sorte qu'elle sera supprimée de la base de données lorsque SaveChanges est appelé.Notez que l'entité doit exister dans le contexte dans un autre état avant que cette méthode soit appelée.</summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Implémentation de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> qui utilisera Migrations Code First pour mettre à jour la base de données vers la version la plus récente.</summary>
      <typeparam name="TContext">Type du contexte.</typeparam>
      <typeparam name="TMigrationsConfiguration">Type de la configuration des migrations à utiliser pendant l'initialisation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>Initialise une nouvelle instance de la classe MigrateDatabaseToLatestVersion qui utilisera les informations de connexion d'un contexte créé à partir du constructeur par défaut ou de la fabrique inscrite, le cas échéant.</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe MigrateDatabaseToLatestVersion qui spécifie si les informations de connexion à utiliser proviennent du contexte ayant déclenché l'initialisation pour effectuer la migration.</summary>
      <param name="useSuppliedContext">S'il a la valeur true, l'initialiseur est exécuté avec les informations de connexion du contexte ayant déclenché l'initialisation.Sinon, il utilise les informations de connexion d'un contexte créé à partir du constructeur par défaut ou de la fabrique inscrite, le cas échéant.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean,`1)">
      <summary>Initialise une nouvelle instance de la classe MigrateDatabaseToLatestVersion qui spécifie si les informations de connexion à utiliser proviennent du contexte ayant déclenché l'initialisation pour effectuer la migration.Permet également de spécifier la configuration des migrations à utiliser pendant l'initialisation.</summary>
      <param name="useSuppliedContext">S'il a la valeur true, l'initialiseur est exécuté avec les informations de connexion du contexte ayant déclenché l'initialisation.Sinon, il utilise les informations de connexion d'un contexte créé à partir du constructeur par défaut ou de la fabrique inscrite, le cas échéant.</param>
      <param name="configuration">Configuration des migrations à utiliser durant l'initialisation.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe MigrateDatabaseToLatestVersion qui utilisera une chaîne de connexion spécifique provenant du fichier de configuration afin d'établir la connexion à la base de données pour effectuer la migration.</summary>
      <param name="connectionStringName">Nom de la chaîne de connexion à utiliser pour la migration.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Initialise la base de données pour le contexte donné.</summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>Implémentation de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> qui n'exécute aucune opération.Cet initialiseur désactive l'initialisation de type de contexte donné.Passer une instance de cette classe à <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" /> équivaut à passer une valeur Null.Lorsque <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> est utilisé pour résoudre les initialiseurs, une instance de cette classe doit être utilisée pour désactiver l'initialisation.</summary>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné.</summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>Méthodes d'extension pour <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>Retourne une implémentation <see cref="T:System.ComponentModel.BindingList`1" /> qui reste synchronisée avec le <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> donné.</summary>
      <returns>Liste de liaison.</returns>
      <param name="source">Collection avec laquelle la liste de liaison restera synchronisée.</param>
      <typeparam name="T">Type de l'élément.</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>Fournit des méthodes d'extension utiles à utiliser avec les requêtes LINQ d'Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Détermine de façon asynchrone si tous les éléments d'une séquence satisfont une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si chaque élément de la séquence source réussit le test de l'attribut spécifié ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> dont les éléments doivent être testés pour une condition.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si tous les éléments d'une séquence satisfont une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si chaque élément de la séquence source réussit le test de l'attribut spécifié ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> dont les éléments doivent être testés pour une condition.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>Détermine de façon asynchrone si une séquence contient des éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si la séquence source contient des éléments ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> pour y détecter l'absence de données.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Détermine de façon asynchrone si un élément d'une séquence satisfait une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si un élément de la séquence source réussit le test dans le prédicat spécifié ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> dont les éléments doivent être testés pour une condition.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si un élément d'une séquence satisfait une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si un élément de la séquence source réussit le test dans le prédicat spécifié ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> dont les éléments doivent être testés pour une condition.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si une séquence contient des éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si la séquence source contient des éléments ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> pour y détecter l'absence de données.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.Cette méthode fonctionne en appelant la méthode AsNoTracking de l'objet de requête sous-jacent.Si l'objet de requête sous-jacent n'a pas de méthode AsNoTracking, l'appel de cette méthode n'a aucun effet.</summary>
      <returns>Une nouvelle requête avec NoTracking est appliquée, ou la source lance une requête si NoTracking n'est pas pris en charge.</returns>
      <param name="source">Requête source.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.Cette méthode fonctionne en appelant la méthode AsNoTracking de l'objet de requête sous-jacent.Si l'objet de requête sous-jacent n'a pas de méthode AsNoTracking, l'appel de cette méthode n'a aucun effet.</summary>
      <returns>Une nouvelle requête avec NoTracking est appliquée, ou la source lance une requête si NoTracking n'est pas pris en charge.</returns>
      <param name="source">Requête source.</param>
      <typeparam name="T">Type de l'élément.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.Cette méthode fonctionne en appelant la méthode AsStreaming de l'objet de requête sous-jacent.Si l'objet de requête sous-jacent n'a pas de méthode AsStreaming, l'appel de cette méthode n'a aucun effet.</summary>
      <returns>Nouvelle requête avec application d'AsStreaming ou requête source si AsStreaming n'est pas pris en charge.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> auquel appliquer AsStreaming.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.Cette méthode fonctionne en appelant la méthode AsStreaming de l'objet de requête sous-jacent.Si l'objet de requête sous-jacent n'a pas de méthode AsStreaming, l'appel de cette méthode n'a aucun effet.</summary>
      <returns>Nouvelle requête avec application d'AsStreaming ou requête source si AsStreaming n'est pas pris en charge.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> auquel appliquer AsStreaming.</param>
      <typeparam name="T">Type des éléments de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> nullables dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> nullables dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> nullables dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> nullables dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> nullables dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> nullables dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> nullables dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> nullables dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> nullables dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> nullables dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> dont la moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> dont la moyenne doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs dont la moyenne doit être calculée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>Détermine de façon asynchrone si une séquence contient un élément spécifié à l'aide du comparateur d'égalité par défaut.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si la séquence d'entrée contient la valeur spécifiée ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="item">Objet à localiser dans la séquence.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si une séquence contient un élément spécifié à l'aide du comparateur d'égalité par défaut.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si la séquence d'entrée contient la valeur spécifiée ; sinon, false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="item">Objet à localiser dans la séquence.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone le nombre d'éléments d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retourne de façon asynchrone le nombre d'éléments dans une séquence qui satisfont une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le nombre d'éléments dans une séquence qui satisfont une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le nombre d'éléments d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément dans <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">La séquence source est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence qui satisfait la condition spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément dans <paramref name="source" /> qui réussit le test dans <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence qui satisfait la condition spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément dans <paramref name="source" /> qui réussit le test dans <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément dans <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">La séquence source est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence, ou une valeur par défaut si la séquence ne contient aucun élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default (<paramref name="TSource" />) si <paramref name="source" /> est vide ; sinon, le premier élément dans <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence qui satisfait une condition spécifiée ou une valeur par défaut si aucun élément ne correspond.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default (<paramref name="TSource" />) si <paramref name="source" /> est vide ou si aucun élément ne réussit le test spécifié par <paramref name="predicate" /> ; sinon, le premier élément dans <paramref name="source" /> qui réussit le test spécifié par <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence qui satisfait une condition spécifiée ou une valeur par défaut si aucun élément ne correspond.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default (<paramref name="TSource" />) si <paramref name="source" /> est vide ou si aucun élément ne réussit le test spécifié par <paramref name="predicate" /> ; sinon, le premier élément dans <paramref name="source" /> qui réussit le test spécifié par <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> a plusieurs éléments.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément d'une séquence, ou une valeur par défaut si la séquence ne contient aucun élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default (<paramref name="TSource" />) si <paramref name="source" /> est vide ; sinon, le premier élément dans <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le premier élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> à énumérer.</param>
      <param name="action">Action à exécuter sur chaque élément.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> à énumérer.</param>
      <param name="action">Action à exécuter sur chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à énumérer.</param>
      <param name="action">Action à exécuter sur chaque élément.</param>
      <typeparam name="T">Type des éléments de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à énumérer.</param>
      <param name="action">Action à exécuter sur chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="T">Type des éléments de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouvel objet <see cref="T:System.Linq.IQueryable" /> avec le chemin d'accès de requête défini.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" />source sur lequel appeler Include.</param>
      <param name="path">Liste d'objets connexes, séparés par des points, à retourner dans les résultats de la requête.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouvel objet IQueryable&amp;lt;T&amp;gt; avec le chemin d'accès de requête défini.</returns>
      <param name="source">IQueryable source sur lequel appeler Include.</param>
      <param name="path">Expression lambda qui représente le chemin d'accès à inclure.</param>
      <typeparam name="T">Type de l'entité interrogée.</typeparam>
      <typeparam name="TProperty">Type de la propriété de navigation incluse.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouvel objet <see cref="T:System.Linq.IQueryable`1" /> avec le chemin d'accès de requête défini.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />source sur lequel appeler Include.</param>
      <param name="path">Liste d'objets connexes, séparés par des points, à retourner dans les résultats de la requête.</param>
      <typeparam name="T">Type de l'entité interrogée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>Énumère la requête de sorte que pour les requêtes de serveur, notamment celles de <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> et autres, les résultats de la requête seront chargés dans le <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> associé ou dans l'autre cache sur le client.Ceci équivaut à appeler ToList, puis à rejeter la liste sans la surcharge liée à la création de la liste proprement dite.</summary>
      <param name="source">Requête source.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>Énumère de façon asynchrone la requête de sorte que pour les requêtes de serveur, notamment celles de <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> et autres, les résultats de la requête seront chargés dans le <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> associé ou dans l'autre cache sur le client.Ceci équivaut à appeler ToList, puis à rejeter la liste sans la surcharge liée à la création de la liste proprement dite.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="source">Requête source.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Énumère de façon asynchrone la requête de sorte que pour les requêtes de serveur, notamment celles de <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> et autres, les résultats de la requête seront chargés dans le <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> associé ou dans l'autre cache sur le client.Ceci équivaut à appeler ToList, puis à rejeter la liste sans la surcharge liée à la création de la liste proprement dite.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="source">Requête source.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre total d'éléments dans une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre d'éléments dans une séquence qui satisfont une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre d'éléments dans une séquence qui satisfont une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre total d'éléments dans une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments à compter.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone la valeur maximale d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur maximale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur maximale doit être déterminée.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Appelle de façon asynchrone une fonction de projection sur chaque élément d'une séquence et retourne la valeur résultante maximale.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur maximale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur maximale doit être déterminée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par la fonction représentée par <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Appelle de façon asynchrone une fonction de projection sur chaque élément d'une séquence et retourne la valeur résultante maximale.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur maximale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur maximale doit être déterminée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par la fonction représentée par <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone la valeur maximale d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur maximale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur maximale doit être déterminée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone la valeur minimale d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur minimale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur minimale doit être déterminée.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Appelle de façon asynchrone une fonction de projection sur chaque élément d'une séquence et retourne la valeur résultante minimale.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur minimale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur minimale doit être déterminée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par la fonction représentée par <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Appelle de façon asynchrone une fonction de projection sur chaque élément d'une séquence et retourne la valeur résultante minimale.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur minimale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur minimale doit être déterminée.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par la fonction représentée par <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone la valeur minimale d'une séquence.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur minimale dans la séquence.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> qui contient les éléments dont la valeur minimale doit être déterminée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone le seul élément d'une séquence et lève une exception, si cette séquence ne contient pas exactement un élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">La séquence source est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retourne de façon asynchrone le seul élément d'une séquence qui satisfait une condition spécifiée et lève une exception, s'il existe plusieurs éléments de ce type.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée qui satisfait la condition dans <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="predicate">Fonction permettant de tester un élément pour une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Plusieurs éléments satisfont la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le seul élément d'une séquence qui satisfait une condition spécifiée et lève une exception, s'il existe plusieurs éléments de ce type.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée qui satisfait la condition dans <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="predicate">Fonction permettant de tester un élément pour une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Plusieurs éléments satisfont la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le seul élément d'une séquence et lève une exception, si cette séquence ne contient pas exactement un élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> a plusieurs éléments.</exception>
      <exception cref="T:System.InvalidOperationException">La séquence source est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Retourne de façon asynchrone l'élément unique d'une séquence ou une valeur par défaut si la séquence est vide. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée, ou default (<paramref name="TSource" />) si la séquence ne contient aucun élément.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> a plusieurs éléments.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retourne de façon asynchrone le seul élément d'une séquence ou une valeur par défaut si cette séquence ne contient pas d'élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant cette condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée qui satisfait la condition dans <paramref name="predicate" /> ou default (<paramref name="TSource" />) s'il n'existe aucun élément de ce type.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="predicate">Fonction permettant de tester un élément pour une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le seul élément d'une séquence ou une valeur par défaut si cette séquence ne contient pas d'élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant cette condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée qui satisfait la condition dans <paramref name="predicate" /> ou default (<paramref name="TSource" />) s'il n'existe aucun élément de ce type.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="predicate">Fonction permettant de tester un élément pour une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone l'élément unique d'une séquence ou une valeur par défaut si la séquence est vide. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément de la séquence d'entrée, ou default (<paramref name="TSource" />) si la séquence ne contient aucun élément.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> duquel retourner le seul élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> a plusieurs éléments.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Ignore un nombre spécifié d'éléments dans une séquence, puis retourne les éléments restants.</summary>
      <returns>Séquence qui contient les éléments se trouvant après l'index spécifié dans la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="countAccessor">Expression qui détermine le nombre d'éléments à ignorer.</param>
      <typeparam name="TSource">Type des éléments de la source.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Decimal" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Decimal" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Double" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Double" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int32" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int32" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int64" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int64" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> nullables dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Decimal" /> nullables dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Double" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> nullables dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Double" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Double" /> nullables dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int32" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> nullables dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int32" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int32" /> nullables dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int64" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> nullables dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Int64" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Int64" /> nullables dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Single" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> nullables dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Single" /> nullables.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> nullables dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Single" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> dont la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme d'une séquence de valeurs <see cref="T:System.Single" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de tâche contient la somme des valeurs dans la séquence.</returns>
      <param name="source">Séquence de valeurs <see cref="T:System.Single" /> dont la somme doit être calculée.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Decimal" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Decimal" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Double" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Double" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int32" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int32" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int64" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int64" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Decimal" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Decimal" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Double" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Double" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int32" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int32" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int64" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Int64" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Single" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Single" /> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Single" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Calcule de façon asynchrone la somme de la séquence de valeurs <see cref="T:System.Single" /> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la somme des valeurs projetées.</returns>
      <param name="source">Séquence de valeurs de type <paramref name="TSource" />.</param>
      <param name="selector">Fonction de projection à appliquer à chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> n'implémente pas <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Retourne un nombre spécifié d'éléments contigus à partir du début d'une séquence.</summary>
      <returns>Séquence qui contient le nombre spécifié d'éléments à partir du début de la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="countAccessor">Expression qui détermine le nombre d'éléments à retourner.</param>
      <typeparam name="TSource">Type des éléments de la source.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>Crée un tableau d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un tableau qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un tableau.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Crée un tableau d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un tableau qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un tableau.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé et un comparateur spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé et un comparateur spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé et une fonction de sélection d'élément spécifiées.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TElement" /> sélectionnées de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé, un comparateur et une fonction de sélection d'élément spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TElement" /> sélectionnées de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé, un comparateur et une fonction de sélection d'élément spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TElement" /> sélectionnées de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé et une fonction de sélection d'élément spécifiées.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TElement" /> sélectionnées de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone selon une fonction de sélection de clé spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> à partir d'un <see cref="T:System.Linq.IQueryable" /> par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> à partir duquel créer un <see cref="T:System.Collections.Generic.List`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> à partir d'un <see cref="T:System.Linq.IQueryable" /> par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> à partir duquel créer un <see cref="T:System.Collections.Generic.List`1" />.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> à partir d'un <see cref="T:System.Linq.IQueryable`1" /> par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />à partir duquel créer une liste.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>Contrôle le comportement de création de la transaction pendant l'exécution d'une commande ou d'une requête sur la base de données.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>S'il existe déjà une transaction, utilisez-la. Sinon, exécutez la commande ou la requête sans transaction.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>En l'absence de transaction, une nouvelle transaction est utilisée pour effectuer l'opération.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>Représente un échec lors de la préparation ou de l'exécution d'un CommandCompilation.Cette exception est conçue pour fournir une exception commune que les utilisateurs peuvent intercepter pour gérer les exceptions du fournisseur (SqlException, OracleException) lors de l'utilisation de l'EntityCommand pour exécuter les instructions.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, sans message ni exception interne.N'existe probablement pas, mais convient à FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, avec message, sans exception interne.N'existe probablement pas, mais convient à FxCop.</summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, avec message et une instance d'exception interne.</summary>
      <param name="message">Message.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>Représente un échec lors de la préparation ou de l'exécution d'un CommandExecution.Cette exception est conçue pour fournir une exception commune que les utilisateurs peuvent intercepter pour gérer les exceptions du fournisseur (SqlException, OracleException) lors de l'utilisation de l'EntityCommand pour exécuter les instructions.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>Initialise une nouvelle instance de la classe EntityCommandExecutionException, sans message ni exception interne.N'existe probablement pas, mais convient à FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe EntityCommandExecutionException, avec message, sans exception interne.N'existe probablement pas, mais convient à FxCop.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe EntityCommandExecutionException, avec message et instance d'exception interne.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception interne ayant provoqué cette exception actuelle.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>Fournit l'exception utilisée par EntityClient.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityException" />.</summary>
      <param name="info">Informations de sérialisation.</param>
      <param name="context">Contexte de diffusion en continu.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityException" /> qui accepte un message préformaté.</summary>
      <param name="message">Message d'erreur localisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityException" /> qui accepte un message préformaté et une exception interne.</summary>
      <param name="message">Message d'erreur localisé.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>Représente l'identificateur d'une entité.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityKey" /> avec les valeurs de clés données.</summary>
      <param name="qualifiedEntitySetName">Nom du EntitySet, qualifié par le nom du EntityContainer, de l'entité.</param>
      <param name="entityKeyValues">Paires clé-valeur qui identifient l'entité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityKey" /> avec les valeurs de clés données.</summary>
      <param name="qualifiedEntitySetName">Nom du EntitySet, qualifié par le nom du EntityContainer, de l'entité.</param>
      <param name="entityKeyValues">Paires clé-valeur qui identifient l'entité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityKey" /> avec le nom et la valeur de la clé unique donnée.</summary>
      <param name="qualifiedEntitySetName">Nom du EntitySet, qualifié par le nom du EntityContainer, de l'entité.</param>
      <param name="keyName">Nom de clé qui identifie l'entité.</param>
      <param name="keyValue">Valeur clé qui identifie l'entité.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>Obtient ou définit le nom du EntityContainer qui identifie le conteneur d'entités contenant l'entité.</summary>
      <returns>Nom du EntityContainer qui identifie le conteneur d'entités contenant l'entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>Obtient ou définit les valeurs de clé qui identifient l'entité.</summary>
      <returns>Valeurs de clé qui identifient l'entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>Obtient un <see cref="T:System.Data.Entity.Core.EntityKey" /> singleton qui identifie une entité résultant d'une opération TREAT non réussie.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> singleton qui identifie une entité résultant d'une opération TREAT non réussie.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>Obtient ou définit le nom du EntitySet qui identifie le jeu d'entités contenant l'entité.</summary>
      <returns>Nom du EntitySet qui identifie le jeu d'entités contenant l'entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>Indique une valeur si cette instance est égale à la clé donnée.</summary>
      <returns>true si cette instance correspond à la clé spécifiée ; sinon, false.</returns>
      <param name="other">Clé à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>Indique une valeur si cette instance est égale à la clé donnée.</summary>
      <returns>true si cette instance correspond à la clé spécifiée ; sinon, false.</returns>
      <param name="obj">Clé à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Obtient le jeu d'entités pour cette clé d'entité de l'espace de travail des métadonnées donné, par nom de conteneur d'entités et nom de jeu d'entités.</summary>
      <returns>Jeu d'entités de l'espace de travail spécifié pour cette clé d'entité.</returns>
      <param name="metadataWorkspace">Espace de travail dans lequel le jeu d'entités doit être recherché.</param>
      <exception cref="T:System.ArgumentException">Le jeu d'entités est introuvable dans l'espace de travail.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>Retourne le code de hachage basé sur la valeur, pour permettre l'utilisation du EntityKey dans des tables de hachage.</summary>
      <returns>Valeur de hachage de cet objet <see cref="T:System.Data.Entity.Core.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>Obtient une valeur indiquant si cette clé est une clé temporaire.</summary>
      <returns>true si cette clé est une clé temporaire ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>Obtient un <see cref="T:System.Data.Entity.Core.EntityKey" /> singleton par lequel une entité en lecture seule est identifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> singleton par lequel une entité en lecture seule est identifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Appelle une fois que cet <see cref="T:System.Data.Entity.Core.EntityKey" /> a été désérialisé.</summary>
      <param name="context">Contexte de sérialisation.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Appelle une fois que cet <see cref="T:System.Data.Entity.Core.EntityKey" /> a été désérialisé.</summary>
      <param name="context">Contexte de sérialisation.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Indique une valeur si les deux clés sont égales.</summary>
      <returns>true si les deux clés sont égales ; sinon, false.</returns>
      <param name="key1">Une clé à comparer.</param>
      <param name="key2">Une clé à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Indique une valeur si les deux clés ne sont pas égales.</summary>
      <returns>true si les deux clés ne sont pas égales ; sinon, false.</returns>
      <param name="key1">Une clé à comparer.</param>
      <param name="key2">Une clé à comparer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>Informations sur une clé qui fait partie d'un EntityKey.Un membre clé contient le nom et la valeur de la clé.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>Crée un EntityKeyMember vide.Ce constructeur est utilisé par la sérialisation.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     Crée un EntityKeyMember avec la valeur et le nom de clé spécifiés. </summary>
      <param name="keyName"> Nom de clé </param>
      <param name="keyValue"> Valeur de clé </param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     Nom de clé </summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     Retourne une chaîne représentant l'objet EntityKeyMember. </summary>
      <returns> Retourne une chaîne représentant l'objet EntityKeyMember </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     Valeur de clé </summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>Représente une exception de compilation de requête eSQL. Les conditions exceptionnelles qui peuvent lever cette exception sont principalement :     1) des erreurs de syntaxe : déclenchées lors de l'analyse de texte de la requête et lorsqu'une requête donnée ne respecte pas la grammaire formelle eSQL ;     2) des erreurs sémantiques : erreurs déclenchées lorsque les règles sémantiques du langage eSQL ne sont pas satisfaites, par exemple des métadonnées ou des informations de schéma non précises ou manquantes, des erreurs de validation de type, des violations de règle d'étendue, des variables non définies, etc.Pour plus d'informations, consultez les spécifications du langage eSQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>Initialise une nouvelle instance de l'objet <see cref="T:System.Data.Entity.Core.EntitySqlException" /> avec le message d'erreur générique.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de l'objet <see cref="T:System.Data.Entity.Core.EntitySqlException" /> avec le message spécifié.</summary>
      <param name="message">Message d'erreur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance d'objet <see cref="T:System.Data.Entity.Core.EntitySqlException" /> avec le message et l'instance innerException spécifiés.</summary>
      <param name="message">Message d'erreur.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>Obtient le numéro de colonne approximatif où l'erreur s'est produite.</summary>
      <returns>Numéro de colonne approximatif où l'erreur s'est produite.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>Obtient le contexte approximatif où l'erreur s'est produite, s'il est disponible.</summary>
      <returns>Contexte approximatif où l'erreur s'est produite, s'il est disponible.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>Obtient la description d'erreur qui explique la raison pour laquelle la requête n'a pas été reçue ou un String.Empty vide </summary>
      <returns>Description d'erreur qui explique la raison pour laquelle la requête n'a pas été acceptée ou String.Empty vide.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>Obtient le numéro de ligne approximatif où l'erreur s'est produite. </summary>
      <returns>Numéro de ligne approximatif où l'erreur s'est produite.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>Propose une interface DataRecord prenant en charge les types structurés et les informations de métadonnées enrichies.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>Obtient la propriété DataRecordInfo décrivant le contenu de l'enregistrement.</summary>
      <returns>Propriété DataRecordInfo décrivant le contenu de l'enregistrement.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Retourne des lecteurs imbriqués sous la forme d'objets DbDataReader.</summary>
      <returns>Lecteurs imbriqués sous la forme d'objets DbDataReader.</returns>
      <param name="i">Ordinal de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Obtient un objet DbDataRecord avec l'index spécifié.</summary>
      <returns>Objet DbDataRecord.</returns>
      <param name="i">Index de la ligne.</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     Exception levée pour indiquer qu'une arborescence de commandes n'est pas valide. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     Construit un nouvel InvalidCommandTreeException avec un message par défaut. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     Construit un nouvel InvalidCommandTreeException avec le message spécifié. </summary>
      <param name="message"> Message d'exception </param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     Construit un nouvel InvalidCommandTreeException avec le message et l'exception interne spécifiés. </summary>
      <param name="message"> Message d'exception. </param>
      <param name="innerException"> Exception à l'origine de cet InvalidCommandTreeException. </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>Classe d'exception de mappage.Notez que cette classe a un état. Par conséquent, si vous modifiez ses éléments internes, cela peut être une modification avec rupture.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     constructeur avec le message par défaut </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     constructeur par défaut </summary>
      <param name="message"> message d'erreur localisé </param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     constructeur </summary>
      <param name="message"> message d'erreur localisé </param>
      <param name="innerException"> exception interne </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     classe d'exception de métadonnées </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     constructeur avec le message par défaut </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     constructeur par défaut </summary>
      <param name="message"> message d'erreur localisé </param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     constructeur </summary>
      <param name="message"> message d'erreur localisé </param>
      <param name="innerException"> exception interne </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>Cette exception est levée lorsqu'un objet demandé est introuvable dans le magasin.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />.</summary>
      <param name="message">Message d'erreur localisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> et le constructeur qui prend un message et une exception interne.</summary>
      <param name="message">Message d'erreur localisé.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>Cette exception est levée lorsqu'une opération de mise à jour ne respecte pas la contrainte d'accès concurrentiel.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> en utilisant les valeurs par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> avec un message spécifié.</summary>
      <param name="message">Message associé à l'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> avec un message et une exception interne spécifiés.</summary>
      <param name="message">Message associé à l'exception.</param>
      <param name="innerException">Erreur qui a provoqué l'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> avec un message et une exception interne spécifiés.</summary>
      <param name="message">Message.</param>
      <param name="innerException">Erreur qui a provoqué l'exception.</param>
      <param name="stateEntries">Entrées d'état.</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>Représente la classe d'exception de contrainte de propriété.Notez que cette classe a un état. Par conséquent, si vous modifiez ses éléments internes, cela peut être une modification avec rupture.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Message d'erreur localisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> avec un message et une exception interne fournis. </summary>
      <param name="message">Message d'erreur localisé.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Message d'erreur localisé.</param>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Message d'erreur localisé.</param>
      <param name="propertyName">Nom de la propriété.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>Obtient le nom de la propriété fonction qui ne respecte pas la contrainte.</summary>
      <returns>Nom de la propriété qui ne respecte pas la contrainte.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>Exception levée lorsque le fournisseur du magasin présente un comportement incompatible avec le fournisseur EntityClient.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> avec le message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui décrit l'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> avec le message d'erreur et l'exception interne spécifiés.</summary>
      <param name="message">Message d'erreur qui décrit l'exception.</param>
      <param name="innerException">Exception interne ayant provoqué l'exception actuelle.</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>Exception levée en cas d'échec de la mise à jour de l'enregistrement des modifications dans le magasin.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.UpdateException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.UpdateException" /> avec des données sérialisées.</summary>
      <param name="info">Objet qui contient les informations sérialisées relatives à l'exception.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.UpdateException" /> avec un message d'erreur.</summary>
      <param name="message">Message d'erreur qui décrit l'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.UpdateException" /> avec un message d'erreur et une exception interne. </summary>
      <param name="message">Message d'erreur qui décrit l'exception.</param>
      <param name="innerException">Exception interne ayant provoqué l'exception actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.UpdateException" /> avec un message d'erreur, une exception interne et des entrées d'état.</summary>
      <param name="message">Message d'erreur qui décrit l'exception.</param>
      <param name="innerException">Exception interne ayant provoqué l'exception actuelle.</param>
      <param name="stateEntries">Entrées d'état impliquées dans l'erreur.</param>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>Obtient les entrées d'état impliquées dans l'erreur. </summary>
      <returns>Entrées d'état impliquées dans l'erreur.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>Classe DataRecordInfo qui fournit un moyen simple d'accéder aux informations de type et aux informations de colonne.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>Initialise un nouvel objet <see cref="T:System.Data.Common.DbDataRecord" /> pour un type spécifique avec une collection dénombrable de champs de données.</summary>
      <param name="metadata">Métadonnées du type représenté par cet objet, fournies par <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="memberInfo">Collection dénombrable d'objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> qui représentent des informations sur les colonnes.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>Obtient <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> pour cet objet <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>Obtient les informations de type de cet objet sous la forme d'un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>Représente une commande préparée, pouvant être mise en cache et réutilisée pour éviter de repréparer une commande.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> avec le <see cref="T:System.Data.Common.DbCommand" /> fourni.</summary>
      <param name="prototype">
        <see cref="T:System.Data.Common.DbCommand" /> fourni.</param>
      <param name="cloneMethod">méthode utilisée pour cloner <see cref="T:System.Data.Common.DbCommand" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>Crée et retourne un objet DbCommand qui peut être exécuté.</summary>
      <returns>Commande pour la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>Interface de métadonnées pour tous les types CLR</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>Nom de la facette de classement</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Valeur à passer à GetInformation pour obtenir le ConceptualSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>Valeur à passer à GetInformation pour obtenir le ConceptualSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>Nom de la facette DefaultValue</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>Les enregistreurs de fournisseurs doivent substituer cette méthode pour retourner l'argument avec les caractères génériques et le caractère d'échappement sélectionné.Cette méthode est utilisée uniquement si SupportsEscapingLikeArgument retourne la valeur true.</summary>
      <returns>Argument avec les caractères génériques et le caractère d'échappement sélectionné.</returns>
      <param name="argument">Argument à placer dans une séquence d'échappement.</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>Nom de la facette FixedLength</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>En cas de substitution dans une classe dérivée, cette méthode retourne des informations spécifiques au fournisseur.</summary>
      <returns>Objet XmlReader qui représente le mappage au catalogue de magasins de données sous-jacent.</returns>
      <param name="informationType">Type d'informations à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>En cas de substitution dans une classe dérivée, cette méthode mappe le type de stockage spécifié et un jeu de facettes pour ce type à un type EDM.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui décrit un type EDM et un ensemble de facettes pour ce type.</returns>
      <param name="storeType">Instance TypeUsage qui décrit un type de stockage et un jeu de facettes pour ce type à mapper au type EDM.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Retourne les objets FacetDescription pour un type particulier.</summary>
      <returns>Objets FacetDescription pour le type EDM spécifié.</returns>
      <param name="edmType">Type EDM pour lequel retourner la description de facette.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Obtient les informations spécifiques au fournisseur.</summary>
      <returns>Informations spécifiques au fournisseur.</returns>
      <param name="informationType">Type d'informations à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>En cas de substitution dans une classe dérivée, retourne une collection des fonctions EDM prises en charge par le manifeste du fournisseur.</summary>
      <returns>Collection de fonctions EDM.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>En cas de substitution dans une classe dérivée, cette méthode mappe le type EDM spécifié et un jeu de facettes pour ce type à un type de stockage.</summary>
      <returns>Instance TypeUsage qui décrit un type de stockage et un jeu de facettes pour ce type.</returns>
      <param name="edmType">Instance TypeUsage qui décrit le type EDM et un jeu de facettes pour ce type à mapper à un type de stockage.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>En cas de substitution dans une classe dérivée, retourne l'ensemble de types primitifs pris en charge par la source de données.</summary>
      <returns>Ensemble de types pris en charge par la source de données.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>Nom de la facette IsStrict</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>Nom de la facette MaxLength</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>Obtient l'espace de noms utilisé par le manifeste de ce fournisseur.</summary>
      <returns>Espace de noms utilisé par le manifeste de ce fournisseur.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>Nom de la facette Nullable.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>Nom de la facette Precision</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>Nom de la facette Scale</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>Nom de la facette SRID</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Valeur à passer à GetInformation pour obtenir le StoreSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>Valeur à passer à GetInformation pour obtenir le StoreSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Valeur à passer à GetInformation pour obtenir le StoreSchemaMapping</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>Valeur à passer à GetInformation pour obtenir le StoreSchemaMappingVersion3</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>Indique si le fournisseur prend en charge les chaînes d'échappement à utiliser en tant que modèles dans une expression Like.</summary>
      <returns>True si ce fournisseur prend en charge les chaînes d'échappement à utiliser en tant que modèles dans une expression Like ; sinon, false.</returns>
      <param name="escapeCharacter">Caractère qui serait utilisé en tant que caractère d'échappement si le fournisseur prend en charge l'échappement.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>Retourne une valeur booléenne qui spécifie si le fournisseur est capable de gérer les arborescences d'expression contenant des instances de DbInExpression.Par défaut, l'implémentation false pour la compatibilité descendante.Les classes dérivées substituent cette méthode.</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>Nom de la facette Unicode.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>Fabrique pour la génération des définitions de commandes ; utilisez le type de cet objet en tant qu'argument pour la méthode IServiceProvider.GetService sur la fabrique de fournisseurs ;</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Ajoute un <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> qui sera utilisé pour résoudre des services de fournisseur par défaut supplémentaires lorsqu'un type dérivé est enregistré en tant que fournisseur Entity Framework à l'aide d'une entrée dans le fichier de configuration de l'application ou de l'inscription basée sur le code dans <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
      <param name="resolver">Programme de résolution à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
      <summary>Voir le problème 2390 - Le clonage de la propriété DesignTimeVisible sur DbCommand peut provoquer des interblocages.La substitution des sous-classes est donc permise ici.</summary>
      <returns>clone de <see cref="T:System.Data.Common.DbCommand" /></returns>
      <param name="fromDbCommand">objet <see cref="T:System.Data.Common.DbCommand" /> à cloner</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>Crée l'objet DbCommandDefinition par défaut en fonction de la commande de prototype. Cette méthode est destinée aux enregistreurs de fournisseur pour leur permettre de générer une définition de commande par défaut.Remarque : le prototype sera dupliqué.</summary>
      <returns>objet de définition de commande exécutable</returns>
      <param name="prototype">commande de prototype</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Crée un objet de définition de commande en fonction d'une arborescence de commandes.</summary>
      <returns>objet de définition de commande exécutable</returns>
      <param name="commandTree">arborescence de commandes pour l'instruction</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Créer une définition de commande à partir du manifeste et de l'arborescence de commandes spécifiés.</summary>
      <returns>La définition de commande créée.</returns>
      <param name="providerManifest">Manifeste.</param>
      <param name="commandTree">Arborescence de commandes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Crée une base de données indiquée par la connexion et crée des objets de schéma (tables, clés primaires, clés étrangères) en fonction du contenu d'un storeItemCollection.</summary>
      <param name="connection">Connexion à une base de données inexistante qui doit être créée et remplie avec les objets de magasin indiqués par le paramètre storeItemCollection.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour créer la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir desquels le script doit être créé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Génère un langage de définitions de données (script DDL qui crée des objets de schéma (tables, clés primaires, clés étrangères) en fonction du contenu du paramètre StoreItemCollection et qui est ciblé pour la version de la base de données correspondant au jeton de manifeste du fournisseur.</summary>
      <returns>Script DDL qui crée des objets de schéma en fonction du contenu du paramètre StoreItemCollection et qui est ciblé pour la version de la base de données correspondant au jeton de manifeste du fournisseur.</returns>
      <param name="providerManifestToken">Jeton de manifeste du fournisseur identifiant la version cible.</param>
      <param name="storeItemCollection">Structure de la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Crée un objet de définition de commande pour le manifeste du fournisseur et l'arborescence de commandes spécifiés.</summary>
      <returns>Objet de définition de commande exécutable.</returns>
      <param name="providerManifest">Manifeste du fournisseur récupéré précédemment du fournisseur de magasins.</param>
      <param name="commandTree">Arborescence de commandes pour l'instruction.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Retourne une valeur qui indique s'il existe une base de données sur le serveur.</summary>
      <returns>True si le fournisseur peut déduire la base de données uniquement en fonction de la connexion.</returns>
      <param name="connection">Connexion à une base de données dont l'existence est vérifiée par cette méthode.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour déterminer l'existence de la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir du modèle.Ce paramètre n'est plus utilisé pour déterminer l'existence de la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>Retourne une valeur qui indique s'il existe une base de données sur le serveur.</summary>
      <returns>True si le fournisseur peut déduire la base de données uniquement en fonction de la connexion.</returns>
      <param name="connection">Connexion à une base de données dont l'existence est vérifiée par cette méthode.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour déterminer l'existence de la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir du modèle.Ce paramètre n'est plus utilisé pour déterminer l'existence de la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Crée une base de données indiquée par la connexion et crée des objets de schéma (tables, clés primaires, clés étrangères) en fonction du contenu d'un StoreItemCollection.</summary>
      <param name="connection">Connexion à une base de données inexistante qui doit être créée et remplie avec les objets de magasin indiqués par le paramètre storeItemCollection.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour créer la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir desquels le script doit être créé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Génère un script de langage de définitions de données (DDL) qui crée des objets de schéma (tables, clés primaires, clés étrangères) en fonction du contenu du paramètre StoreItemCollection et qui est ciblé pour la version de la base de données correspondant au jeton de manifeste du fournisseur.</summary>
      <returns>Script DDL qui crée des objets de schéma en fonction du contenu du paramètre StoreItemCollection et qui est ciblé pour la version de la base de données correspondant au jeton de manifeste du fournisseur.</returns>
      <param name="providerManifestToken">Jeton de manifeste du fournisseur identifiant la version cible.</param>
      <param name="storeItemCollection">Structure de la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Retourne une valeur qui indique s'il existe une base de données sur le serveur.</summary>
      <returns>True si le fournisseur peut déduire la base de données uniquement en fonction de la connexion.</returns>
      <param name="connection">Connexion à une base de données dont l'existence est vérifiée par cette méthode.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour déterminer l'existence de la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir du modèle.Ce paramètre n'est plus utilisé pour déterminer l'existence de la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>Retourne une valeur qui indique s'il existe une base de données sur le serveur.</summary>
      <returns>True si le fournisseur peut déduire la base de données uniquement en fonction de la connexion.</returns>
      <param name="connection">Connexion à une base de données dont l'existence est vérifiée par cette méthode.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour déterminer l'existence de la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir du modèle.Ce paramètre n'est plus utilisé pour déterminer l'existence de la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Supprime la base de données spécifiée.</summary>
      <param name="connection">Connexion à une base de données existante qui doit être supprimée.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour supprimer la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir du modèle.Ce paramètre n'est plus utilisé pour la suppression d'une base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>Obtient les services spatiaux pour les <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Services spatiaux.</returns>
      <param name="manifestToken">Informations de jeton associées au manifeste du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Supprime la base de données spécifiée.</summary>
      <param name="connection">Connexion à une base de données existante qui doit être supprimée.</param>
      <param name="commandTimeout">Délai d'exécution des commandes nécessaires pour supprimer la base de données.</param>
      <param name="storeItemCollection">Collection de tous les éléments de magasin à partir du modèle.Ce paramètre n'est plus utilisé pour la suppression d'une base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>Développe |DataDirectory| dans le chemin d'accès indiqué s'il commence par |DataDirectory| et retourne le chemin d'accès étendu, ou retourne la chaîne indiquée s'il ne commence pas par |DataDirectory|.</summary>
      <returns>Chemin d'accès développé.</returns>
      <param name="path">Chemin d'accès à développer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>Retourne un lecteur XML qui représente la description CSDL.</summary>
      <returns>XmlReader qui représente la description CSDL</returns>
      <param name="csdlName">Nom de la description CSDL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>En cas de substitution dans une classe dérivée, retourne une instance d'une classe dérivée du DbProviderManifest.</summary>
      <returns>Objet DbProviderManifest qui représente le manifeste du fournisseur.</returns>
      <param name="manifestToken">Informations de jeton associées au manifeste du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Retourne le jeton du manifeste du fournisseur pour une connexion donnée.</summary>
      <returns>Jeton de manifeste du fournisseur pour la connexion spécifiée.</returns>
      <param name="connection">Connexion à partir de laquelle rechercher le jeton du manifeste.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Obtient le lecteur de données spatiales pour <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Lecteur de données spatiales.</returns>
      <param name="fromReader">Lecteur d'où les données spatiales proviennent.</param>
      <param name="manifestToken">Informations de jeton associées au manifeste du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>Obtient le <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> qui sera utilisé pour exécuter des méthodes qui utilisent la connexion spécifiée.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /></returns>
      <param name="connection">Connexion de base de données</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)">
      <summary>Obtient le <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> qui sera utilisé pour exécuter des méthodes qui utilisent la connexion spécifiée.Cette surcharge est utilisée par les classes dérivées à des fins de compatibilité avec les fournisseurs de wrapping.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /></returns>
      <param name="connection">Connexion de base de données</param>
      <param name="providerInvariantName">Nom invariant du fournisseur</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>Récupère le DbProviderFactory en fonction du DbConnection spécifié.</summary>
      <returns>Le DbProviderFactory récupéré.</returns>
      <param name="connection">Connexion à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Retourne le manifeste du fournisseur en utilisant les informations de version spécifiées.</summary>
      <returns>Manifeste du fournisseur en utilisant les informations de version spécifiées.</returns>
      <param name="manifestToken">Informations de jeton associées au manifeste du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Retourne le jeton du manifeste du fournisseur dans le cadre d'une connexion donnée.</summary>
      <returns>Jeton de manifeste du fournisseur.</returns>
      <param name="connection">Connexion à un fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Retourne les fournisseurs dans le cadre d'une connexion donnée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> instancié selon la connexion spécifiée.</returns>
      <param name="connection">Connexion à un fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>Appelé pour résoudre des services de fournisseur par défaut supplémentaires lorsqu'un type dérivé est enregistré en tant que fournisseur Entity Framework à l'aide d'une entrée dans le fichier de configuration de l'application ou de l'inscription basée sur le code dans <see cref="T:System.Data.Entity.DbConfiguration" />.L'implémentation de cette méthode dans la classe utilise les programmes de résolution ajoutés à la méthode AddDependencyResolver pour résoudre les dépendances.</summary>
      <returns>Instance du type donné, ou Null si le service ne peut pas être résolu.</returns>
      <param name="type">Le type du service à résoudre.</param>
      <param name="key">Clé facultative qui fournit des informations supplémentaires pour résoudre le service.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>Appelé pour résoudre des services de fournisseur par défaut supplémentaires lorsqu'un type dérivé est enregistré en tant que fournisseur Entity Framework à l'aide d'une entrée dans le fichier de configuration de l'application ou de l'inscription basée sur le code dans <see cref="T:System.Data.Entity.DbConfiguration" />.L'implémentation de cette méthode dans la classe utilise les programmes de résolution ajoutés à la méthode AddDependencyResolver pour résoudre les dépendances.</summary>
      <returns>Tous les services inscrits qui satisfont le type et la clé spécifiés, ou une énumération vide si aucun service n'existe.</returns>
      <param name="type">Le type du service à résoudre.</param>
      <param name="key">Clé facultative qui fournit des informations supplémentaires pour résoudre le service.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Obtient le lecteur de données spatiales pour <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Lecteur de données spatiales.</returns>
      <param name="fromReader">Lecteur d'où les données spatiales proviennent.</param>
      <param name="manifestToken">Jeton de manifeste associé au manifeste du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Obtient les services spatiaux pour les <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Services spatiaux.</returns>
      <param name="key">Informations sur la base de données pour laquelle les services spatiaux seront utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>Obtient les services spatiaux pour les <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Services spatiaux.</returns>
      <param name="manifestToken">Informations de jeton associées au manifeste du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>Inscrit un gestionnaire pour traiter les messages autres que les messages d'erreur provenant du fournisseur de bases de données.</summary>
      <param name="connection">Connexion pour laquelle des informations sont reçues.</param>
      <param name="handler">Gestionnaire pour traiter les messages.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Définit la valeur du paramètre, ainsi que les facettes appropriées pour le <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> donné.</summary>
      <param name="parameter">Paramètre.</param>
      <param name="parameterType">Type du paramètre.</param>
      <param name="value">Valeur du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Définit la valeur du paramètre, ainsi que les facettes appropriées pour le <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> donné.</summary>
      <param name="parameter">Paramètre.</param>
      <param name="parameterType">Type du paramètre.</param>
      <param name="value">Valeur du paramètre.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>Spécialisation de ProviderManifest qui reçoit un XmlReader</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" />.</summary>
      <param name="reader">Objet <see cref="T:System.Xml.XmlReader" /> qui fournit l'accès aux données XML dans le fichier de manifeste du fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Retourne la liste des descriptions de facette pour le type EDM (Entity Data Model) spécifié.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient la liste des descriptions de facette pour le type EDM spécifié.</returns>
      <param name="edmType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> pour lequel les descriptions de facette doivent être récupérées.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Retourne la liste des fonctions prises en charge par le fournisseur.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient la liste des fonctions prises en charge par le fournisseur.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Retourne la liste des types primitifs pris en charge par le fournisseur de stockage.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient la liste des types primitifs pris en charge par le fournisseur de stockage.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Obtient le nom d'espace de noms pris en charge par le manifeste de ce fournisseur.</summary>
      <returns>Nom d'espace de noms pris en charge par le manifeste de ce fournisseur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Obtient le type EDM (Entity Data Model) équivalent le mieux adapté au nom du type de stockage spécifié.</summary>
      <returns>Type EDM équivalent le mieux adapté au nom du type de stockage spécifié.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Obtient le type primitif de stockage équivalent le mieux adapté au nom du type de stockage spécifié.</summary>
      <returns>Type primitif de stockage équivalent le mieux adapté au nom du type de stockage spécifié.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>Classe d'EntityRecordInfo fournissant un moyen simple d'accéder aux informations de type et aux informations de colonne.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> d'un type d'entité spécifique à l'aide d'une collection énumérable de champs de données et d'informations spécifiques sur la clé et le jeu d'entités.</summary>
      <param name="metadata">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> de l'entité représentée par le <see cref="T:System.Data.Common.DbDataRecord" /> décrit par cet objet <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" />.</param>
      <param name="memberInfo">Collection dénombrable d'objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> qui représentent des informations sur les colonnes.</param>
      <param name="entityKey">Clé de l'entité.</param>
      <param name="entitySet">Jeu d'entités à laquelle l'entité appartient.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>Obtient le <see cref="T:System.Data.Entity.Core.EntityKey" /> pour l'entité.</summary>
      <returns>Clé de l'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>Classe FieldMetadata qui fournit la corrélation entre les numéros de colonne et MemberMetadata.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Initialise une nouvel objet <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> avec la valeur ordinale et le type de champ spécifiés.</summary>
      <param name="ordinal">Entier qui spécifie l'emplacement des métadonnées.</param>
      <param name="fieldType">Type de champ.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>Obtient le type de champ de l'objet <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</summary>
      <returns>Type de champ destiné à cet objet <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>Obtient l'ordinal de l'objet <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</summary>
      <returns>Entier qui représente la valeur ordinale.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>Représente un type de base abstrait pour les types qui implémentent l'interface d'IExpressionVisitor à dériver.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Implémente le modèle de visiteur pour l'arborescence de commandes.</summary>
      <param name="commandTree">Arborescence de commandes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>Implémente le modèle de visiteur pour l'arborescence de commandes de suppression.</summary>
      <param name="deleteTree">Arborescence de commandes de suppression.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>Implémente le modèle de visiteur pour l'arborescence de commandes de fonction.</summary>
      <param name="functionTree">Arborescence de commandes de fonction.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>Implémente le modèle de visiteur pour l'arborescence de commandes d'insertion.</summary>
      <param name="insertTree">Arborescence de commandes d'insertion.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>Implémente le modèle de visiteur pour la clause de modification.</summary>
      <param name="modificationClause">Clause de modification.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>Implémente le modèle de visiteur pour la collection de clauses de modification.</summary>
      <param name="modificationClauses">Clauses de modification.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>Implémente le modèle de visiteur pour l'arborescence de commandes de requête.</summary>
      <param name="queryTree">Arborescence de commandes de requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>Implémente le modèle de visiteur pour la clause SET.</summary>
      <param name="setClause">Clause SET.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>Implémente le modèle de visiteur pour l'arborescence de commandes de mise à jour.</summary>
      <param name="updateTree">Arborescence de commandes de mise à jour.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>Type de base abstrait pour les types qui implémentent l'interface d'IExpressionVisitor à dériver.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />.</summary>
      <param name="expression">DbAndExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />.</summary>
      <param name="expression">DbApplyExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <param name="expression">DbArithmeticExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <param name="expression">DbCaseExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />.</summary>
      <param name="expression">DbCastExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <param name="expression">DbComparisonExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />.</summary>
      <param name="expression">DbConstantExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <param name="expression">DbCrossJoinExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />.</summary>
      <param name="expression">DeRefExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <param name="expression">DbDistinctExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />.</summary>
      <param name="expression">DbElementExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <param name="expression">DbEntityRefExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />.</summary>
      <param name="expression">DbExceptExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Appelée lorsqu'un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> d'un type non reconnu est rencontré.</summary>
      <param name="expression">Expression</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
      <exception cref="T:System.NotSupportedException">Toujours levée si cette méthode est appelée, car elle indique qu'<paramref name="expression" /> est un type non pris en charge.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />.</summary>
      <param name="expression">DbFilterExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <param name="expression">DbFunctionExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <param name="expression">DbExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />.</summary>
      <param name="expression">DbInExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <param name="expression">DbIntersectExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <param name="expression">DbIsEmptyExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <param name="expression">DbIsNullExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <param name="expression">DbIsOfExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />.</summary>
      <param name="expression">DbJoinExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <param name="expression">DbLambdaExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />.</summary>
      <param name="expression">DbLikeExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />.</summary>
      <param name="expression">DbLimitExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <param name="expression">DbNewInstanceExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />.</summary>
      <param name="expression">DbNotExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />.</summary>
      <param name="expression">DbNullExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <param name="expression">DbOfTypeExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />.</summary>
      <param name="expression">DbOrExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">DbParameterReferenceExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />.</summary>
      <param name="expression">DbProjectExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <param name="expression">DbPropertyExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <param name="expression">DbQuantifierExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />.</summary>
      <param name="expression">DbRefExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <param name="expression">DbRefKeyExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">DbRelationshipNavigationExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />.</summary>
      <param name="expression">DbScanExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />.</summary>
      <param name="expression">DbSkipExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />.</summary>
      <param name="expression">DbSortExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <param name="expression">DbTreatExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <param name="expression">DbUnionAllExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Méthode de modèle de visiteur pour <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">DbVariableReferenceExpression visité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Méthode pratique pour visiter le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> spécifié.</summary>
      <param name="aggregate">Agrégat à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregate" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>Méthode pratique pour visiter chaque <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> de la liste, si la liste est non-Null.</summary>
      <param name="aggregates">Liste d'agrégats à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregates" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>Méthode pratique pour visiter le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" /> spécifié.</summary>
      <param name="expression">DbBinaryExpression à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Méthode pratique pour visiter le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> spécifié, s'il est non-Null.</summary>
      <param name="expression">Expression à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Méthode pratique pour le posttraitement après qu'un DbExpressionBinding a été visité.</summary>
      <param name="binding">DbExpressionBinding précédemment visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Méthode pratique pour visiter le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> spécifié.</summary>
      <param name="binding">DbExpressionBinding à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Méthode pratique pour visiter chaque <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> de la liste indiquée, si la liste est non-Null.</summary>
      <param name="expressionList">Liste d'expressions à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionList" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Méthode pratique indiquant que les clés de regroupement d'un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> ont été visitées et les agrégats vont être visités.</summary>
      <param name="binding">DbGroupExpressionBinding de DbGroupByExpression</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Méthode pratique pour le posttraitement après qu'un DbGroupExpressionBinding a été visité.</summary>
      <param name="binding">DbGroupExpressionBinding précédemment visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Méthode pratique pour visiter le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> spécifié.</summary>
      <param name="binding">DbGroupExpressionBinding à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Méthode pratique pour le posttraitement après qu'un DbLambda a été visité.</summary>
      <param name="lambda">DbLambda précédemment visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Méthode pratique indiquant que le corps d'un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> lambda va être visité.</summary>
      <param name="lambda">DbLambda qui va être visité</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> a la valeur null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>Méthode pratique pour visiter le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" /> spécifié.</summary>
      <param name="expression">DbUnaryExpression à visiter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> a la valeur null</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>Les agrégats sont des pseudo-expressions.Ils ont l'apparence des expressions, mais ils sont limités sévèrement quant à l'emplacement où ils peuvent apparaître (uniquement dans la clause d'agrégats d'une expression group-by).</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     Obtient la liste des expressions qui définissent les arguments de l'agrégat. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     Obtient le type de résultat de cet agrégat. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     Représente le And logique de deux arguments Boolean. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     Représente une opération d'application, qui est l'appel de l'objet de fonction (functor) spécifié pour chaque élément dans le jeu de données d'entrée spécifié. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     Obtient le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie l'objet de fonction appelé pour chaque élément du jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     Représente une opération arithmétique (addition, soustraction, multiplication, division, modulo ou négation) appliquée à deux arguments numériques. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     Obtient la liste des expressions qui définissent les arguments actuels. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     Type de base abstrait pour les expressions qui acceptent deux opérandes d'expression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     Obtient le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit l'argument de gauche. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     Obtient le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit l'argument de droite. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     Représente une opération logique Case When…Then…Else. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     Obtient la clause Else de cet objet DbCaseExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     Obtient les clauses Then de cet objet DbCaseExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     Obtient les clauses When de cet objet DbCaseExpression. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     Représente une opération de conversion appliquée à un argument polymorphe. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>Représente le type de base abstrait pour les types DbCommandTree Delete, Query, Insert et Update.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>Obtient le type de cette arborescence de commandes.</summary>
      <returns>Type de cette arborescence de commandes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>Obtient l'espace de données dans lequel les métadonnées utilisées par cette arborescence de commandes doivent résider.</summary>
      <returns>Espace de données dans lequel les métadonnées utilisées par cette arborescence de commandes doivent résider.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>Obtient l'espace de travail des métadonnées utilisé par cette arborescence de commandes.</summary>
      <returns>Espace de travail des métadonnées utilisé par cette arborescence de commandes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>Obtient le nom et le type correspondant de chaque paramètre qui peut être référencé dans cette arborescence de commandes.</summary>
      <returns>Nom et type correspondant de chaque paramètre qui peut être référencé dans cette arborescence de commandes.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />.</summary>
      <returns>Représentation sous forme de chaîne de l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
      <summary>Détermine si l'arborescence de commandes utilise les sémantiques Null pour la base de données.</summary>
      <returns>L'arborescence de commandes utilise les sémantiques Null pour la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>Décrit les différentes commandes de base de données. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>Spécifie la commande de suppression.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>Spécifie la commande de fonction.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>Spécifie la commande d'insertion.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>Spécifie la commande de requête.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>Spécifie la commande de mise à jour.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     Représente une opération de comparaison (égal à, supérieur à, supérieur ou égal à, inférieur à, inférieur ou égal à et inégal à) appliquée à deux arguments. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     Représente une valeur constante. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     Obtient une valeur constante. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     Représente une opération de jointure inconditionnelle entre les arguments de collection donnés. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui fournit les jeux de données d'entrée à la jointure. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>Représente une opération de suppression d'une seule ligne exprimée sous la forme d'une arborescence de commandes canonique.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree" />.</summary>
      <param name="metadata">Espace de travail des métadonnées.</param>
      <param name="dataSpace">Espace de données.</param>
      <param name="target">Liaison d'expressions de base de données.</param>
      <param name="predicate">Expression de base de données.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>Obtient le type de cette arborescence de commandes.</summary>
      <returns>Type de cette arborescence de commandes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le prédicat utilisé pour identifier dans la collection cible les membres à supprimer.</summary>
      <returns>Prédicat utilisé pour identifier dans la collection cible les membres à supprimer.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     Représente la récupération de l'entité indiquée à l'aide de la référence spécifiée. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     Représente la suppression des éléments en double de l'opérande défini spécifié. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>Représente la conversion de l'opérande défini spécifié en un singleton.Si le jeu est vide la conversion retourne la valeur Null, sinon la conversion retourne un des éléments du jeu.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     Représente la récupération d'une référence de l'entité spécifiée sous forme de référence. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     Représente l'opération de soustraction définie entre les opérandes de gauche et de droite. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Représente le type de base de toutes les expressions.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implémente la méthode d'interface de modèle de visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat.</summary>
      <param name="visitor">Instance de DbExpressionVisitor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implémente la méthode d'interface de modèle de visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique.</summary>
      <returns>Instance de <paramref name="TResultType" />.</returns>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType.</param>
      <typeparam name="TResultType">Type des résultats produits par <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'instance actuelle de DbExpression.</summary>
      <returns>true si l'objet spécifié est identique à l'instance actuelle de DbExpression ; sinon, false.</returns>
      <param name="obj">Objet à comparer au <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> actuel.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>Obtient le type de l'expression, qui indique l'opération de cette expression.</summary>
      <returns>Type de l'expression, qui indique l'opération de cette expression.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur binaire spécifiée, pouvant être Null</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur binaire spécifiée.</returns>
      <param name="value"> Valeur binaire sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur booléenne (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur booléenne spécifiée.</returns>
      <param name="value">Valeur booléenne sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur d'octet (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur d'octet spécifiée.</returns>
      <param name="value">Valeur d'octet sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur <see cref="T:System.DateTime" /> (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur DateTime spécifiée.</returns>
      <param name="value">Valeur DateTime sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur <see cref="T:System.DateTimeOffset" /> (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur DateTimeOffset spécifiée.</returns>
      <param name="value">Valeur DateTimeOffset sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur décimale (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur décimale spécifiée.</returns>
      <param name="value">Valeur décimale sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur double (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur double spécifiée.</returns>
      <param name="value">Valeur double sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> spécifiée, pouvant être Null.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur DbGeography spécifiée.</returns>
      <param name="value">Valeur DbGeography sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiée, pouvant être Null.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur DbGeometry spécifiée.</returns>
      <param name="value">Valeur DbGeometry sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur <see cref="T:System.Guid" /> (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur de GUID spécifiée.</returns>
      <param name="value">Valeur de GUID sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Int16 (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Int16 spécifiée.</returns>
      <param name="value">Valeur Int16 sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Int32 (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Int32 spécifiée.</returns>
      <param name="value">Valeur Int32 sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Int64 (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Int64 spécifiée.</returns>
      <param name="value">Valeur Int64 sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Single (nullable) spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur Single spécifiée.</returns>
      <param name="value">Valeur Single sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur de chaîne spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente la valeur de chaîne spécifiée.</returns>
      <param name="value">Valeur de chaîne sur laquelle l'expression retournée doit être basée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>Sert de fonction de hachage pour le type.</summary>
      <returns>Code de hachage de l'expression actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un tableau d'entiers non signés 8 bits en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente le tableau converti d'entiers non signés 8 bits.</returns>
      <param name="value">Tableau d'entiers non signés 8 bits.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet DbGeography en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the converted DbGeography object.</returns>
      <param name="value">Objet DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet DBGeometry en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> that represents the converted DbGeography object.</returns>
      <param name="value">Objet DbGeometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet booléen nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'objet booléen nullable converti.</returns>
      <param name="value">Objet booléen nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un entier non signé 8 bits nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'entier non signé 8 bits converti.</returns>
      <param name="value">Entier non signé 8 bits nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet nullable <see cref="T:System.DateTime" /> en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'objet <see cref="T:System.DateTime" />.</returns>
      <param name="value">Objet <see cref="T:System.DateTime" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet nullable <see cref="T:System.DateTimeOffset" /> en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'objet <see cref="T:System.DateTime" /> nullable.</returns>
      <param name="value">Objet <see cref="T:System.DateTime" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet décimal nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'objet décimal nullable.</returns>
      <param name="value">Objet décimal nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet double nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'objet double nullable.</returns>
      <param name="value">Objet double nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet GUID nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'objet <see cref="T:System.Guid" /> nullable.</returns>
      <param name="value">Objet <see cref="T:System.Guid" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un entier non signé 16 bits nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'entier non signé 16 bits nullable.</returns>
      <param name="value">Entier non signé 16 bits nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un entier non signé 32 bits nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'entier non signé 32 bits nullable.</returns>
      <param name="value">Entier non signé 32 bits nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un entier non signé 64 bits nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'entier non signé 64 bits nullable.</returns>
      <param name="value">Entier non signé 64 bits nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un nombre à virgule flottante simple précision nullable en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente un nombre à virgule flottante simple précision.</returns>
      <param name="value">Nombre à virgule flottante simple précision.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit une collection séquentielle de caractères Unicode <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente une collection séquentielle de caractères Unicode.</returns>
      <param name="value">Collection séquentielle de caractères Unicode .</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>Obtient les métadonnées de type pour le type de résultat de l'expression.</summary>
      <returns>Métadonnées de type pour le type de résultat de l'expression.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>Décrit la liaison d'une expression.Sur le plan conceptuel, semblable à une boucle foreach en C#.La propriété DbExpression définit la collection qui est itérée, alors que la propriété Var fournit un moyen de faire référence à l'élément actuel dans la collection au cours d'une itération.DbExpressionBinding sert à décrire les arguments définis pour des expressions relationnelles, telles que <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> et <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit le jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     Obtient <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> qui référence la variable d'élément. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     Obtient le nom assigné à la variable d'élément. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     Obtient les métadonnées de type de la variable d'élément. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     Décrit les différents types (classes) d'expressions. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     True pour toutes. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     ET logique </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     True pour n'importe laquelle </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     Instruction Case conditionnelle </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     Cast de type polymorphe. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     Valeur de constante. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     Cross Apply </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     Jointure croisée </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     Déréférence. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     Suppression des doublons. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     Division </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     Conversion en singleton. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     Récupération de valeur de référence d'entité. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     Égalité </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     Soustraction ensembliste </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     Restriction </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     Jointure externe entière </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     Appel d'une fonction autonome </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     Est supérieur à </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     Supérieur ou égal à </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     Regroupement </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     In. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     Jointure interne </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     Intersection définie </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     Détermination de jeu vide </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     Détermination NULL. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     Comparaison de type (type ou sous-type spécifié). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     Comparaison de type (type spécifié uniquement). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     Application d'une fonction lambda </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     Jointure externe gauche </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     Est inférieur à </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     Inférieur ou égal à </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     Comparaison de chaînes </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     Restriction relative au nombre de résultats (TOP n). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     Soustraction </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     Modulo </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     Multiplication </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     Instance, ligne et construction définie. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     NOT logique. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     Inégalité </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Null </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     Membres définis par type (ou sous-type). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     Membres définis par type exact. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     OR logique </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     Outer Apply. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     Référence à un paramètre. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     Addition </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     Projection </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     Récupération de propriété statique ou d'instance. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     Référence </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     Récupération de valeur de clé de référence. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     Navigation de relation (composition ou association). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     Analyse d'entité ou de relation définie. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     Éléments ignorés d'une collection ordonnée. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     Tri </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     Conversion de type </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     Négation </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     Union définie (avec doublons). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     Référence à une variable. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>Garantit que toutes les métadonnées de l'arborescence d'expressions indiquée sont issues de l'espace de travail des métadonnées spécifié, éventuellement en reliant et régénérant les expressions des métadonnées de remplacement si nécessaire.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" />.</summary>
      <param name="targetWorkspace">Espace de travail cible.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Implémente le modèle de visiteur pour la récupération d'une propriété d'instance.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">Expression</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Implémente le modèle de visiteur pour le jeu d'entités.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="entitySet">Jeu d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Implémente le modèle de visiteur pour la fonction.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="functionMetadata">Métadonnées de fonction.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Implémente le modèle de visiteur pour le type.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="type">Type.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Implémente le modèle visiteur pour l'utilisation de type.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="type">Type.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>Classe de base abstraite de modèle de visiteur d'expression qui doit être implémentée par les visiteurs qui ne retournent pas de valeur de résultat.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Méthode de modèle de visiteur pour DbAndExpression.</summary>
      <param name="expression">DbAndExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Méthode de modèle de visiteur pour DbApplyExpression.</summary>
      <param name="expression">DbApplyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Méthode de modèle de visiteur pour DbArithmeticExpression.</summary>
      <param name="expression">DbArithmeticExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Méthode de modèle de visiteur pour DbCaseExpression.</summary>
      <param name="expression">DbCaseExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Méthode de modèle de visiteur pour DbCastExpression.</summary>
      <param name="expression">DbCastExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Méthode de modèle de visiteur pour DbComparisonExpression.</summary>
      <param name="expression">DbComparisonExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Méthode de modèle de visiteur pour DbConstantExpression.</summary>
      <param name="expression">DbConstantExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Méthode de modèle de visiteur pour DbCrossJoinExpression.</summary>
      <param name="expression">DbCrossJoinExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Méthode de modèle de visiteur pour DbDerefExpression.</summary>
      <param name="expression">DbDerefExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Méthode de modèle de visiteur pour DbDistinctExpression.</summary>
      <param name="expression">DbDistinctExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Méthode de modèle de visiteur pour DbElementExpression.</summary>
      <param name="expression">DbElementExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Méthode de modèle de visiteur pour DbEntityRefExpression.</summary>
      <param name="expression">DbEntityRefExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Méthode de modèle de visiteur pour DbExceptExpression.</summary>
      <param name="expression">DbExceptExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Appelée lorsqu'une expression d'un type non reconnu est rencontrée.</summary>
      <param name="expression">Expression</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Méthode de modèle de visiteur pour DbFilterExpression.</summary>
      <param name="expression">DbFilterExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Méthode de modèle de visiteur pour DbFunctionExpression.</summary>
      <param name="expression">DbFunctionExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Méthode de modèle de visiteur pour DbGroupByExpression.</summary>
      <param name="expression">DbGroupByExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Méthode de modèle de visiteur pour DbInExpression.</summary>
      <param name="expression">DbInExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Méthode de modèle de visiteur pour DbIntersectExpression.</summary>
      <param name="expression">DbIntersectExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Méthode de modèle de visiteur pour DbIsEmptyExpression.</summary>
      <param name="expression">DbIsEmptyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Méthode de modèle de visiteur pour DbIsNullExpression.</summary>
      <param name="expression">DbIsNullExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Méthode de modèle de visiteur pour DbIsOfExpression.</summary>
      <param name="expression">DbIsOfExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Méthode de modèle de visiteur pour DbJoinExpression.</summary>
      <param name="expression">DbJoinExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Méthode de modèle de visiteur pour DbLambdaExpression.</summary>
      <param name="expression">DbLambdaExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Méthode de modèle de visiteur pour DbLikeExpression.</summary>
      <param name="expression">DbLikeExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Méthode de modèle de visiteur pour DbLimitExpression.</summary>
      <param name="expression">DbLimitExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Méthode de modèle de visiteur pour DbNewInstanceExpression.</summary>
      <param name="expression">DbNewInstanceExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Méthode de modèle de visiteur pour DbNotExpression.</summary>
      <param name="expression">DbNotExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Méthode de modèle de visiteur pour DbNullExpression.</summary>
      <param name="expression">DbNullExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Méthode de modèle de visiteur pour DbOfTypeExpression.</summary>
      <param name="expression">DbOfTypeExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Méthode de modèle de visiteur pour DbOrExpression.</summary>
      <param name="expression">DbOrExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Méthode de modèle de visiteur pour DbParameterReferenceExpression.</summary>
      <param name="expression">DbParameterReferenceExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Méthode de modèle de visiteur pour DbProjectExpression.</summary>
      <param name="expression">DbProjectExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Méthode de modèle de visiteur pour DbPropertyExpression.</summary>
      <param name="expression">DbPropertyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Méthode de modèle de visiteur pour DbQuantifierExpression.</summary>
      <param name="expression">DbQuantifierExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Méthode de modèle de visiteur pour DbRefExpression.</summary>
      <param name="expression">DbRefExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Méthode de modèle de visiteur pour DbRefKeyExpression.</summary>
      <param name="expression">DbRefKeyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Méthode de modèle de visiteur pour DbRelationshipNavigationExpression.</summary>
      <param name="expression">DbRelationshipNavigationExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Méthode de modèle de visiteur pour DbScanExpression.</summary>
      <param name="expression">DbScanExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Méthode de modèle de visiteur pour DbSkipExpression.</summary>
      <param name="expression">DbSkipExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Méthode de modèle de visiteur pour DbSortExpression.</summary>
      <param name="expression">DbSortExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Méthode de modèle de visiteur pour DbTreatExpression.</summary>
      <param name="expression">DbTreatExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Méthode de modèle de visiteur pour DbUnionAllExpression.</summary>
      <param name="expression">DbUnionAllExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Méthode de modèle de visiteur pour DbVariableReferenceExpression.</summary>
      <param name="expression">DbVariableReferenceExpression visité.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     Classe de base abstraite de modèle de visiteur d'expression qui doit être implémentée par les visiteurs qui ne retournent pas de valeur de résultat du type spécifié. </summary>
      <typeparam name="TResultType"> Type de valeur de résultat produit par le visitor. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbAndExpression. </summary>
      <param name="expression"> DbAndExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbApplyExpression. </summary>
      <param name="expression"> DbApplyExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbArithmeticExpression. </summary>
      <param name="expression"> DbArithmeticExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbCaseExpression. </summary>
      <param name="expression"> DbCaseExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbCastExpression. </summary>
      <param name="expression"> DbCastExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbComparisonExpression. </summary>
      <param name="expression"> DbComparisonExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbConstantExpression. </summary>
      <param name="expression"> DbConstantExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbCrossJoinExpression. </summary>
      <param name="expression"> DbCrossJoinExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     Méthode de modèle de visiteur pour DbDerefExpression. </summary>
      <param name="expression"> DbDerefExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbDistinctExpression. </summary>
      <param name="expression"> DbDistinctExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbElementExpression. </summary>
      <param name="expression"> DbElementExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     Méthode de modèle de visiteur pour DbEntityRefExpression. </summary>
      <param name="expression"> DbEntityRefExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbExceptExpression. </summary>
      <param name="expression"> DbExceptExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     Appelée lorsqu'une expression d'un type non reconnu est rencontrée. </summary>
      <param name="expression"> Expression </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbFilterExpression. </summary>
      <param name="expression"> DbFilterExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     Méthode de modèle de visiteur pour DbFunctionExpression. </summary>
      <param name="expression"> DbFunctionExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbGroupByExpression. </summary>
      <param name="expression"> DbGroupByExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbInExpression. </summary>
      <param name="expression"> DbInExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbIntersectExpression. </summary>
      <param name="expression"> DbIntersectExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbIsEmptyExpression. </summary>
      <param name="expression"> DbIsEmptyExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbIsNullExpression. </summary>
      <param name="expression"> DbIsNullExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbIsOfExpression. </summary>
      <param name="expression"> DbIsOfExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbJoinExpression. </summary>
      <param name="expression"> DbJoinExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     Méthode de modèle de visiteur pour DbLambdaExpression. </summary>
      <param name="expression"> DbLambdaExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     Méthode de modèle de visiteur pour DbLikeExpression. </summary>
      <param name="expression"> DbLikeExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     Méthode de modèle de visiteur pour DbLimitExpression. </summary>
      <param name="expression"> DbLimitExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbNewInstanceExpression. </summary>
      <param name="expression"> DbNewInstanceExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbNotExpression. </summary>
      <param name="expression"> DbNotExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbNullExpression. </summary>
      <param name="expression"> DbNullExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbOfTypeExpression. </summary>
      <param name="expression"> DbOfTypeExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbOrExpression. </summary>
      <param name="expression"> DbOrExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbParameterReferenceExpression. </summary>
      <param name="expression"> DbParameterReferenceExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbProjectExpression. </summary>
      <param name="expression"> DbProjectExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbPropertyExpression. </summary>
      <param name="expression"> DbPropertyExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbQuantifierExpression. </summary>
      <param name="expression"> DbQuantifierExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbRefExpression. </summary>
      <param name="expression"> DbRefExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     Méthode de modèle de visiteur pour DbRefKeyExpression. </summary>
      <param name="expression"> DbRefKeyExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbRelationshipNavigationExpression. </summary>
      <param name="expression"> DbRelationshipNavigationExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbScanExpression. </summary>
      <param name="expression"> DbScanExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbSkipExpression. </summary>
      <param name="expression"> DbSkipExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbSortExpression. </summary>
      <param name="expression"> DbSortExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbTreatExpression. </summary>
      <param name="expression"> DbTreatExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbUnionAllExpression. </summary>
      <param name="expression"> DbUnionAllExpression visité. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     Méthode de modèle de visiteur typée pour DbVariableReferenceExpression. </summary>
      <param name="expression"> DbVariableReferenceExpression visité. </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     Représente un prédicat appliqué à un jeu de données d'entrée qui génère l'ensemble d'éléments qui répondent au prédicat. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     Obtient <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le prédicat utilisé pour filtrer le jeu de données d'entrée. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     Type d'agrégat qui correspond à l'appel d'une fonction d'agrégation. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     Obtient une valeur indiquant si la fonction d'agrégation s'applique de façon distincte </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     Obtient les métadonnées de méthode qui spécifient la fonction d'agrégation à appeler. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>Représente un appel de fonction exprimé sous la forme d'une arborescence de commandes canonique.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>Construit un nouveau DbFunctionCommandTree qui utilise l'espace de travail des métadonnées, l'espace de données et les métadonnées de fonction spécifiés.</summary>
      <param name="metadata">Espace de travail des métadonnées que l'arborescence de commandes doit utiliser. </param>
      <param name="dataSpace">Espace logique auquel doivent appartenir les métadonnées utilisées dans les expressions de cette arborescence de commandes.</param>
      <param name="edmFunction">Fonction EDM à appeler.</param>
      <param name="resultType">Type de résultat de la fonction.</param>
      <param name="parameters">Paramètres associés à la fonction à appeler.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>Obtient ou définit le type de l'arborescence de commandes.</summary>
      <returns>Type d'arborescence de commandes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>Obtient la <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" /> qui représente la fonction à appeler.</summary>
      <returns>
        <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" /> qui représente la fonction à appeler.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>Obtient le type de résultat de la fonction ; actuellement contraint à une collection de RowTypes.Contrairement à l'instance RowType standard, indique simplement le nom/type et pas l'ordre des paramètres.</summary>
      <returns>Type de résultat de la fonction.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     Représente un appel à une fonction. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit les arguments de la fonction. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     Obtient les métadonnées pour la fonction à appeler. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>Représente une collection des éléments qui composent un groupe.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     Représente une opération de regroupement consistant en un regroupement des éléments du jeu de données d'entrée en fonction des expressions clés spécifiées, suivi de l'application des agrégats spécifiés. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> qui fournit les agrégats à appliquer. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> qui spécifie le jeu de données d'entrée et fournit l'accès aux variables d'élément de jeu de données et d'élément de groupe. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit des clés de regroupement. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>Définit la liaison pour le jeu de données d'entrée à un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.Outre les propriétés de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, DbGroupExpressionBinding donne également accès à l'élément de groupe via la référence de variable &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt; et à l'agrégat de groupe via la propriété &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt;.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit le jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     Obtient DbGroupAggregate qui représente la collection des éléments du groupe. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     Obtient DbVariableReferenceExpression qui référence la variable d'élément de groupe. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     Obtient le nom assigné à la variable d'élément de groupe. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     Obtient les métadonnées de type de la variable d'élément de groupe. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     Obtient DbVariableReferenceExpression qui référence la variable d'élément. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     Obtient le nom assigné à la variable d'élément. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     Obtient les métadonnées de type de la variable d'élément. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     Représente une expression booléenne qui teste si un élément spécifié correspond à un élément dans une liste. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     Obtient un DbExpression qui spécifie l'élément à mettre en correspondance. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     Obtient la liste de DbExpression à tester pour trouver une correspondance. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>Représente une opération d'insertion d'une seule ligne exprimée sous la forme d'une arborescence de commandes canonique.Lorsque la propriété <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" /> est définie, la commande retourne un lecteur ; sinon, elle retourne une valeur scalaire indiquant le nombre de lignes affectées.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree" />.</summary>
      <param name="metadata">Métadonnées.</param>
      <param name="dataSpace">Espace de données.</param>
      <param name="target">Cible de la base de données.</param>
      <param name="setClauses">Clauses SET déterminant les valeurs des colonnes dans la ligne insérée.</param>
      <param name="returning">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie une projection des résultats à retourner, sur la base des lignes modifiées.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>Obtient le type d'arborescence de commandes.</summary>
      <returns>Type d'arborescence de commandes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie une projection des résultats à retourner, sur la base des lignes modifiées.Null indique qu'aucun résultat ne doit être retourné à partir de cette commande.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie une projection des résultats à retourner, sur la base des lignes modifiées.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>Obtient les clauses SET déterminant les valeurs des colonnes dans la ligne insérée.</summary>
      <returns>Clauses SET déterminant les valeurs des colonnes dans la ligne insérée.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     Représente l'opération d'intersection définie entre les opérandes de gauche et de droite. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     Représente une détermination de jeu vide appliquée à un argument défini unique. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     Représente la détermination nulle appliquée à un argument unique. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     Représente la comparaison de type d'un argument unique au type spécifié. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     Obtient les métadonnées de type auxquelles les métadonnées de type de l'argument doivent être comparées. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     Représente une opération de jointure interne, externe gauche ou externe entière entre les arguments de collection donnés sur la condition de jointure spécifiée. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     Obtient <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la condition de jointure à appliquer. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui fournit l'entrée de gauche. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui fournit l'entrée de droite. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     Représente l'application d'une fonction lambda. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit les arguments auxquels la fonction lambda doit être appliquée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     Obtient le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> qui représente la fonction lambda appliquée par cette expression. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     Représente une comparaison de chaîne par rapport au modèle spécifié avec une chaîne d'échappement facultative. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     Obtient l'expression qui spécifie la chaîne à comparer au modèle donné. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     Obtient l'expression qui fournit une chaîne d'échappement facultative à utiliser pour la comparaison. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     Obtient l'expression qui spécifie le modèle auquel la chaîne donnée doit être comparée. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     Représente la restriction à la valeur limite spécifiée du nombre d'éléments de la collection d'arguments. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     Obtient l'expression qui spécifie la collection d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     Obtient l'expression qui spécifie la limite du nombre d'éléments de la collection d'entrée à retourner. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     Détermine si l'opération de limite inclut les résultats liés, ce qui peut produire plus de résultats que ne le spécifie la valeur limite. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>Spécifie une clause unique dans une opération de modification de type insertion ou mise à jour, voir <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> et <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" /></summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     Représente une opération DML exprimée sous la forme d'une arborescence de commandes canonique. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie la table cible de l'opération DML. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     Représente la construction d'une nouvelle instance d'un type donné, y compris les types set et types d'enregistrement. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit les valeurs propriété/colonne ou les éléments set de la nouvelle instance. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     Représente le Not logique d'un argument Boolean unique. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     Représente une valeur Null. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     Représente la récupération d'éléments du type spécifié à partir de l'argument défini donné. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     Obtient les métadonnées du type des éléments qui doivent être récupérés à partir de l'argument défini donné. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     Représente le Or logique de deux arguments Boolean. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     Représente une référence à un paramètre déclaré dans l'arborescence de commandes qui contient cette expression. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     Obtient le nom du paramètre référencé. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     Représente la projection d'un jeu de valeurs sur le jeu d'entrée spécifié. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     Obtient <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la projection. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>Fournit des méthodes et propriétés pour la récupération d'une propriété d'instance.Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implémente le modèle visiteur pour les expressions qui ne produisent pas de valeur de résultat.</summary>
      <param name="visitor">Instance de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">visitor a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implémente le modèle visiteur pour les expressions qui produisent une valeur de résultat d'un type spécifique.</summary>
      <returns>Valeur de résultat d'un type spécifique produite par <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Instance d'un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> typé qui produit une valeur de résultat d'un type spécifique.</param>
      <typeparam name="TResultType">Type des résultats produits par le visiteur.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>Obtient un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit l'instance à partir de laquelle la propriété doit être récupérée.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit l'instance à partir de laquelle la propriété doit être récupérée.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>Permet une conversion implicite en <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</summary>
      <returns>Valeur convertie.</returns>
      <param name="value">Expression à convertir.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>Obtient les métadonnées de propriété de la propriété à récupérer.</summary>
      <returns>Métadonnées de propriété de la propriété à récupérer.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>Crée une nouvelle paire clé/valeur basée sur cette expression de propriété.</summary>
      <returns>Nouvelle paire clé/valeur avec la clé et la valeur dérivée du <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     Représente une opération de quantification du type indiqué (Any, All) sur les éléments du jeu de données d'entrée spécifié. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     Obtient le prédicat Boolean qui doit être évalué pour chaque élément du jeu de données d'entrée. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>Représente une opération de requête exprimée sous la forme d'une arborescence de commandes canonique.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> qui utilise l'espace de travail des métadonnées spécifié.</summary>
      <param name="metadata">Espace de travail des métadonnées que l'arborescence de commandes doit utiliser.</param>
      <param name="dataSpace">Espace logique auquel doivent appartenir les métadonnées utilisées dans les expressions de cette arborescence de commandes.</param>
      <param name="query">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la logique de la requête.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> ou <paramref name="query" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> ne représente pas un espace de données valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> qui utilise l'espace de travail des métadonnées spécifié.</summary>
      <param name="metadata">Espace de travail des métadonnées que l'arborescence de commandes doit utiliser.</param>
      <param name="dataSpace">Espace logique auquel doivent appartenir les métadonnées utilisées dans les expressions de cette arborescence de commandes. </param>
      <param name="query">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la logique de la requête. </param>
      <param name="validate">true pour valider l'arborescence ; sinon, false.Lorsqu'elle a la valeur false, la validation de l'arborescence est désactivée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> ou <paramref name="query" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> ne représente pas un espace de données valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />.</summary>
      <param name="metadata">Espace de travail des métadonnées que l'arborescence de commandes doit utiliser.</param>
      <param name="dataSpace">Espace logique auquel doivent appartenir les métadonnées utilisées dans les expressions de cette arborescence de commandes.</param>
      <param name="query">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la logique de la requête.</param>
      <param name="validate">true pour valider l'arborescence ; sinon, false.Lorsqu'elle a la valeur false, la validation de l'arborescence est désactivée.</param>
      <param name="useDatabaseNullSemantics">true pour utiliser les sémantiques Null de base de données ; sinon, false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>Obtient le type de cette arborescence de commandes.</summary>
      <returns>Type de cette arborescence de commandes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>Obtient un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la logique de la requête.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la logique de la requête.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     Représente une référence (fortement typée) à une instance spécifique au sein d'un jeu d'entités donné. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     Obtient les métadonnées du jeu d'entités qui contient l'instance. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     Représente la récupération de la valeur de clé de la référence spécifiée sous forme de ligne. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     Représente la navigation d'une relation (de composition ou d'association) donnée du rôle source au rôle cible et une instance du rôle source </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     Obtient les métadonnées de la terminaison de la relation à partir de laquelle effectuer l'exploration. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     Obtient les métadonnées de la terminaison de la relation vers laquelle effectuer l'exploration. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     Obtient le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'instance de la terminaison de relation source à partir de laquelle l'exploration doit intervenir. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     Obtient les métadonnées de la relation sur laquelle s'effectue l'exploration. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     Représente une analyse de tous les éléments d'un jeu d'entités donné. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     Obtient les métadonnées du jeu d'entités ou de l'ensemble de relations référencé. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     Spécifie une clause, dans une opération de modification, qui définit la valeur d'une propriété. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     Obtient un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie la propriété à mettre à jour. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     Obtient un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie la nouvelle valeur avec laquelle mettre à jour la propriété. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     Représente une opération visant à ignorer le nombre spécifié d'éléments du jeu de données d'entrée après application de l'ordre indiqué dans les clés de tri données. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     Obtient l'expression qui spécifie le nombre d'éléments de la collection d'entrée à ignorer. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> qui définit l'ordre de tri. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     Spécifie une clé de tri qui peut être utilisée pour définir l'ordre de tri dans un DbSortExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     Obtient une valeur Boolean indiquant si cette clé de tri utilise ou non un ordre de tri croissant. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     Obtient une valeur de chaîne qui spécifie le classement de cette clé de tri. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     Obtient <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit la valeur de cette clé de tri. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     Représente une opération de tri appliquée aux éléments du jeu de données d'entrée spécifié et basée sur les clés de tri données. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     Obtient l'objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     Obtient une liste <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> qui définit l'ordre de tri. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     Représente la conversion de type d'un argument unique au type spécifié. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     Type de base abstrait pour les expressions qui acceptent un seul opérande d'expression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     Obtient le <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit l'argument. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     Représente l'opération d'union (sans suppression des doublons) définie entre les opérandes de gauche et de droite. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>Représente une opération de mise à jour d'une seule ligne exprimée sous la forme d'une arborescence de commandes.Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" />.</summary>
      <param name="metadata">Modèle sur lequel fonctionne cette commande.</param>
      <param name="dataSpace">Espace de données.</param>
      <param name="target">Table cible de l'opération de langage de manipulation de données (DML).</param>
      <param name="predicate">Prédicat utilisé pour identifier dans la collection cible les membres à mettre à jour.</param>
      <param name="setClauses">Liste des clauses set de mise à jour qui définissent l'opération de mise à jour.</param>
      <param name="returning">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie une projection des résultats à retourner, sur la base des lignes modifiées.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>Obtient le type de cette arborescence de commandes.</summary>
      <returns>Type de cette arborescence de commandes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>Obtient un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le prédicat utilisé pour identifier dans la collection cible les membres à mettre à jour.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le prédicat utilisé pour identifier dans la collection cible les membres à mettre à jour.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie une projection des résultats à retourner, sur la base des lignes modifiées.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie une projection des résultats à retourner, sur la base des lignes modifiées.Une valeur Null indique qu'aucun résultat ne doit être retourné à partir de cette commande.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>Obtient la liste des clauses set de mise à jour qui définissent l'opération de mise à jour.</summary>
      <returns>Liste des clauses set de mise à jour qui définissent l'opération de mise à jour.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     Représente une référence à une variable actuellement dans la portée. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui ne produisent pas une valeur de résultat. </summary>
      <param name="visitor"> Instance de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Méthode de modèle visiteur pour les visiteurs d'expressions qui produisent une valeur de résultat d'un type spécifique. </summary>
      <param name="visitor"> Instance d'un objet DbExpressionVisitor typé qui produit une valeur de résultat de type TResultType. </param>
      <typeparam name="TResultType">     Type des résultats produits par le visitor.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     Obtient le nom de la variable référencée. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>Visite chaque élément d'une arborescence d'expression à partir d'une expression racine donnée.Si un élément change, l'arborescence est régénérée à la racine et la nouvelle expression racine est retournée, dans le cas contraire l'expression racine d'origine est retournée.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Représente un événement lors de la saisie de la portée pour le visiteur d'expression avec les variables de portée spécifiées.</summary>
      <param name="scopeVariables">Collection de variables de portée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>Quitte la portée pour le visiteur d'expression.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Remplace une expression ancienne par une nouvelle pour le visiteur d'expression.</summary>
      <param name="oldExpression">Expression ancienne.</param>
      <param name="newExpression">Nouvelle expression.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Représente un événement lors d'une nouvelle liaison de la variable pour le visiteur d'expression.</summary>
      <param name="fromVarRef">Emplacement de la variable.</param>
      <param name="toVarRef">Référence de la variable lors de la création d'une nouvelle liaison.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Implémente le modèle de visiteur pour l'expression logique AND.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbAndExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Implémente le modèle de visiteur pour l'appel de la fonction spécifiée pour chaque élément dans le jeu de données d'entrée spécifié.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbApplyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Implémente le modèle de visiteur pour l'opération arithmétique appliquée aux arguments numériques.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbArithmeticExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Implémente le modèle de visiteur pour les clauses When, Then et Else.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbCaseExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Implémente le modèle de visiteur pour la conversion de type d'un argument unique au type spécifié.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbCastExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Implémente le modèle de visiteur pour l'opération de comparaison appliquée à deux arguments.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbComparisonExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Implémente le modèle de visiteur pour les différentes sortes de constantes.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbConstantExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Implémente le modèle de visiteur pour l'opération de jointure inconditionnelle entre les arguments de collection donnés.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbCrossJoinExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Implémente le modèle de visiteur pour l'expression qui récupère une entité en fonction de la référence spécifiée.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbDerefExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Implémente le modèle de visiteur pour les éléments dupliqués supprimés de l'argument défini spécifié.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbDistinctExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Implémente le modèle de visiteur pour la conversion de l'argument défini spécifié en un singleton.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbElementExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Implémente le modèle de visiteur pour l'expression qui extrait une référence de l'instance d'entité sous-jacente.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbEntityRefExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Implémente le modèle de visiteur pour l'opération de soustraction définie entre les opérandes de gauche et de droite.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbExceptExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Implémente le modèle de visiteur pour la fonctionnalité de base requise par les types d'expression.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Implémente le modèle de visiteur pour un prédicat appliqué pour filtrer un jeu de données d'entrée.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbFilterExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Implémente le modèle de visiteur pour un appel à une fonction.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbFunctionExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Implémente le modèle de visiteur pour une opération de regroupement.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbGroupByExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Implémente le modèle de visiteur pour DbInExpression.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbInExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Implémente le modèle de visiteur pour l'opération d'intersection définie entre les opérandes de gauche et de droite.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbIntersectExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Implémente le modèle de visiteur pour une détermination de jeu vide appliquée à un argument défini unique.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbIsEmptyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Implémente le modèle de visiteur pour la détermination nulle appliquée à un argument unique.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbIsNullExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Implémente le modèle de visiteur pour la comparaison de type d'un argument unique au type spécifié.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbIsOfExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Implémente le modèle de visiteur pour une opération de jointure interne, externe gauche ou externe entière entre les arguments de collection donnés sur la condition de jointure spécifiée.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbJoinExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Implémente le modèle de visiteur pour l'application d'une fonction lambda aux arguments représentés par les objets DbExpression.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbLambdaExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Implémente le modèle de visiteur pour une comparaison de chaîne par rapport au modèle spécifié avec une chaîne d'échappement facultative.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbLikeExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Implémente le modèle de visiteur pour la restriction à la valeur limite spécifiée du nombre d'éléments de la collection d'arguments.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbLimitExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Implémente le modèle de visiteur pour la construction d'une nouvelle instance d'un type donné, y compris les types set et types d'enregistrement.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbNewInstanceExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Implémente le modèle de visiteur pour le Not logique d'un argument booléen unique.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbNotExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Implémente le modèle de visiteur pour une référence à un littéral null typé.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbNullExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Implémente le modèle de visiteur pour la récupération d'éléments du type spécifié à partir de l'argument défini donné.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbOfTypeExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Implémente le modèle de visiteur pour le Or logique de deux arguments booléens.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbOrExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Implémente le modèle de visiteur pour un paramètre déclaré dans l'arborescence de commandes qui contient cette expression.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbParameterReferenceExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Implémente le modèle de visiteur pour la projection d'un jeu de données d'entrée indiqué sur l'expression spécifiée.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbProjectExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Implémente le modèle de visiteur pour la récupération d'une propriété d'instance.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbPropertyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Implémente le modèle de visiteur pour une opération de quantification du type indiqué sur les éléments du jeu de données d'entrée spécifié.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbQuantifierExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Implémente le modèle de visiteur pour une référence fortement typée à une instance spécifique au sein d'un jeu d'entités.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbRefExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Implémente le modèle de visiteur pour la récupération de la valeur de clé à partir de la valeur de référence sous-jacente.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbRefKeyExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Implémente le modèle de visiteur pour la navigation au sein d'une relation.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbRelationshipNavigationExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Implémente le modèle de visiteur pour une analyse effectuée sur un jeu d'entités ou un ensemble de relations conformément aux indications fournies par la propriété cible.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbScanExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Implémente le modèle de visiteur pour l'expression SKIP.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbSkipExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Implémente le modèle de visiteur pour une clé de tri qui peut être utilisée pour définir l'ordre de tri.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbSortExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Implémente le modèle de visiteur pour une opération de conversion de type appliquée à un argument polymorphe.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbTreatExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Implémente le modèle de visiteur pour l'opération d'union définie entre les opérandes de gauche et de droite.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbUnionAllExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Implémente le modèle de visiteur pour une référence à une variable actuellement dans la portée.</summary>
      <returns>Visiteur implémenté.</returns>
      <param name="expression">DbVariableReferenceExpression visité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Implémente le modèle de visiteur pour l'agrégat.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="aggregate">Agrégat à visiter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Implémente le modèle de visiteur pour le jeu d'entités.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="entitySet">Jeu d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Implémente le modèle de visiteur pour l'expression.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="expression">Expression</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Implémente le modèle de visiteur pour la liaison d'expressions.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="binding">Liaison d'expressions.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Implémente le modèle de visiteur pour la liste de liaisons d'expressions.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="list">Liste de liaisons d'expressions.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Implémente le modèle de visiteur pour la liste d'expressions.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="list">Liste d'expressions.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Implémente le modèle de visiteur pour la fonction.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="functionMetadata">Métadonnées de fonction.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>Implémente le modèle de visiteur pour la fonction d'agrégation.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="aggregate">Agrégat.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>Implémente le modèle de visiteur pour l'agrégat de groupe.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="aggregate">Agrégat.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Implémente le modèle de visiteur pour la liaison d'expressions de groupe.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="binding">Liaison.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Implémente le modèle de visiteur pour la fonction lambda.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="lambda">Fonction lambda.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>Implémente le modèle de visiteur pour la clause Sort.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="clause">Clause Sort.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Implémente le modèle de visiteur pour l'ordre de tri.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="sortOrder">Ordre de tri.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Implémente le modèle de visiteur pour le type.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="type">Type.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Implémente le modèle visiteur pour l'utilisation de type.</summary>
      <returns>Modèle de visiteur implémenté.</returns>
      <param name="type">Type.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>Fournit une API permettant de construire des objets <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> et rend cette API accessible en tant que méthodes d'extension sur le type lui-même.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.</summary>
      <returns>Nouvelle fonction d'agrégation avec une référence à la fonction et à l'argument spécifiés.La propriété Distinct de la fonction d'agrégation aura la valeur false.</returns>
      <param name="function">Fonction qui définit l'opération d'agrégation.</param>
      <param name="argument">Argument sur lequel la fonction d'agrégation doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> ou <paramref name="argument" /> est null.</exception>
      <exception cref="T:System.ArgumentException">La <paramref name="function" /> n'est pas une fonction d'agrégation ou a plusieurs arguments, ou le type de résultat de <paramref name="argument" /> n'est pas égal ou apte à être promu en type de paramètre <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> qui est appliqué de façon distincte.</summary>
      <returns>Nouvelle fonction d'agrégation avec une référence à la fonction et à l'argument spécifiés.La propriété Distinct de la fonction d'agrégation aura la valeur true.</returns>
      <param name="function">Fonction qui définit l'opération d'agrégation.</param>
      <param name="argument">Argument sur lequel la fonction d'agrégation doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> ou <paramref name="argument" /> est null.</exception>
      <exception cref="T:System.ArgumentException">La <paramref name="function" /> n'est pas une fonction d'agrégation ou a plusieurs arguments, ou le type de résultat de <paramref name="argument" /> n'est pas égal ou apte à être promu en type de paramètre <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> qui détermine si le prédicat donné s'applique à tous les éléments du jeu de données d'entrée.</summary>
      <returns>Nouveau DbQuantifierExpression qui représente l'opération All.</returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="predicate">Méthode représentant un prédicat à évaluer pour chaque membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat booléen qui fournit la logique de prédicat.</param>
      <exception cref="T:System.ArgumentNullException">La <paramref name="source" /> ou <paramref name="predicate" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="predicate" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">La <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="predicate" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> qui détermine si le prédicat donné s'applique à tous les éléments du jeu de données d'entrée.</summary>
      <returns>Nouveau DbQuantifierExpression qui représente l'opération All.</returns>
      <param name="input">Liaison d'expression qui spécifie le jeu de données d'entrée.</param>
      <param name="predicate">Expression représentant un prédicat à évaluer pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">La <paramref name="source" /> ou <paramref name="predicate" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="predicate" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> qui effectue l'opération And logique sur les arguments de droite et de gauche.</summary>
      <returns>Nouveau DbAndExpression en fonction des arguments spécifiés.</returns>
      <param name="left">Expression booléenne qui spécifie l'argument de gauche.</param>
      <param name="right">Expression booléenne qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> ou <paramref name="right" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui détermine si l'argument de jeu spécifié n'est pas vide.</summary>
      <returns>Nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> appliqué à un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> en fonction de l'argument spécifié.</returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> qui détermine si le prédicat donné s'applique à tout élément du jeu de données d'entrée.</summary>
      <returns> Nouveau DbQuantifierExpression qui représente l'opération Any. </returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="predicate">Méthode représentant le prédicat à évaluer pour chaque membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat booléen qui fournit la logique de prédicat.</param>
      <exception cref="T:System.ArgumentNullException">La <paramref name="source" /> ou <paramref name="predicate" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="predicate" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">La <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="predicate" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> qui détermine si le prédicat donné s'applique à tout élément du jeu de données d'entrée.</summary>
      <returns>Nouveau DbQuantifierExpression qui représente l'opération Any.</returns>
      <param name="input">Liaison d'expression qui spécifie le jeu de données d'entrée.</param>
      <param name="predicate">Expression représentant un prédicat à évaluer pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">La <paramref name="input" /> ou <paramref name="predicate" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">Le <paramref name="predicate" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>Retourne les arguments spécifiés comme objet paire clé/valeur.</summary>
      <returns>Objet paire de clé/valeur.</returns>
      <param name="value">Valeur dans la paire clé/valeur.</param>
      <param name="alias">Clé dans la paire clé/valeur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Retourne les arguments spécifiés comme objet paire clé/valeur.</summary>
      <returns>Objet paire de clé/valeur.</returns>
      <param name="value">Valeur dans la paire clé/valeur.</param>
      <param name="alias">Clé dans la paire clé/valeur.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui utilise un nom de variable généré pour lier l'expression donnée.</summary>
      <returns>Nouvelle liaison d'expression avec l'expression spécifiée et un nom de variable généré.</returns>
      <param name="input">Expression à lier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> n'a pas un type de résultat collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui utilise le nom de variable spécifié pour lier l'expression donnée.</summary>
      <returns>Nouvelle liaison d'expression avec l'expression et le nom de variable spécifiés.</returns>
      <param name="input">Expression à lier.</param>
      <param name="varName">Nom de variable qui doit être utilisé pour la liaison.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="varName" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> n'a pas un type de résultat collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Nouveau DbCaseExpression avec les expressions Case et le résultat par défaut spécifiés.</returns>
      <param name="whenExpressions">Liste des expressions qui fournissent l'instruction conditionnelle pour chaque expression Case.</param>
      <param name="thenExpressions">Liste des expressions qui fournissent le résultat de chaque expression Case.</param>
      <param name="elseExpression">Expression qui définit le résultat si aucune expression Case n'est mise en correspondance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> or <paramref name="thenExpressions" /> est Null ou contient Null ou <paramref name="elseExpression" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> ou <paramref name="thenExpressions" /> est vide ou <paramref name="whenExpressions" /> contient une expression avec un type de résultat non booléen, ou aucun type de résultat commun n'existe pour toutes les expressions dans <paramref name="thenExpressions" /> et <paramref name="elseExpression" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée une expression <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> qui applique une opération de cast à un argument polymorphe.</summary>
      <returns>Nouveau DbCastExpression en fonction de l'argument et du type spécifiés.</returns>
      <param name="argument">Argument auquel l'opération de cast doit être appliquée.</param>
      <param name="toType">Métadonnée de type qui spécifie le type en lequel le cast doit être effectué.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="toType" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Le cast spécifié n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> du type primitif spécifié avec la valeur de constante indiquée.</summary>
      <returns>Nouveau DbConstantExpression avec la valeur de constante indiquée et le type de résultat <paramref name="constantType" />.</returns>
      <param name="constantType">Type de la valeur de constante.</param>
      <param name="value">Valeur de constante à représenter.</param>
      <exception cref="T:System.ArgumentNullException">valeurconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> n'est pas une instance d'un type de constante valide, <paramref name="constantType" /> ne représente pas de type primitif, <paramref name="value" /> est d'un type primitif différent de celui représenté par <paramref name="constantType" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> avec la valeur de constante indiquée.</summary>
      <returns>Nouveau DbConstantExpression avec la valeur donnée.</returns>
      <param name="value">Valeur de constante à représenter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> n'est pas une instance d'un type de constante valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> qui encode une référence dans une entité spécifique en fonction des valeurs de clés.</summary>
      <returns>Nouveau DbRefExpression qui référence l'élément en fonction des valeurs de clés spécifiées dans le jeu d'entités indiqué.</returns>
      <param name="entitySet">Jeu d'entités qui contient l'élément référencé.</param>
      <param name="keyValues">Collection d'objets <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit les valeurs de clés.Ces expressions doivent correspondre (en nombre, type et ordre) aux propriétés de clé du type d'entité référencé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> est Null ou <paramref name="keyValues" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="keyValues" /> ne correspond pas au nombre de membres clés déclarés par le type d'élément de <paramref name="entitySet" /> ou <paramref name="keyValues" /> contient une expression avec un type de résultat qui n'est pas compatible avec le type du membre clé correspondant.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> qui encode une référence dans une entité spécifique en fonction des valeurs de clés.</summary>
      <returns>Nouveau DbRefExpression qui référence l'élément en fonction des valeurs de clés spécifiées dans le jeu d'entités indiqué.</returns>
      <param name="entitySet">Jeu d'entités qui contient l'élément référencé.</param>
      <param name="keyValues">Collection d'objets <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit les valeurs de clés.Ces expressions doivent correspondre (en nombre, type et ordre) aux propriétés de clé du type d'entité référencé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> est Null ou <paramref name="keyValues" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="keyValues" /> ne correspond pas au nombre de membres clés déclarés par le type d'élément de <paramref name="entitySet" /> ou <paramref name="keyValues" /> contient une expression avec un type de résultat qui n'est pas compatible avec le type du membre clé correspondant.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> qui encode une référence dans une entité spécifique d'un type donné en fonction des valeurs de clés.</summary>
      <returns>Nouveau DbRefExpression qui référence l'élément en fonction des valeurs de clés spécifiées dans le jeu d'entités indiqué.</returns>
      <param name="entitySet">Jeu d'entités qui contient l'élément référencé.</param>
      <param name="entityType">Type spécifique de l'entité référencée.Il doit s'agir d'un type d'entité appartenant à la même hiérarchie que le type d'élément du jeu d'entités.</param>
      <param name="keyValues">Collection d'objets <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit les valeurs de clés.Ces expressions doivent correspondre (en nombre, type et ordre) aux propriétés de clé du type d'entité référencé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> or <paramref name="entityType" /> est Null ou <paramref name="keyValues" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> n'est pas de la même hiérarchie (sous-type, supertype ou même type) que le type d'élément de <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="keyValues" /> ne correspond pas au nombre de membres clés déclarés par le type d'élément de <paramref name="entitySet" /> ou <paramref name="keyValues" /> contient une expression avec un type de résultat qui n'est pas compatible avec le type du membre clé correspondant.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> qui encode une référence dans une entité spécifique d'un type donné en fonction des valeurs de clés.</summary>
      <returns>Nouveau DbRefExpression qui référence l'élément en fonction des valeurs de clés spécifiées dans le jeu d'entités indiqué.</returns>
      <param name="entitySet">Jeu d'entités qui contient l'élément référencé.</param>
      <param name="entityType">Type spécifique de l'entité référencée.Il doit s'agir d'un type d'entité appartenant à la même hiérarchie que le type d'élément du jeu d'entités.</param>
      <param name="keyValues">Collection d'objets <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit les valeurs de clés.Ces expressions doivent correspondre (en nombre, type et ordre) aux propriétés de clé du type d'entité référencé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> or <paramref name="entityType" /> est Null ou <paramref name="keyValues" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> n'est pas de la même hiérarchie des types (sous-type, supertype ou même type) que le type d'élément de <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="keyValues" /> ne correspond pas au nombre de membres clés déclarés par le type d'élément de <paramref name="entitySet" /> ou <paramref name="keyValues" /> contient une expression avec un type de résultat qui n'est pas compatible avec le type du membre clé correspondant.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> qui évalue l'expression <paramref name="apply" /> indiquée une fois pour chaque élément d'un jeu de données d'entrée particulier et produit une collection de lignes avec les colonnes input et apply correspondantes.Les lignes pour lesquelles <paramref name="apply" /> correspond à un jeu vide ne sont pas incluses.</summary>
      <returns>Nouveau DbApplyExpression avec les liaisons input et apply spécifiées et un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> CrossApply.</returns>
      <param name="source">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le jeu de données d'entrée. </param>
      <param name="apply">Méthode qui spécifie la logique à évaluer une fois pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="apply" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentNullException">Le résultat de <paramref name="apply" /> contient un nom ou une expression qui a la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">Le résultat de <paramref name="apply" /> contient un nom ou une expression qui n'est pas valide dans une liaison d'expression.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> qui évalue l'expression <paramref name="apply" /> indiquée une fois pour chaque élément d'un jeu de données d'entrée particulier et produit une collection de lignes avec les colonnes input et apply correspondantes.Les lignes pour lesquelles <paramref name="apply" /> correspond à un jeu vide ne sont pas incluses.</summary>
      <returns>Nouveau DbApplyExpression avec les liaisons input et apply spécifiées et un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> CrossApply.</returns>
      <param name="input">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="apply">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie la logique à évaluer une fois pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="apply" /> est null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> qui joint de façon non conditionnelle les jeux spécifiés par la liste de liaisons d'expression d'entrée.</summary>
      <returns>Nouveau DbCrossJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de CrossJoin, qui représente la jointure inconditionnelle des jeux d'entrée.</returns>
      <param name="inputs">Liste de liaisons d'expression qui spécifie les jeux d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> contient moins de 2 liaisons d'expression.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> qui récupère une entité spécifique à partir d'une expression de référence.</summary>
      <returns>Nouveau DbDerefExpression qui récupère l'entité spécifiée.</returns>
      <param name="argument">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui fournit la référence.Cette expression doit avoir un type référence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un type de résultat référence.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> qui supprime les doublons de l'argument de jeu donné.</summary>
      <returns>Nouveau DbDistinctExpression qui représente l'application Distinct appliquée à l'argument défini spécifié.</returns>
      <param name="argument">Expression qui définit le jeu sur lequel l'opération Distinct doit être exécutée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un type de résultat référence.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> qui divise l'argument de gauche par l'argument de droite.</summary>
      <returns>Nouveau DbArithmeticExpression représentant l'opération Division.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat numérique commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> qui convertit un jeu en singleton.</summary>
      <returns>DbElementExpression qui représente la conversion de l'argument défini en un singleton.</returns>
      <param name="argument">Expression qui spécifie le jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un type de résultat référence.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> qui compare les arguments de droite et de gauche pour vérifier s'ils sont égaux.</summary>
      <returns>Nouveau DbComparisonExpression représentant la comparaison d'égalité.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat numérique commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> qui soustrait l'argument de droite du jeu de l'argument de gauche.</summary>
      <returns>Nouveau DbExceptExpression qui soustrait l'argument de droite de l'argument de gauche.</returns>
      <param name="left">Expression qui définit l'argument défini à gauche.</param>
      <param name="right">Expression qui définit l'argument défini à droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat numérique commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui détermine si l'argument de jeu spécifié n'est pas vide.</summary>
      <returns>Nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> appliqué à un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> en fonction de l'argument spécifié.</returns>
      <param name="argument">Expression qui spécifie le jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un type de résultat collection.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> avec la valeur booléenne false.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> avec la valeur booléenne false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> qui filtre les éléments du jeu de données d'entrée indiqué à l'aide du prédicat spécifié.</summary>
      <returns>Nouveau DbFilterExpression qui crée le jeu filtré.</returns>
      <param name="input">Liaison d'expression qui spécifie le jeu de données d'entrée.</param>
      <param name="predicate">Expression représentant un prédicat à évaluer pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="predicate" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> qui joint les jeux indiqués par les expressions de gauche et de droite sur la condition de jointure spécifiée, en utilisant FullOuterJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> FullOuterJoin, qui représente une opération de jointure externe appliquée aux jeux d'entrée de gauche et de droite, sous la condition de jointure spécifiée. </returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument défini à gauche.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument défini à droite.</param>
      <param name="joinCondition">Méthode représentant la condition sur laquelle la jointure doit être basée.Cette méthode doit produire une expression avec un type de résultat booléen qui fournit la logique de la condition de jointure.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> ou <paramref name="joinCondition" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> ou <paramref name="right" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="joinCondition" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> qui joint les jeux indiqués par les liaisons d'expressions de gauche et de droite sur la condition de jointure spécifiée, en utilisant FullOuterJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> FullOuterJoin, qui représente une opération de jointure externe appliquée aux jeux d'entrée de gauche et de droite, sous la condition de jointure spécifiée.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie l'argument défini à gauche.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie l'argument défini à droite.</param>
      <param name="joinCondition">Expression qui spécifie la condition sur laquelle la jointure doit être basée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> ou <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> qui récupère la référence de l'entité spécifiée sous une forme structurelle.</summary>
      <returns>Nouveau DbEntityRefExpression qui récupère une référence à l'entité spécifiée.</returns>
      <param name="argument">Expression qui fournit l'entité.Cette expression doit avoir un résultat de type entité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un type de résultat entité.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> qui récupère les valeurs de clés de la référence spécifiée sous une forme structurelle.</summary>
      <returns>Nouveau DbRefKeyExpression qui récupère les valeurs de clés de la référence spécifiée.</returns>
      <param name="argument">Expression qui fournit la référence.Cette expression doit avoir un type référence avec un type d'élément entité.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un type de résultat entité.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> qui détermine si l'argument de gauche est supérieur à l'argument de droite.</summary>
      <returns>Nouveau DbComparisonExpression représentant la comparaison supérieur à.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'ordre commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> qui détermine si l'argument de gauche est supérieur ou égal à l'argument de droite.</summary>
      <returns>Nouveau DbComparisonExpression représentant la comparaison supérieur ou égal à.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">left ou right est Null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'ordre commun n'existe entre la gauche et la droite.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> sur l'argument spécifié.</summary>
      <returns>Nouvel agrégat de groupe représentant les éléments du groupe référencés par l'argument donné.</returns>
      <param name="argument">Argument sur lequel effectuer l'opération d'imbrication.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée une liaison d'expressions de groupe qui utilise des noms de variable générés et des noms de variable de groupe pour lier l'expression indiquée.</summary>
      <returns>Nouvelle liaison d'expressions de groupe avec l'expression spécifiée, un nom de variable généré et un nom de variable de groupe.</returns>
      <param name="input">Expression à lier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> n'a pas un type de résultat collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> qui utilise le nom de variable spécifié et des noms de variable de groupe pour lier l'expression indiquée.</summary>
      <returns>Nouvelle liaison d'expressions de groupe avec l'expression spécifiée, un nom de variable et un nom de variable de groupe.</returns>
      <param name="input">Expression à lier.</param>
      <param name="varName">Nom de variable qui doit être utilisé pour la liaison.</param>
      <param name="groupVarName">Nom de variable qui doit être utilisé pour faire référence au groupe lorsque la nouvelle liaison d'expressions de groupe est employée dans une expression group-by.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="varName" /> ou <paramref name="groupVarName" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> n'a pas un type de résultat collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> qui regroupe les éléments du jeu de données d'entrée en fonction des clés de groupe indiquées et applique les agrégats spécifiés.</summary>
      <returns>Nouveau DbGroupByExpression avec le jeu d'entrées, les clés de regroupement et les agrégats spécifiés.</returns>
      <param name="input">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="keys">Liste de paires d'expressions de chaîne qui définissent les colonnes de regroupement.</param>
      <param name="aggregates">Liste d'expressions qui spécifient les agrégats à appliquer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="keys" /> ou <paramref name="aggregates" /> est Null, <paramref name="keys" /> contient un nom de colonne clé ou expression Null, ou les agrégats contiennent un nom de colonne d'agrégat Null ou <paramref name="aggregate" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> et <paramref name="aggregates" /> sont vides, ou un nom de colonne non valide ou en double a été spécifié.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> qui correspond au résultat de l'expression spécifiée avec les résultats des expressions constantes dans la liste spécifiée.</summary>
      <returns>Nouveau DbInExpression avec les arguments spécifiés si la liste DbConstantExpression n'est pas vide, sinon une expression constante false.</returns>
      <param name="expression">DbExpression à mettre en correspondance.</param>
      <param name="list">Liste de DbConstantExpression à tester pour trouver une correspondance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ou <paramref name="list" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Le type de résultat de l'<paramref name="expression" /> est différent du type de résultat d'une expression de <paramref name="list" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> qui joint les jeux indiqués par les expressions de gauche et de droite sur la condition de jointure spécifiée, en utilisant InnerJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> InnerJoin, qui représente une opération de jointure interne appliquée aux jeux d'entrée de gauche et de droite, sous la condition de jointure spécifiée.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument défini à gauche.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument défini à droite.</param>
      <param name="joinCondition">Méthode représentant la condition sur laquelle la jointure doit être basée.Cette méthode doit produire une expression avec un type de résultat booléen qui fournit la logique de la condition de jointure.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> ou <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> ou <paramref name="right" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="joinCondition" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> qui joint les jeux indiqués par les expressions de gauche et de droite sur la condition de jointure spécifiée, en utilisant InnerJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> InnerJoin, qui représente une opération de jointure interne appliquée aux jeux d'entrée de gauche et de droite, sous la condition de jointure spécifiée.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie l'argument défini à gauche.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie l'argument défini à droite.</param>
      <param name="joinCondition">Expression qui spécifie la condition sur laquelle la jointure doit être basée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> ou <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> qui calcule l'intersection des arguments de gauche et de droite du jeu.</summary>
      <returns>DbIntersectExpression qui représente l'intersection des arguments de gauche et de droite.</returns>
      <param name="left">Expression qui définit l'argument défini à gauche.</param>
      <param name="right">Expression qui définit l'argument défini à droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou right est <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat de collection commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> représentant l'application de la fonction lambda spécifiée aux arguments indiqués.</summary>
      <returns>Nouveau DbLambdaExpression représentant l'application de la fonction lambda.</returns>
      <param name="lambda">Instance <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> représentant la fonction lambda à appliquer.</param>
      <param name="arguments">Liste des expressions qui fournissent les arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> est Null ou <paramref name="arguments" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="arguments" /> n'est pas égal au nombre de variables déclarées par <paramref name="lambda" />, ou <paramref name="arguments" /> contient une expression avec un type de résultat qui n'est pas égal au type de variable correspondant ni apte à être promu en celui-ci.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> représentant l'application de la fonction lambda spécifiée aux arguments indiqués.</summary>
      <returns>Nouveau DbLambdaExpression représentant l'application de la fonction lambda.</returns>
      <param name="lambda">Instance <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> représentant la fonction lambda à appliquer.</param>
      <param name="arguments">Expressions qui fournissent les arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> est Null ou <paramref name="arguments" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="arguments" /> n'est pas égal au nombre de variables déclarées par <paramref name="lambda" />, ou <paramref name="arguments" /> contient une expression avec un type de résultat qui n'est pas égal au type de variable correspondant ni apte à être promu en celui-ci.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> représentant l'appel de la fonction spécifiée avec les arguments indiqués.</summary>
      <returns>Nouveau DbFunctionExpression représentant l'appel de la fonction.</returns>
      <param name="function">Métadonnées de la fonction à appeler.</param>
      <param name="arguments">Liste des expressions qui fournissent les arguments à la fonction.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> est Null ou <paramref name="arguments" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="arguments" /> n'est pas égal au nombre de variables déclarées par <paramref name="function" />, ou <paramref name="arguments" /> contient une expression avec un type de résultat qui n'est pas égal au type de variable correspondant ni apte à être promu en celui-ci.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> représentant l'appel de la fonction spécifiée avec les arguments indiqués.</summary>
      <returns>Nouveau DbFunctionExpression représentant l'appel de la fonction.</returns>
      <param name="function">Métadonnées de la fonction à appeler.</param>
      <param name="arguments">Expressions qui fournissent les arguments à la fonction.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> est Null ou <paramref name="arguments" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">Le nombre de <paramref name="arguments" /> n'est pas égal au nombre de variables déclarées par <paramref name="function" />, ou <paramref name="arguments" /> contient une expression avec un type de résultat qui n'est pas égal au type de variable correspondant ni apte à être promu en celui-ci.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> qui détermine si l'argument de jeu spécifié est un jeu vide.</summary>
      <returns>Nouveau DbIsEmptyExpression en fonction de l'argument spécifié.</returns>
      <param name="argument">Expression qui spécifie le jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un type de résultat collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> qui détermine si l'argument de jeu spécifié est Null.</summary>
      <returns>Nouveau DbIsNullExpression en fonction de l'argument spécifié.</returns>
      <param name="argument">Expression qui spécifie l'argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> a un type de résultat collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> qui détermine si l'argument indiqué correspond au type spécifié ou à un sous-type.</summary>
      <returns>Nouveau DbIsOfExpression en fonction de l'instance, du type et de DbExpressionKind IsOf spécifiés.</returns>
      <param name="argument">Expression qui spécifie l'instance.</param>
      <param name="type">Métadonnées de type qui spécifient le type auquel le type de résultat de l'instance doit être comparé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="type" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> ne se trouve pas dans la même hiérarchie de type que le type de résultat de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée une expression <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> qui détermine si l'argument indiqué correspond au type spécifié et uniquement à ce type (pas à un sous-type).</summary>
      <returns>Nouveau DbIsOfExpression en fonction de l'instance, du type et de DbExpressionKind IsOfOnly spécifiés.</returns>
      <param name="argument">Expression qui spécifie l'instance.</param>
      <param name="type">Métadonnées de type qui spécifient le type auquel le type de résultat de l'instance doit être comparé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="type" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> ne se trouve pas dans la même hiérarchie de type que le type de résultat de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> qui joint les jeux indiqués par les expressions externe et interne sur une condition d'égalité entre les clés externe et interne spécifiées, en utilisant InnerJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> InnerJoin, qui représente une opération de jointure interne appliquée aux jeux d'entrée de gauche et de droite, sous une condition de jointure qui compare l'égalité des valeurs de clés externe et interne.</returns>
      <param name="outer">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument du jeu externe.</param>
      <param name="inner">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument du jeu interne.</param>
      <param name="outerKey">Méthode qui indique comment la valeur de clé externe doit être dérivée d'un élément du jeu externe.</param>
      <param name="innerKey">Méthode qui indique comment la valeur de clé interne doit être dérivée d'un élément du jeu interne.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" /> ou <paramref name="innerKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> ou <paramref name="innerKey" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="outerKey" /> ou <paramref name="innerKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">Les expressions produites par <paramref name="outerKey" /> ou <paramref name="innerKey" /> ne sont pas comparables pour l'égalité.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> qui projette le sélecteur spécifié sur les jeux indiqués par les expressions externe et interne, jointes sur une condition d'égalité entre les clés externe et interne spécifiées, en utilisant InnerJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbProjectExpression avec le sélecteur spécifié en tant que projection et un nouveau DbJoinExpression comme entrée.Le DbJoinExpression d'entrée est créé avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> InnerJoin, qui représente une opération de jointure interne appliquée aux jeux d'entrée de gauche et de droite, sous une condition de jointure qui compare l'égalité des valeurs de clés externe et interne.</returns>
      <param name="outer">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument du jeu externe.</param>
      <param name="inner">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument du jeu interne.</param>
      <param name="outerKey">Méthode qui indique comment la valeur de clé externe doit être dérivée d'un élément du jeu externe.</param>
      <param name="innerKey">Méthode qui indique comment la valeur de clé interne doit être dérivée d'un élément du jeu interne.</param>
      <param name="selector">Méthode qui spécifie comment un élément du jeu de résultats doit être dérivé d'éléments des jeux interne et externe.Cette méthode doit produire une instance d'un type compatible avec Join et pouvant être résolu en objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Les conditions de compatibilité pour <paramref name="TSelector" /> sont décrites dans la section Notes.</param>
      <typeparam name="TSelector">Type du sélecteur.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" />, <paramref name="innerKey" /> ou <paramref name="selector" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> ou <paramref name="inner" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="outerKey" /> ou <paramref name="innerKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">Le résultat de <paramref name="selector" /> est Null après la conversion en DbExpression.</exception>
      <exception cref="T:System.ArgumentException">Les expressions produites par <paramref name="outerKey" /> et <paramref name="innerKey" /> ne sont pas compatibles pour l'égalité.</exception>
      <exception cref="T:System.ArgumentException">Le résultat de <paramref name="selector" /> n'est pas compatible avec SelectMany.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> avec les paramètres formels et l'implémentation de fonction lambda inline spécifiés.</summary>
      <returns>Nouveau DbLambda qui décrit une fonction lambda inline avec les paramètres formels et le corps spécifiés.</returns>
      <param name="body">Expression qui définit la logique de la fonction lambda.</param>
      <param name="variables">Collection <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> qui représente les paramètres formels passés à la fonction lambda.Ces variables peuvent être utilisées dans l'expression <paramref name="body" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> est Null ou contient Null, ou <paramref name="body" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> contient plusieurs éléments avec le même nom de variable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> avec les paramètres formels et l'implémentation de fonction lambda inline spécifiés.</summary>
      <returns>Nouveau DbLambda qui décrit une fonction lambda inline avec les paramètres formels et le corps spécifiés.</returns>
      <param name="body">Expression qui définit la logique de la fonction lambda.</param>
      <param name="variables">Collection <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> qui représente les paramètres formels passés à la fonction lambda.Ces variables peuvent être utilisées dans l'expression body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> est Null ou contient Null, ou <paramref name="body" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> contient plusieurs éléments avec le même nom de variable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> qui joint les jeux indiqués par les expressions de gauche et de droite sur la condition de jointure spécifiée, en utilisant LeftOuterJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> LeftOuterJoin, qui représente une opération de jointure externe gauche appliquée aux jeux d'entrée de gauche et de droite, sous la condition de jointure spécifiée.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument défini à gauche.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie l'argument défini à droite.</param>
      <param name="joinCondition">Méthode représentant la condition sur laquelle la jointure doit être basée.Cette méthode doit produire une expression avec un type de résultat booléen qui fournit la logique de la condition de jointure.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> ou <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> ou <paramref name="right" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="joinCondition" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> qui joint les jeux indiqués par les liaisons d'expressions de gauche et de droite sur la condition de jointure spécifiée, en utilisant LeftOuterJoin comme type <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nouveau DbJoinExpression, avec un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> LeftOuterJoin, qui représente une opération de jointure externe gauche appliquée aux jeux d'entrée de gauche et de droite, sous la condition de jointure spécifiée.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie l'argument défini à gauche.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie l'argument défini à droite.</param>
      <param name="joinCondition">Expression qui spécifie la condition sur laquelle la jointure doit être basée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> ou <paramref name="joinCondition" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> qui détermine si l'argument de gauche est inférieur à l'argument de droite.</summary>
      <returns>Nouveau DbComparisonExpression représentant la comparaison inférieur à.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'ordre commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> qui détermine si l'argument de gauche est inférieur ou égal à l'argument de droite.</summary>
      <returns>Nouveau DbComparisonExpression représentant la comparaison inférieur ou égal à.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'ordre commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> qui compare la chaîne d'entrée spécifiée au modèle donné.</summary>
      <returns>Nouveau DbLikeExpression avec l'entrée, le modèle et la chaîne d'échappement Null spécifiés.</returns>
      <param name="argument">Expression qui spécifie la chaîne d'entrée.</param>
      <param name="pattern">Expression qui spécifie la chaîne de modèle.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="pattern" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> ou <paramref name="pattern" /> n'a pas un type de résultat chaîne.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> qui compare la chaîne d'entrée spécifiée au modèle indiqué en utilisant la chaîne d'échappement facultative.</summary>
      <returns>Nouveau DbLikeExpression avec l'entrée, le modèle et la chaîne d'échappement spécifiés.</returns>
      <param name="argument">Expression qui spécifie la chaîne d'entrée.</param>
      <param name="pattern">Expression qui spécifie la chaîne de modèle.</param>
      <param name="escape">Expression facultative qui spécifie la chaîne d'échappement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />, <paramref name="pattern" /> ou la chaîne d'échappement est <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />, <paramref name="pattern" /> ou la chaîne d'échappement n'a pas un type de résultat chaîne.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> qui restreint à la valeur limite spécifiée du nombre d'éléments de la collection d'arguments.Les résultats liés ne sont pas inclus dans la sortie.</summary>
      <returns>Nouveau DbLimitExpression avec l'argument et la valeur limite spécifiés qui n'inclut pas les résultats liés.</returns>
      <param name="argument">Expression qui spécifie la collection d'entrée.</param>
      <param name="count">Expression qui spécifie la valeur limite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="count" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas de type de résultat collection ou <paramref name="count" /> n'a pas un type de résultat qui est égal au ou apte à être promu en type entier 64 bits.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> qui soustrait l'argument de droite de l'argument de gauche.</summary>
      <returns>Nouveau DbArithmeticExpression représentant l'opération de soustraction.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'ordre commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> qui calcule le reste de la division de l'argument de gauche par l'argument de droite.</summary>
      <returns>Nouveau DbArithmeticExpression représentant l'opération modulo.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'ordre commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> qui multiplie l'argument de gauche par l'argument de droite.</summary>
      <returns>Nouveau DbArithmeticExpression représentant l'opération de multiplication.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'ordre commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> représentant la navigation au sein d'une relation d'association ou de composition.</summary>
      <returns>Nouveau DbRelationshipNavigationExpression représentant l'exploration des terminaisons de relations « to » et « from » du type de relation spécifiée de l'instance source d'exploration indiquée.</returns>
      <param name="navigateFrom">Expression qui spécifie l'instance à partir de laquelle la navigation doit être effectuée.</param>
      <param name="fromEnd">Métadonnées de la propriété qui représente la terminaison de relation à partir de laquelle l'exploration doit intervenir.</param>
      <param name="toEnd">Métadonnées de la propriété qui représente la terminaison de relation vers laquelle l'exploration doit intervenir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />, <paramref name="toEnd" /> ou <paramref name="NavigateForm" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> et <paramref name="toEnd" /> ne sont pas déclarés par le même type de relation, ou <paramref name="navigateFrom" /> a un type de résultat qui n'est pas compatible avec le type de propriété de <paramref name="fromEnd" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> représentant la navigation au sein d'une relation d'association ou de composition.</summary>
      <returns>Nouveau DbRelationshipNavigationExpression représentant l'exploration des terminaisons de relations « to » et « from » du type de relation spécifiée de l'instance source d'exploration indiquée.</returns>
      <param name="type">Métadonnées du type de relation qui représente la relation.</param>
      <param name="fromEndName">Nom de la propriété du type de relation qui représente la terminaison de relation à partir de laquelle l'exploration doit intervenir.</param>
      <param name="toEndName">Nom de la propriété du type de relation qui représente la terminaison de relation vers laquelle l'exploration doit intervenir.</param>
      <param name="navigateFrom">Expression qui spécifie l'instance à partir de laquelle la navigation doit être effectuée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" />, <paramref name="toEndName" /> ou <paramref name="NavigateForm" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> n'est pas associé à l'espace de travail des métadonnées de cette arborescence de commandes ou <paramref name="navigateFrom" /> est associé à une arborescence de commandes différente, ou <paramref name="type" /> ne déclare pas de propriété de fin de relation avec le nom <paramref name="toEndName" /> ou <paramref name="fromEndName" />, ou <paramref name="navigateFrom" /> a un type de résultat qui n'est pas compatible avec le <paramref name="fromEndName" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> qui inverse la valeur de l'argument.</summary>
      <returns>Nouveau DbArithmeticExpression représentant l'opération d'inversion de valeur.</returns>
      <param name="argument">Expression qui spécifie l'argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat numérique n'existe pour <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Si l'argument de type correspond à un type de collection, les arguments spécifient les éléments de la collection.Sinon, les arguments sont utilisés comme valeurs de propriété ou de colonne dans la nouvelle instance.</summary>
      <returns>Nouveau DbNewInstanceExpression en fonction des arguments et du type spécifiés.</returns>
      <param name="instanceType">Type de la nouvelle instance.</param>
      <param name="arguments">Expressions qui spécifient les valeurs de la nouvelle instance, interprétées selon le type de l'instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> ou <paramref name="arguments" /> est Null ou <paramref name="arguments" /> contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> est vide ou les types de résultats des expressions contenues ne répondent pas aux besoins de <paramref name="instanceType" /> (comme expliqué dans la section Notes).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crée <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Si l'argument de type correspond à un type de collection, les arguments spécifient les éléments de la collection.Sinon, les arguments sont utilisés comme valeurs de propriété ou de colonne dans la nouvelle instance.</summary>
      <returns>Nouveau DbNewInstanceExpression en fonction des arguments et du type spécifiés.</returns>
      <param name="instanceType">Type de la nouvelle instance.</param>
      <param name="arguments">Expressions qui spécifient les valeurs de la nouvelle instance, interprétées selon le type de l'instance.</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> ou <paramref name="arguments" /> est Null ou <paramref name="arguments" /> contient Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée une nouvelle <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> qui construit une collection contenant les éléments spécifiés.Le type de la collection est basé sur le type commun des éléments.Si aucun type d'élément commun n'existe, une exception est levée.</summary>
      <returns>Nouveau DbNewInstanceExpression en fonction des arguments et du type de collection spécifiés.</returns>
      <param name="elements">Liste des expressions qui fournissent les éléments de la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> est vide ou contient des expressions pour lesquelles aucun type de résultat commun n'existe.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crée une nouvelle <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> qui construit une collection contenant les éléments spécifiés.Le type de la collection est basé sur le type commun des éléments.Si aucun type d'élément commun n'existe, une exception est levée.</summary>
      <returns>Nouveau DbNewInstanceExpression en fonction des arguments et du type de collection spécifiés.</returns>
      <param name="elements">Liste des expressions qui fournissent les éléments de la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> est Null ou contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> est vide ou contient des expressions pour lesquelles aucun type de résultat commun n'existe.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> qui construit une collection vide correspondant au type de collection spécifié.</summary>
      <returns>Nouveau DbNewInstanceExpression en fonction du type de collection spécifié et d'une liste Arguments vide.</returns>
      <param name="collectionType">Métadonnées de type de la collection à créer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> n'est pas un type de collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> qui produit une ligne avec les colonnes nommées et les valeurs fournies, qui sont spécifiées en tant qu'expressions.</summary>
      <returns>Nouveau DbNewInstanceExpression qui représente la construction de la ligne.</returns>
      <param name="columnValues">Liste de paires clé/valeur string-DbExpression qui définit la structure et les valeurs de la ligne.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> est Null ou contient un élément avec un nom de colonne ou une expression Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> est vide ou contient un nom de colonne en double ou non valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> qui effectue la négation logique de l'argument spécifié.</summary>
      <returns>Nouveau DbNotExpression en fonction de l'argument spécifié.</returns>
      <param name="argument">Expression booléenne qui spécifie l'argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">argument n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> qui compare les arguments de droite et de gauche pour vérifier s'ils sont inégaux.</summary>
      <returns>Nouveau DbComparisonExpression représentant la comparaison d'inégalité.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat comparable pour l'égalité commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, qui représente une valeur de type Null.</summary>
      <returns>Instance de DbNullExpression.</returns>
      <param name="nullType">Type de valeur Null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> qui produit un jeu d'éléments correspondant au type spécifié à partir du jeu de données d'entrée.</summary>
      <returns>Nouveau DbOfTypeExpression en fonction de l'argument défini, du type et d'un ExpressionKind <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" /> spécifiés.</returns>
      <param name="argument">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="type">Métadonnées du type auquel les éléments du jeu de données d'entrée doivent correspondre pour être inclus dans le jeu de résultats.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="type" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un <paramref name="type" /> de résultat collection, ou type n'est pas un type dans la même hiérarchie des types que le type d'élément du type de résultat de collection de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> qui produit un jeu d'éléments correspondant exactement au type spécifié à partir du jeu de données d'entrée.</summary>
      <returns>Nouveau DbOfTypeExpression en fonction de l'argument défini, du type et d'un ExpressionKind <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" /> spécifiés.</returns>
      <param name="argument">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="type">Métadonnées du type auquel les éléments du jeu de données d'entrée doivent correspondre exactement pour être inclus dans le jeu de résultats.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="type" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas un <paramref name="type" /> de résultat collection, ou type n'est pas un type dans la même hiérarchie des types que le type d'élément du type de résultat de collection de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> qui effectue l'opération Or logique sur les arguments de droite et de gauche. </summary>
      <returns> Nouveau DbOrExpression en fonction des arguments spécifiés. </returns>
      <param name="left"> Expression booléenne qui spécifie l'argument de gauche. </param>
      <param name="right"> Expression booléenne qui spécifie l'argument de droite. </param>
      <exception cref="T:System.ArgumentNullException">gauchedroite</exception>
      <exception cref="T:System.ArgumentException">gauchedroite</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> qui trie le jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri croissant et le classement par défaut.</summary>
      <returns>Nouveau DbSortExpression qui représente l'opération order-by.</returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="sortKey" /> est null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat comparable pour l'ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> qui trie le jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri croissant et le classement fourni.</summary>
      <returns>Nouveau DbSortExpression qui représente l'opération order-by.</returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <param name="collation">Classement à partir duquel trier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> ou <paramref name="collation" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat de chaîne comparable par ordre.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> est vide ou ne contient que des espaces.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> qui trie le jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri décroissant et le classement par défaut.</summary>
      <returns>Nouveau DbSortExpression qui représente l'opération order-by.</returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="sortKey" /> est null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat de chaîne comparable par ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> qui trie le jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri décroissant et le classement par défaut.</summary>
      <returns>Nouveau DbSortExpression qui représente l'opération order-by.</returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <param name="collation">Classement à partir duquel trier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> ou <paramref name="collation" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat de chaîne comparable par ordre.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> est vide ou ne contient que des espaces.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> qui évalue l'expression <paramref name="apply" /> indiquée une fois pour chaque élément d'un jeu de données d'entrée particulier et produit une collection de lignes avec les colonnes input et apply correspondantes.Les lignes pour lesquelles <paramref name="apply" /> a la valeur d'un jeu vide possèdent une valeur de colonne apply de valeur null.</summary>
      <returns>Nouveau DbApplyExpression avec les liaisons input et apply spécifiées et un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> OuterApply.</returns>
      <param name="source">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="apply">Méthode qui spécifie la logique à évaluer une fois pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="apply" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentNullException">Le résultat de apply contient un nom ou une expression qui a la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">Le résultat de apply contient un nom ou une expression qui n'est pas valide dans une liaison d'expression.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> qui évalue l'expression <paramref name="apply" /> indiquée une fois pour chaque élément d'un jeu de données d'entrée particulier et produit une collection de lignes avec les colonnes input et apply correspondantes.Les lignes pour lesquelles <paramref name="apply" /> a la valeur d'un jeu vide possèdent une valeur de colonne apply de valeur null.</summary>
      <returns>Nouveau DbApplyExpression avec les liaisons input et apply spécifiées et un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> OuterApply.</returns>
      <param name="input">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="apply">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> qui spécifie la logique à évaluer une fois pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="apply" /> est null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> qui référence un paramètre avec le nom et le type spécifiés.</summary>
      <returns>DbParameterReferenceExpression qui représente une référence à un paramètre avec le nom et le type spécifiés ; le type de résultat de l'expression est le même que <paramref name="type" />.</returns>
      <param name="type">Type du paramètre référencé.</param>
      <param name="name">Nom du paramètre référencé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> qui ajoute l'argument de gauche à l'argument de droite.</summary>
      <returns>Nouveau DbArithmeticExpression représentant l'opération d'addition.</returns>
      <param name="left">Expression qui spécifie l'argument de gauche.</param>
      <param name="right">Expression qui spécifie l'argument de droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat numérique commun n'existe entre la gauche et la droite.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> qui projette l'expression spécifiée sur le jeu de données d'entrée indiqué.</summary>
      <returns>Nouveau DbProjectExpression qui représente l'opération de projection.</returns>
      <param name="input">Liaison d'expression qui spécifie le jeu de données d'entrée.</param>
      <param name="projection">Expression à projeter sur le jeu.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="projection" /> est null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> représentant la récupération de la propriété spécifiée.</summary>
      <returns>Nouveau DbPropertyExpression représentant la récupération de la propriété.</returns>
      <param name="instance">Instance à partir de laquelle récupérer la propriété.Peut avoir la valeur Null si la propriété est statique.</param>
      <param name="propertyMetadata">Métadonnées de la propriété à récupérer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> est Null ou <paramref name="instance" /> est Null et la propriété n'est pas statique.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> représentant la récupération de la propriété de navigation spécifiée.</summary>
      <returns>Nouveau DbPropertyExpression représentant la récupération de la propriété de navigation.</returns>
      <param name="instance">Instance à partir de laquelle la propriété de navigation doit être récupérée.</param>
      <param name="navigationProperty">Métadonnées de la propriété de navigation à récupérer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> est Null ou <paramref name="instance" /> est Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> représentant la récupération du membre de terminaison de relation spécifié.</summary>
      <returns>Nouveau DbPropertyExpression représentant la récupération du membre de terminaison de relation.</returns>
      <param name="instance">Instance à partir de laquelle le membre de terminaison de relation doit être récupéré.</param>
      <param name="relationshipEnd">Métadonnées du membre de terminaison de relation à récupérer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> est Null ou <paramref name="instance" /> est Null et la propriété n'est pas statique.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> représentant la récupération de la propriété d'instance portant le nom spécifié à partir de l'instance indiquée.</summary>
      <returns>Nouveau DbPropertyExpression qui représente la récupération de la propriété.</returns>
      <param name="instance">Instance à partir de laquelle récupérer la propriété.</param>
      <param name="propertyName">Nom de la propriété à récupérer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> est Null ou <paramref name="instance" /> est Null et la propriété n'est pas statique.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Aucune propriété avec le nom spécifié n'est déclarée par le type de <paramref name="instance" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> qui encode une référence dans une entité spécifique en fonction des valeurs de clés.</summary>
      <returns>Nouveau DbRefExpression qui référence l'élément en fonction des valeurs de clés spécifiées dans le jeu d'entités indiqué.</returns>
      <param name="entitySet">Jeu d'entités qui contient l'élément référencé.</param>
      <param name="keyRow">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui construit un enregistrement dont les colonnes correspondent (en termes de nombre, de type et d'ordre) aux propriétés de clés du type d'entité référencé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> ou <paramref name="keyRow" /> est null.</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> qui encode une référence dans une entité spécifique en fonction des valeurs de clés.</summary>
      <returns>Nouveau DbRefExpression qui référence l'élément en fonction des valeurs de clés spécifiées dans le jeu d'entités indiqué.</returns>
      <param name="entitySet">Jeu d'entités qui contient l'élément référencé.</param>
      <param name="keyRow">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui construit un enregistrement dont les colonnes correspondent (en termes de nombre, de type et d'ordre) aux propriétés de clés du type d'entité référencé.</param>
      <param name="entityType">Type de l'entité à laquelle il doit être fait référence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />, <paramref name="keyRow" /> ou <paramref name="entityType" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> ne se trouve pas dans la même hiérarchie de type que le type d'entité du jeu d'entités, ou <paramref name="keyRow" /> n'a pas un type de résultat enregistrement qui correspond aux propriétés de clés du type d'entité du jeu d'entités référencé.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> qui référence le jeu d'entités ou de relations spécifié.</summary>
      <returns>Nouveau DbScanExpression en fonction du jeu d'entités ou de relations spécifié.</returns>
      <param name="targetSet">Métadonnées du jeu d'entités ou de relations à référencer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> qui sélectionne l'expression spécifiée sur le jeu de données d'entrée indiqué.</summary>
      <returns> Nouveau DbProjectExpression qui représente l'opération de sélection. </returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="projection">Méthode qui spécifie le mode de dérivation de l'expression projetée à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une instance d'un type compatible avec Select et pouvant être résolu en objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Les conditions de compatibilité pour <paramref name="TProjection" /> sont décrites dans la section Notes.</param>
      <typeparam name="TProjection">Type de résultat de la méthode <paramref name="projection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="projection" /> est Null</exception>
      <exception cref="T:System.ArgumentNullException">Le résultat de <paramref name="projection" /> est Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> qui évalue l'expression <paramref name="apply" /> indiquée une fois pour chaque élément d'un jeu de données d'entrée particulier et produit une collection de lignes avec les colonnes input et apply correspondantes.Les lignes pour lesquelles <paramref name="apply" /> correspond à un jeu vide ne sont pas incluses.Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> est ensuite créé et la colonne <paramref name="selector" /> spécifiée de chaque ligne est sélectionnée pour produire l'intégralité de la collection de résultats.</summary>
      <returns>Nouveau DbProjectExpression qui sélectionne la colonne apply d'un nouveau DbApplyExpression avec les liaisons input et apply spécifiées dans <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> CrossApply.</returns>
      <param name="source">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="apply">Méthode qui représente la logique à évaluer une fois pour chaque membre du jeu de données d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="apply" /> est null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="apply" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="apply" /> n'a pas un type de collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> qui évalue l'expression <paramref name="apply" /> indiquée une fois pour chaque élément d'un jeu de données d'entrée particulier et produit une collection de lignes avec les colonnes input et apply correspondantes.Les lignes pour lesquelles <paramref name="apply" /> correspond à un jeu vide ne sont pas incluses.Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> est ensuite créé et la colonne <paramref name="selector" /> spécifiée de chaque ligne est sélectionnée pour produire l'intégralité de la collection de résultats.</summary>
      <returns>Nouveau DbProjectExpression qui sélectionne le résultat du sélecteur indiqué d'un nouveau DbApplyExpression avec les liaisons input et apply spécifiées dans <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> CrossApply.</returns>
      <param name="source">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui spécifie le jeu de données d'entrée.</param>
      <param name="apply">Méthode qui représente la logique à évaluer une fois pour chaque membre du jeu de données d'entrée.</param>
      <param name="selector">Méthode qui spécifie comment un élément du jeu de résultats doit être dérivé d'un élément des jeux input et apply.Cette méthode doit produire une instance d'un type compatible avec SelectMany et pouvant être résolu en objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Les conditions de compatibilité pour <paramref name="TSelector" /> sont décrites dans la section Notes.</param>
      <typeparam name="TSelector">Type de résultat de la méthode <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="apply" /> ou <paramref name="selector" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="apply" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">Le résultat de <paramref name="selector" /> est Null lors de la conversion en DbExpression.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="apply" /> n'a pas un type de collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" /> utilisé pour définir une propriété à une valeur.</summary>
      <returns>Clause SET nouvellement créée.</returns>
      <param name="property">Propriété à définir.</param>
      <param name="value">Valeur à laquelle définir la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> qui trie le jeu de données d'entrée indiqué par spécifications de tri avant d'ignorer le nombre spécifié d'éléments.</summary>
      <returns>Nouveau DbSkipExpression qui représente l'opération skip.</returns>
      <param name="input">Liaison d'expression qui spécifie le jeu de données d'entrée.</param>
      <param name="sortOrder">Liste de spécifications de tri qui déterminent comment les éléments du jeu de données d'entrée doivent être triés.</param>
      <param name="count">Expression qui spécifie combien d'éléments du jeu ordonné doivent être ignorés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="sortOrder" /> ou <paramref name="count" /> est Null ou <paramref name="sortOrder" /> contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> est vide ou <paramref name="count" /> n'est pas <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> ou <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> ou a un type de résultat qui n'est pas égal au ou apte à être promu en type entier 64 bits.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> qui ignore le nombre spécifié d'éléments du jeu de données d'entrée trié indiqué.</summary>
      <returns>Nouveau DbSkipExpression qui représente l'opération skip.</returns>
      <param name="argument">Objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> qui spécifie le jeu de données d'entrée trié.</param>
      <param name="count">Expression qui spécifie combien d'éléments du jeu ordonné doivent être ignorés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="count" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> n'est pas <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> ou <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> ou a un type de résultat qui n'est pas égal au ou apte à être promu en type entier 64 bits.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> qui trie le jeu de données d'entrée indiqué en fonction des spécifications de tri fournies.</summary>
      <returns>Nouveau DbSortExpression qui représente l'opération de tri.</returns>
      <param name="input">Liaison d'expression qui spécifie le jeu de données d'entrée.</param>
      <param name="sortOrder">Liste de spécifications de tri qui déterminent comment les éléments du jeu de données d'entrée doivent être triés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ou <paramref name="sortOrder" /> est Null ou <paramref name="sortOrder" /> contient Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> qui restreint à la valeur limite spécifiée du nombre d'éléments de la collection d'arguments.Les résultats liés ne sont pas inclus dans la sortie.</summary>
      <returns>Nouveau DbLimitExpression avec l'argument et la valeur limite spécifiés qui n'inclut pas les résultats liés.</returns>
      <param name="argument">Expression qui spécifie la collection d'entrée.</param>
      <param name="count">Expression qui spécifie la valeur limite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="count" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> n'a pas de type de résultat collection ou <paramref name="count" /> n'a pas un type de résultat qui est égal au ou apte à être promu en type entier 64 bits.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> avec un ordre de tri qui inclut l'ordre de tri du jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri croissant et le classement par défaut.</summary>
      <returns>Nouveau DbSortExpression qui représente la nouvelle opération order-by globale.</returns>
      <param name="source">DbSortExpression qui spécifie le jeu de données d'entrée ordonné.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri supplémentaire à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="sortKey" /> est null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat comparable pour l'ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> avec un ordre de tri qui inclut l'ordre de tri du jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri croissant et le classement spécifié.</summary>
      <returns>Nouveau DbSortExpression qui représente la nouvelle opération order-by globale.</returns>
      <param name="source">DbSortExpression qui spécifie le jeu de données d'entrée ordonné.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri supplémentaire à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <param name="collation">Classement à partir duquel trier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> ou <paramref name="collation" /> ont la valeur Null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat de chaîne comparable par ordre.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> est vide ou ne contient que des espaces.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> avec un ordre de tri qui inclut l'ordre de tri du jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri décroissant et le classement par défaut.</summary>
      <returns>Nouveau DbSortExpression qui représente la nouvelle opération order-by globale.</returns>
      <param name="source">DbSortExpression qui spécifie le jeu de données d'entrée ordonné.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri supplémentaire à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="sortKey" /> est null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat comparable pour l'ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> avec un ordre de tri qui inclut l'ordre de tri du jeu de données d'entrée indiqué en fonction de la clé de tri spécifiée, avec l'ordre de tri décroissant et le classement spécifié.</summary>
      <returns>Nouveau DbSortExpression qui représente la nouvelle opération order-by globale.</returns>
      <param name="source">DbSortExpression qui spécifie le jeu de données d'entrée ordonné.</param>
      <param name="sortKey">Méthode qui spécifie le mode de dérivation de l'expression de clé de tri supplémentaire à partir d'un membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat comparable au niveau de l'ordre qui fournit la définition de clé de tri.</param>
      <param name="collation">Classement à partir duquel trier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> ou <paramref name="collation" /> est Null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="sortKey" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> n'a pas un type de résultat collection.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="sortKey" /> n'a pas un type de résultat de chaîne comparable par ordre.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> est vide ou ne contient que des espaces.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> avec un ordre de tri croissant et le classement par défaut.</summary>
      <returns>Nouvelle clause de tri qui utilise la clé de tri indiquée et l'ordre de tri croissant.</returns>
      <param name="key">Expression qui définit la clé de tri.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> n'a pas un type de résultat comparable pour l'ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> avec un ordre de tri croissant et le classement spécifié.</summary>
      <returns>Nouvelle clause de tri qui utilise la clé de tri et le classement indiqués, ainsi que l'ordre de tri croissant.</returns>
      <param name="key">Expression qui définit la clé de tri.</param>
      <param name="collation">Classement à partir duquel trier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> est vide ou ne contient que des espaces.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> n'a pas un type de résultat comparable pour l'ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> avec un ordre de tri décroissant et le classement par défaut.</summary>
      <returns>Nouvelle clause de tri qui utilise la clé de tri indiquée et l'ordre de tri décroissant.</returns>
      <param name="key">Expression qui définit la clé de tri.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> n'a pas un type de résultat comparable pour l'ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> avec un ordre de tri décroissant et le classement spécifié.</summary>
      <returns>Nouvelle clause de tri qui utilise la clé de tri et le classement indiqués, ainsi que l'ordre de tri décroissant.</returns>
      <param name="key">Expression qui définit la clé de tri.</param>
      <param name="collation">Classement à partir duquel trier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> est vide ou ne contient que des espaces.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> n'a pas un type de résultat comparable pour l'ordre.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <returns>Nouveau DbTreatExpression en fonction de l'argument et du type spécifiés.</returns>
      <param name="argument">Expression qui spécifie l'instance.</param>
      <param name="treatType">Métadonnées du type utilisé pour le traitement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> ou <paramref name="treatType" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> ne se trouve pas dans la même hiérarchie de type que le type de résultat de <paramref name="argument" />.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> avec la valeur booléenne true.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> avec la valeur booléenne true.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> qui inverse la valeur de l'argument.</summary>
      <returns>Nouveau DbArithmeticExpression représentant l'opération d'inversion de valeur.</returns>
      <param name="argument">Expression qui spécifie l'argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat numérique n'existe pour <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui calcule l'union des arguments de gauche et de droite du jeu en supprimant les doublons.</summary>
      <returns>Nouveau DbExpression qui calcule l'union des arguments de gauche et de droite du jeu en supprimant les doublons.</returns>
      <param name="left">Expression qui définit l'argument défini à gauche.</param>
      <param name="right">Expression qui définit l'argument défini à droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat de collection commun avec un type d'élément comparable pour l'égalité n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> qui calcule l'union des arguments de gauche et de droite du jeu sans supprimer les doublons.</summary>
      <returns>Nouveau DbUnionAllExpression qui calcule l'union des arguments de gauche et de droite du jeu, y compris les doublons.</returns>
      <param name="left">Expression qui définit l'argument défini à gauche.</param>
      <param name="right">Expression qui définit l'argument défini à droite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> ou <paramref name="right" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucun type de résultat de collection commun n'existe entre <paramref name="left" /> et <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> qui référence une variable avec le nom et le type spécifiés.</summary>
      <returns>DbVariableReferenceExpression qui représente une référence à une variable avec le nom et le type spécifiés ; le type de résultat de l'expression est le même que <paramref name="type" />.</returns>
      <param name="type">Type de la variable référencée.</param>
      <param name="name">Nom de la variable référencée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> qui filtre les éléments du jeu de données d'entrée indiqué à l'aide du prédicat spécifié.</summary>
      <returns>Nouveau DbQuantifierExpression qui représente l'opération Any.</returns>
      <param name="source">Expression qui spécifie le jeu de données d'entrée.</param>
      <param name="predicate">Méthode représentant le prédicat à évaluer pour chaque membre du jeu de données d'entrée.Cette méthode doit produire une expression contenant un type de résultat booléen qui fournit la logique de prédicat.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est null.</exception>
      <exception cref="T:System.ArgumentNullException">L'expression produite par <paramref name="predicate" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">L'expression produite par <paramref name="predicate" /> n'a pas un type de résultat booléen.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>Fournit une API permettant de construire des objets <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui appellent des fonctions EDM canoniques, et rend cette API accessible en tant que méthodes d'extension sur le type d'expression lui-même.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Abs' canonique avec l'argument spécifié, qui doivent chacun avoir un résultat de type numérique.Le type de résultat de l'expression est identique à celui de <paramref name="value" />.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur absolue de <paramref name="value" />.</returns>
      <param name="value">Expression qui spécifie la valeur numérique.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Abs' canonique n'accepte un argument avec le type de résultat de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddDays canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime ou DateTimeOffset.Le type de résultat de l'expression est identique à celui de <paramref name="dateValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre de jours spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre de jours à ajouter à <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddDays' canonique n'accepte des arguments avec les types de résultats de <paramref name="dateValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddHours canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime, DateTimeOffset ou Time.Le type de résultat de l'expression est identique à celui de <paramref name="timeValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre d'heures spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre d'heures à ajouter à <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddHours' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddMicroseconds canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime, DateTimeOffset ou Time.Le type de résultat de l'expression est identique à celui de <paramref name="timeValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre de microsecondes spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre de microsecondes à ajouter à <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddMicroseconds' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddMilliseconds canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime, DateTimeOffset ou Time.Le type de résultat de l'expression est identique à celui de <paramref name="timeValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre de millisecondes spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre de millisecondes à ajouter à <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddMilliseconds' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddMinutes canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime, DateTimeOffset ou Time.Le type de résultat de l'expression est identique à celui de <paramref name="timeValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre de minutes spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre de minutes à ajouter à <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddMinutes' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddMonths canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime ou DateTimeOffset.Le type de résultat de l'expression est identique à celui de <paramref name="dateValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre de mois spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre de mois à ajouter à <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddMonths' canonique n'accepte des arguments avec les types de résultats de <paramref name="dateValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddNanoseconds canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime, DateTimeOffset ou Time.Le type de résultat de l'expression est identique à celui de <paramref name="timeValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre de nanosecondes spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre de nanosecondes à ajouter à <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddNanoseconds' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddSeconds canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime, DateTimeOffset ou Time.Le type de résultat de l'expression est identique à celui de <paramref name="timeValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre de secondes spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre de secondes à ajouter à <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddSeconds' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction AddYears canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et DateTime ou DateTimeOffset.Le type de résultat de l'expression est identique à celui de <paramref name="dateValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui ajoute le nombre d'années spécifié par <paramref name="addValue" /> à la valeur spécifiée par <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expression qui spécifie la valeur à laquelle ajouter <paramref name="addValue" />.</param>
      <param name="addValue">Expression qui spécifie le nombre d'années à ajouter à <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> ou <paramref name="addValue" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'AddYears' canonique n'accepte des arguments avec les types de résultats de <paramref name="dateValue" /> et <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Avg' canonique sur la collection spécifiée.Le type de résultat de l'expression est identique au type d'élément de la collection.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la valeur moyenne.</returns>
      <param name="collection">Expression qui spécifie la collection à partir de laquelle la valeur moyenne doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Avg' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction BitwiseAnd canonique avec les arguments spécifiés, qui doivent avoir le même type de résultat (numérique entier).Le type de résultat de l'expression est ce même type.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur générée en exécutant une opération AND au niveau du bit pour <paramref name="value1" /> et <paramref name="value2" />.</returns>
      <param name="value1">Expression qui spécifie la première opérande.</param>
      <param name="value2">Expression qui spécifie la seconde opérande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> ou <paramref name="value2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'BitwiseAnd' canonique n'accepte des arguments avec les types de résultats de <paramref name="value1" /> et <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction BitwiseNot canonique avec l'argument spécifié, qui doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est ce même type.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur générée en exécutant une opération NOT au niveau du bit pour <paramref name="value" />.</returns>
      <param name="value">Expression qui spécifie la première opérande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'BitwiseNot' canonique n'accepte des arguments avec les types de résultat de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction BitwiseOr canonique avec les arguments spécifiés, qui doivent avoir le même type de résultat (numérique entier).Le type de résultat de l'expression est ce même type.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur générée en exécutant une opération OR au niveau du bit pour <paramref name="value1" /> et <paramref name="value2" />.</returns>
      <param name="value1">Expression qui spécifie la première opérande.</param>
      <param name="value2">Expression qui spécifie la seconde opérande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> ou <paramref name="value2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'BitwiseOr' canonique n'accepte des arguments avec les types de résultats de <paramref name="value1" /> et <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction BitwiseXor canonique avec les arguments spécifiés, qui doivent avoir le même type de résultat (numérique entier).Le type de résultat de l'expression est ce même type.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur générée en exécutant une opération XOR (OR exclusive) au niveau du bit pour <paramref name="value1" /> et <paramref name="value2" />.</returns>
      <param name="value1">Expression qui spécifie la première opérande.</param>
      <param name="value2">Expression qui spécifie la seconde opérande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> ou <paramref name="value2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'BitwiseXor' canonique n'accepte des arguments avec les types de résultats de <paramref name="value1" /> et <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Ceiling' canonique avec l'argument spécifié, qui doivent chacun avoir un résultat de type simple, double ou décimal.Le type de résultat de l'expression est identique à celui de <paramref name="value" />.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la plus petite valeur entière qui n'est pas inférieure à <paramref name="value" />.</returns>
      <param name="value">Expression qui spécifie la valeur numérique.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Ceiling' canonique n'accepte un argument avec le type de résultat de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction Concat canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type chaîne.Le type de résultat de l'expression est une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la chaîne concaténée.</returns>
      <param name="string1">Expression qui spécifie la chaîne devant s'afficher en première position dans la chaîne de résultat concaténée.</param>
      <param name="string2">Expression qui spécifie la chaîne devant s'afficher en deuxième position dans la chaîne de résultat concaténée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="string1" /> ou <paramref name="string2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Concat' canonique n'accepte des arguments avec le type de résultat de <paramref name="string1" /> et <paramref name="string2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction Contains canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type chaîne.Le type de résultat de l'expression est booléen.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si <paramref name="searchedForString" /> existe ou non dans <paramref name="searchedString" />.</returns>
      <param name="searchedString">Expression qui spécifie la chaîne dans laquelle toutes les occurrences de <paramref name="searchedForString" /> doivent être recherchées.</param>
      <param name="searchedForString">Expression qui spécifie la chaîne à rechercher dans <paramref name="searchedString" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedString" /> ou <paramref name="searchedForString" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Contains' canonique n'accepte des arguments avec le type de résultats de <paramref name="searchedString" /> et <paramref name="searchedForString" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Count' canonique sur la collection spécifiée.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la valeur de compteur.</returns>
      <param name="collection">Expression qui spécifie la collection sur laquelle la valeur de compteur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Count' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'CreateDateTime' canonique avec les     arguments spécifiés.<paramref name="second" /> doit avoir un résultat de type Edm.Double, alors que tous les autres arguments doivent avoir un résultat de type Edm.Int32.Le type de résultat de l'expression est Edm.DateTime.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur DateTime basée sur les valeurs spécifiées.</returns>
      <param name="year">Expression qui fournit la valeur « année » pour la nouvelle instance DateTime.</param>
      <param name="month">Expression qui fournit la valeur « mois » pour la nouvelle instance DateTime.</param>
      <param name="day">Expression qui fournit la valeur « jour » pour la nouvelle instance DateTime.</param>
      <param name="hour">Expression qui fournit la valeur « heure » pour la nouvelle instance DateTime.</param>
      <param name="minute">Expression qui fournit la valeur « minute » pour la nouvelle instance DateTime.</param>
      <param name="second">Expression qui fournit la valeur « seconde » pour la nouvelle instance DateTime.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'CreateDateTime' canonique n'accepte des arguments avec les types de résultats de <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> et <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'CreateDateTimeOffset' canonique avec les    arguments spécifiés.<paramref name="second" /> doit avoir un résultat de type Edm.Double, alors que tous les autres arguments doivent avoir un résultat de type Edm.Int32.Le type de résultat de l'expression est Edm.DateTimeOffset.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur DateTimeOffset basée sur les valeurs spécifiées.</returns>
      <param name="year">Expression qui fournit la valeur « année » pour la nouvelle instance DateTimeOffset.</param>
      <param name="month">Expression qui fournit la valeur « mois » pour la nouvelle instance DateTimeOffset.</param>
      <param name="day">Expression qui fournit la valeur « jour » pour la nouvelle instance DateTimeOffset.</param>
      <param name="hour">Expression qui fournit la valeur « heure » pour la nouvelle instance DateTimeOffset.</param>
      <param name="minute">Expression qui fournit la valeur « minute » pour la nouvelle instance DateTimeOffset.</param>
      <param name="second">Expression qui fournit la valeur « seconde » pour la nouvelle instance DateTimeOffset.</param>
      <param name="timeZoneOffset">Expression qui fournit le nombre de minutes indiqué dans la valeur « décalage de fuseau horaire » pour la nouvelle instance DateTimeOffset.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> ou <paramref name="timeZoneOffset" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'CreateDateTimeOffset' canonique n'accepte des arguments avec le type de résultat de <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> et <paramref name="timeZoneOffset" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'CreateTime' canonique avec les     arguments spécifiés.<paramref name="second" /> doit avoir un résultat de type Edm.Double, alors que tous les autres arguments doivent avoir un résultat de type Edm.Int32.Le type de résultat de l'expression est Edm.Time.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur Time basée sur les valeurs spécifiées.</returns>
      <param name="hour">Expression qui fournit la valeur « heure » pour la nouvelle instance DateTime.</param>
      <param name="minute">Expression qui fournit la valeur « minute » pour la nouvelle instance DateTime.</param>
      <param name="second">Expression qui fournit la valeur « seconde » pour la nouvelle instance DateTime.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hour" />, <paramref name="minute" /> ou <paramref name="second" /> ont la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'CreateTime' canonique n'accepte des arguments avec les types de résultats de <paramref name="hour" />, <paramref name="minute" /> et <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'CurrentDateTime' canonique.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne les date et heure actuelles sous forme d'instance Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'CurrentDateTimeOffset' canonique.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne les date et heure actuelles sous forme d'instance Edm.DateTimeOffset.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'CurrentUtcDateTime' canonique.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne les date et heure UTC actuelles sous forme d'instance Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Day' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime ou DateTimeOffset.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « jour » entière de <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expression qui spécifie la valeur à partir de laquelle le jour doit être récupéré.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Day' canonique n'accepte d'arguments avec le type de résultat de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DayOfYear' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime ou DateTimeOffset.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « jour de l'année » entière de <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expression qui spécifie la valeur à partir de laquelle le jour de l'année doit être récupéré.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DayOfYear' canonique n'accepte d'arguments avec le type de résultat de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffDays' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime ou DateTimeOffset.Le type de résultat de <paramref name="dateValue1" /> doit correspondre au type de résultat de <paramref name="dateValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence de jours entre <paramref name="dateValue1" /> et <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Expression qui spécifie la première valeur DateTime ou DateTimeOffset.</param>
      <param name="dateValue2">Expression qui spécifie la valeur DateTime ou DateTimeOffset pour laquelle la différence de jours par rapport à <paramref name="dateValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> ou <paramref name="dateValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffDays' canonique n'accepte des arguments avec les types de résultats de <paramref name="dateValue1" /> et <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffHours' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime, DateTimeOffset ou Time.Le type de résultat de <paramref name="timeValue1" /> doit correspondre au type de résultat de <paramref name="timeValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence d'heures entre <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expression qui spécifie la première valeur DateTime, DateTimeOffset ou Time.</param>
      <param name="timeValue2">Expression qui spécifie la valeur DateTime, DateTimeOffset ou Time pour laquelle la différence d'heures par rapport à <paramref name="timeValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> ou <paramref name="timeValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffHours' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffMicroseconds' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime, DateTimeOffset ou Time.Le type de résultat de <paramref name="timeValue1" /> doit correspondre au type de résultat de <paramref name="timeValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence de microsecondes entre <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expression qui spécifie la première valeur DateTime, DateTimeOffset ou Time.</param>
      <param name="timeValue2">Expression qui spécifie la valeur DateTime, DateTimeOffset ou Time pour laquelle la différence de microsecondes par rapport à <paramref name="timeValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> ou <paramref name="timeValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffMicroseconds' canonique n'accepte des arguments avec le type de résultat de <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffMilliseconds' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime, DateTimeOffset ou Time.Le type de résultat de <paramref name="timeValue1" /> doit correspondre au type de résultat de <paramref name="timeValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence de millisecondes entre <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expression qui spécifie la première valeur DateTime, DateTimeOffset ou Time.</param>
      <param name="timeValue2">Expression qui spécifie la valeur DateTime, DateTimeOffset ou Time pour laquelle la différence de millisecondes par rapport à <paramref name="timeValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> ou <paramref name="timeValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffMilliseconds' canonique n'accepte des arguments avec le type de résultat de <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffMinutes' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime, DateTimeOffset ou Time.Le type de résultat de <paramref name="timeValue1" /> doit correspondre au type de résultat de <paramref name="timeValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence de minutes entre <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expression qui spécifie la première valeur DateTime, DateTimeOffset ou Time.</param>
      <param name="timeValue2">Expression qui spécifie la valeur DateTime, DateTimeOffset ou Time pour laquelle la différence de minutes par rapport à <paramref name="timeValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> ou <paramref name="timeValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffMinutes' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffMonths' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime ou DateTimeOffset.Le type de résultat de <paramref name="dateValue1" /> doit correspondre au type de résultat de <paramref name="dateValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence de mois entre <paramref name="dateValue1" /> et <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Expression qui spécifie la première valeur DateTime ou DateTimeOffset.</param>
      <param name="dateValue2">Expression qui spécifie la valeur DateTime ou DateTimeOffset pour laquelle la différence de mois par rapport à <paramref name="dateValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> ou <paramref name="dateValue2" /> est Null</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffMonths' canonique n'accepte des arguments avec les types de résultats de <paramref name="dateValue1" /> et <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffNanoseconds' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime, DateTimeOffset ou Time.Le type de résultat de <paramref name="timeValue1" /> doit correspondre au type de résultat de <paramref name="timeValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence de nanosecondes entre <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expression qui spécifie la première valeur DateTime, DateTimeOffset ou Time.</param>
      <param name="timeValue2">Expression qui spécifie la valeur DateTime, DateTimeOffset ou Time pour laquelle la différence de nanosecondes par rapport à <paramref name="timeValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> ou <paramref name="timeValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffNanoseconds' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffSeconds' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime, DateTimeOffset ou Time.Le type de résultat de <paramref name="timeValue1" /> doit correspondre au type de résultat de <paramref name="timeValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence de secondes entre <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expression qui spécifie la première valeur DateTime, DateTimeOffset ou Time.</param>
      <param name="timeValue2">Expression qui spécifie la valeur DateTime, DateTimeOffset ou Time pour laquelle la différence de secondes par rapport à <paramref name="timeValue1" /> doit être calculée. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> ou <paramref name="timeValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffSeconds' canonique n'accepte des arguments avec les types de résultats de <paramref name="timeValue1" /> et <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'DiffYears' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type DateTime ou DateTimeOffset.Le type de résultat de <paramref name="dateValue1" /> doit correspondre au type de résultat de <paramref name="dateValue2" />.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la différence d'années entre <paramref name="dateValue1" /> et <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Expression qui spécifie la première valeur DateTime ou DateTimeOffset.</param>
      <param name="dateValue2">Expression qui spécifie la valeur DateTime ou DateTimeOffset pour laquelle la différence d'années par rapport à <paramref name="dateValue1" /> doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> ou <paramref name="dateValue2" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'DiffYears' canonique n'accepte des arguments avec les types de résultats de <paramref name="dateValue1" /> et <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction EndsWith canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type chaîne.Le type de résultat de l'expression est booléen.</summary>
      <returns>Nouveau DbFunctionExpression qui indique si <paramref name="stringArgument" /> se termine par <paramref name="suffix" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dans laquelle l'élément <paramref name="suffix" /> spécifié doit être recherché.</param>
      <param name="suffix">Expression qui spécifie le suffixe à rechercher dans <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> ou <paramref name="suffix" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'EndsWith' canonique n'accepte des arguments avec les types de résultats de <paramref name="stringArgument" /> et <paramref name="suffix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Floor' canonique avec l'argument spécifié, qui doivent tous les deux avoir un résultat de type simple, double ou décimal.Le type de résultat de l'expression est identique à celui de <paramref name="value" />.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la plus grande valeur entière qui n'est pas supérieure à <paramref name="value" />.</returns>
      <param name="value">Expression qui spécifie la valeur numérique.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Floor' canonique n'accepte un argument avec le type de résultat de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'GetTotalOffsetMinutes' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTimeOffset.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne les nombres de minutes correspondant au décalage de <paramref name="dateTimeOffsetArgument" /> par rapport à l'heure GMT.</returns>
      <param name="dateTimeOffsetArgument">Expression qui spécifie la valeur DateTimeOffset à partir de laquelle le décalage de minutes par rapport à la valeur GMT doit être récupéré.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOffsetArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'GetTotalOffsetMinutes' canonique n'accepte un argument avec le type de résultat de <paramref name="dateTimeOffsetArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Hour' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime, DateTimeOffset ou Time.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « heure » entière de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à partir de laquelle l'heure doit être récupérée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Hours' canonique n'accepte d'arguments avec les types de résultat de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction IndexOf canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type chaîne.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le premier index de <paramref name="stringToFind" /> dans <paramref name="searchString" />.</returns>
      <param name="searchString">Expression qui spécifie la chaîne à rechercher pour <paramref name="stringToFind" />.</param>
      <param name="stringToFind">Expression qui spécifie la chaîne à rechercher dans <paramref name="searchString" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchString" /> ou <paramref name="stringToFind" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'IndexOf' canonique n'accepte des arguments avec les types de résultats de <paramref name="searchString" /> et <paramref name="stringToFind" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Left' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type numérique entier et chaîne.Le type de résultat de l'expression est une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la sous-chaîne la plus à gauche de longueur <paramref name="length" /> à partir de l'élément <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dont la sous-chaîne la plus à gauche doit être extraite.</param>
      <param name="length">Expression qui spécifie la longueur de la sous-chaîne la plus à gauche à extraire de l'élément <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> ou <paramref name="length" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Left' canonique n'accepte d'arguments avec les types de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction Length canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la longueur de <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne pour laquelle la longueur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Length' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'BigCount' canonique sur la collection spécifiée.Type de résultat de l'expression est Edm.Int64.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la valeur de compteur.</returns>
      <param name="collection">Expression qui spécifie la collection sur laquelle la valeur de compteur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'BigCount' canonique n'accepte d'arguments avec les types de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Max' canonique sur la collection spécifiée.Le type de résultat de l'expression est identique au type d'élément de la collection.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la valeur maximale.</returns>
      <param name="collection">Expression qui spécifie la collection à partir de laquelle la valeur maximale doit être récupérée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Max' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Millisecond' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime, DateTimeOffset ou Time.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « milliseconde » entière de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à partir de laquelle les millisecondes doivent être récupérées.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Millisecond' canonique n'accepte un argument avec le type de résultat de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Min' canonique sur la collection spécifiée.Le type de résultat de l'expression est identique au type d'élément de la collection.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la valeur minimale.</returns>
      <param name="collection">Expression qui spécifie la collection à partir de laquelle la valeur minimale doit être récupérée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Min' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Minute' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime, DateTimeOffset ou Time.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « minute » entière de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à partir de laquelle les minutes doivent être récupérées.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Minute' canonique n'accepte un argument avec le type de résultat de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Month' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime ou DateTimeOffset.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « mois » entière de <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expression qui spécifie la valeur à partir de laquelle le mois doit être récupéré.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Month' canonique n'accepte un argument avec le type de résultat de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'NewGuid' canonique.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de GUID.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Power' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type numérique.Le type de résultat de l'expression est identique à celui de <paramref name="baseArgument" />.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de <paramref name="baseArgument" /> élevée à la puissance spécifiée par <paramref name="exponent" />.</returns>
      <param name="baseArgument">Expression qui spécifie la valeur numérique à élever à la puissance indiquée.</param>
      <param name="exponent">Expression qui spécifie la puissance à laquelle l'élément <paramref name="baseArgument" /> doit être élevé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseArgument" /> ou <paramref name="exponent" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Power' canonique n'accepte des arguments avec les types de résultats de <paramref name="baseArgument" /> et <paramref name="exponent" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Replace' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une chaîne basée sur <paramref name="stringArgument" /> où chaque occurrence de <paramref name="toReplace" /> est remplacée par <paramref name="replacement" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dans laquelle l'opération de remplacement doit être exécutée.</param>
      <param name="toReplace">Expression qui spécifie la chaîne à remplacer.</param>
      <param name="replacement">Expression qui spécifie la chaîne de remplacement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> , <paramref name="toReplace" /> ou <paramref name="replacement" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Replace' canonique n'accepte des arguments avec les types de résultats de <paramref name="stringArgument" />, <paramref name="toReplace" /> et <paramref name="replacement" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Reverse' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la valeur inversée de <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne à inverser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Reverse' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Right' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type numérique entier et chaîne.Le type de résultat de l'expression est une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la sous-chaîne la plus à droite de longueur <paramref name="length" /> à partir de l'élément <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dont la sous-chaîne la plus à droite doit être extraite.</param>
      <param name="length">Expression qui spécifie la longueur de la sous-chaîne la plus à droite à extraire de l'élément <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> ou <paramref name="length" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Right' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Round' canonique avec l'argument spécifié, qui doit chacun avoir un résultat de type simple, double ou décimal.Le type de résultat de l'expression est identique à celui de <paramref name="value" />.</summary>
      <returns>Nouveau DbFunctionExpression qui arrondit l'argument spécifié à la valeur entière la plus proche.</returns>
      <param name="value">Expression qui spécifie la valeur numérique à arrondir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Round' canonique n'accepte un argument avec le type de résultat de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Round' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et simple, double ou décimal.Le type de résultat de l'expression est identique à celui de <paramref name="value" />.</summary>
      <returns>Nouveau DbFunctionExpression qui arrondit l'argument spécifié à la valeur entière la plus proche, avec la précision spécifiée par <paramref name="digits" />.</returns>
      <param name="value">Expression qui spécifie la valeur numérique à arrondir.</param>
      <param name="digits">Expression qui spécifie le nombre de chiffres à utiliser pour la précision de l'arrondi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ou <paramref name="digits" /> est Null</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Round' canonique n'accepte des arguments avec les types de résultats de <paramref name="value" /> et <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Second' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime, DateTimeOffset ou Time.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « seconde » entière de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expression qui spécifie la valeur à partir de laquelle les secondes doivent être récupérées.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Second' canonique n'accepte un argument avec le type de résultat de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'StartsWith' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type chaîne.Le type de résultat de l'expression est booléen.</summary>
      <returns>Nouveau DbFunctionExpression qui indique si <paramref name="stringArgument" /> commence par <paramref name="prefix" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dans laquelle l'élément <paramref name="prefix" /> spécifié doit être recherché.</param>
      <param name="prefix">Expression qui spécifie le préfixe à rechercher dans <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> ou <paramref name="prefix" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'StartsWith' canonique n'accepte des arguments avec les types de résultats de <paramref name="stringArgument" /> et <paramref name="prefix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'StDev' canonique sur les membres non Null de la collection spécifiée.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui génère l'écart-type par rapport aux membres non Null de la collection.</returns>
      <param name="collection">Expression qui spécifie la collection pour laquelle l'écart type doit être calculé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'StDev' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'StDevP' canonique au-delà du remplissage de la collection spécifiée.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui génère l'écart type.</returns>
      <param name="collection">Expression qui spécifie la collection pour laquelle l'écart type doit être calculé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'StDevP' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Substring' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type numérique entier et chaîne.Le type de résultat de l'expression est une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la longueur <paramref name="length" /> de la sous-chaîne de l'élément <paramref name="stringArgument" /> qui démarre à <paramref name="start" />.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dont la sous-chaîne doit être extraite.</param>
      <param name="start">Expression qui spécifie l'index de départ dont la sous-chaîne doit être extraite.</param>
      <param name="length">Expression qui spécifie la longueur de la sous-chaîne.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> , <paramref name="start" /> ou <paramref name="length" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Substring' n'accepte des arguments avec les types de résultats de <paramref name="stringArgument" />, <paramref name="start" /> et <paramref name="length" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Sum' canonique sur la collection spécifiée.Le type de résultat de l'expression est identique au type d'élément de la collection.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la somme.</returns>
      <param name="collection">Expression qui spécifie la collection à partir de laquelle la somme doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Sum' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'ToLower' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de <paramref name="stringArgument" /> convertie en minuscules.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne devant être convertie en minuscules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'ToLower' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'ToUpper' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de <paramref name="stringArgument" /> convertie en majuscules.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne devant être convertie en majuscules.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'ToUpper' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Trim' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de <paramref name="stringArgument" /> en supprimant les espaces de début et de fin.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dont les espaces à gauche et à droite doivent être supprimés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Trim' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'RTrim' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de <paramref name="stringArgument" /> en supprimant l'espace à droite.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dont l'espace à droite doit être supprimé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'RTrim' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'LTrim' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est aussi une chaîne.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de <paramref name="stringArgument" /> en supprimant l'espace à gauche.</returns>
      <param name="stringArgument">Expression qui spécifie la chaîne dont l'espace à gauche doit être supprimé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'LTrim' canonique n'accepte un argument avec le type de résultat de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Truncate' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type entier et simple, double ou décimal.Le type de résultat de l'expression est identique à celui de <paramref name="value" />.</summary>
      <returns>Nouveau DbFunctionExpression qui tronque l'argument spécifié à la valeur entière la plus proche, avec la précision spécifiée par <paramref name="digits" />.</returns>
      <param name="value">Expression qui spécifie la valeur numérique à tronquer.</param>
      <param name="digits">Expression qui spécifie le nombre de chiffres à utiliser pour la précision de la troncation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ou <paramref name="digits" /> est null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Truncate' canonique n'accepte des arguments avec les types de résultats de <paramref name="value" /> et <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'TruncateTime' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime ou DateTimeOffset.Le type de résultat de l'expression est identique à celui de <paramref name="dateValue" />.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de <paramref name="dateValue" /> avec l'heure définie à zéro.</returns>
      <param name="dateValue">Expression qui spécifie la valeur pour laquelle la partie « heure » doit être tronquée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'TruncateTime' canonique n'accepte un argument avec le type de résultat de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Var' canonique sur les membres non Null de la collection spécifiée.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la variance statistique par rapport aux membres non Null de la collection.</returns>
      <param name="collection">Expression qui spécifie la collection pour laquelle la variance statistique doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Var' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'VarP' canonique au-delà du remplissage de la collection spécifiée.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui génère la variance statistique.</returns>
      <param name="collection">Expression qui spécifie la collection pour laquelle la variance statistique doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'VarP' canonique n'accepte un argument avec le type de résultat de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Year' canonique avec l'argument spécifié, qui doit avoir un résultat de type DateTime ou DateTimeOffset.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur « année » entière de<paramref name=" dateValue" />.</returns>
      <param name="dateValue">Expression qui spécifie la valeur à partir de laquelle l'année doit être récupérée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Aucune surcharge de la fonction 'Year' canonique n'accepte un argument avec le type de résultat de <paramref name="dateValue" />.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>Représente la classe Row destinée à fournir un moyen de type constructeur pour appeler &lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt;.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> avec la première valeur de colonne spécifiée et des valeurs de colonne successives facultatives </summary>
      <param name="columnValue">Paire clé/valeur qui fournit la première colonne de la nouvelle instance de ligne (obligatoire).</param>
      <param name="columnValues">Paires clé/valeur qui fournissent les colonnes suivantes de la nouvelle instance de ligne (facultatif).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convertit un objet de ligne en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui représente l'objet de ligne converti.</returns>
      <param name="row">Objet de ligne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>Crée une <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> qui construit une nouvelle ligne basée sur les colonnes contenues dans cette instance de ligne.</summary>
      <returns>Nouvelle DbNewInstanceExpression qui construit une ligne avec les mêmes noms de colonnes et valeurs DbExpression que ceux de cette instance de ligne.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>Fournit une API permettant de construire des objets <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui appellent des fonctions EDM canoniques spatiales associées et, si nécessaire, rend cette API accessible en tant que méthodes d'extension sur le type d'expression lui-même.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Area' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la zone de spatialValue ou null si spatialValue n'est pas une surface.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de surface spatiale pour laquelle la zone doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'AsBinary' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Binary.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la représentation binaire connue de spatialValue.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur spatiale à partir de laquelle la représentation binaire connue doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'AsGml' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.String.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la représentation GML (Geography Markup Language) de spatialValue.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur spatiale à partir de laquelle la représentation GML (Geography Markup Language) doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'AsText' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.String.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la représentation textuelle connue de spatialValue.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur spatiale à partir de laquelle la représentation textuelle connue doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Centroid' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le point central de geometryValue (qui peut ne pas se trouver sur la surface proprement dite) ou null si geometryValue n'est pas une surface.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur de surface de géométrie à partir de laquelle le centre doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'CoordinateSystemId' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur SRID entière de spatialValue.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur à partir de laquelle l'ID du système de coordonnées (SRID) doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Distance' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la distance entre les points les plus proches dans spatialValue1 et spatialValue1.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale à partir de laquelle la distance par rapport à spatialValue1 doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Elevation' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur d'élévation de spatialValue ou null si spatialValue n'est pas un point.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur à partir de point spatial à partir de laquelle la valeur d'élévation (Z) doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'EndPoint' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat est identique à celui de spatialValue.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le point de terminaison de spatialValue ou null si spatialValue n'est pas une courbe.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de courbe spatiale à partir de laquelle le point de terminaison doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'ExteriorRing' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne l'anneau extérieur du polygone geometryValue ou null si geometryValue n'est pas un polygone.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyCollectionFromBinary' canonique avec les arguments spécifiés.geographyCollectionWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de collection géographique basée sur les valeurs spécifiées.</returns>
      <param name="geographyCollectionWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de collection de géographie.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de collection géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyCollectionFromText' canonique avec les arguments spécifiés.geographyCollectionWellKnownText doit avoir un type de résultat chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de collection géographique basée sur les valeurs spécifiées.</returns>
      <param name="geographyCollectionWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de collection de géographie.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de collection géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'GeographyFromBinary' canonique avec l'argument spécifié, qui doit avoir un résultat de type binaire.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie basée sur la valeur binaire spécifiée.</returns>
      <param name="wellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyFromBinary' canonique avec les arguments spécifiés.wellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie basée sur les valeurs spécifiées.</returns>
      <param name="wellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'GeographyFromGml' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie basée sur la valeur spécifiée avec l'ID de système de coordonnées par défaut (SRID) du fournisseur sous-jacent.</returns>
      <param name="geographyMarkup">Expression qui fournit la représentation GML (Geography Markup Language) connue de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyFromGml' canonique avec les arguments spécifiés.geographyMarkup doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie basée sur les valeurs spécifiées.</returns>
      <param name="geographyMarkup">Expression qui fournit la représentation GML (Geography Markup Language) connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'GeographyFromText' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est Edm.Geography.Sa valeur est l'ID de système de coordonnées par défaut (SRID) du fournisseur de données sous-jacent.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie basée sur la valeur spécifiée.</returns>
      <param name="wellKnownText">Expression qui fournit la représentation textuelle connue de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyFromText' canonique avec les arguments spécifiés.wellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie basée sur les valeurs spécifiées.</returns>
      <param name="wellKnownText">Expression qui fournit la représentation textuelle connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyLineFromBinary' canonique avec les arguments spécifiés.lineWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de ligne géographique basée sur les valeurs spécifiées.</returns>
      <param name="lineWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de ligne géographique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de ligne géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyLineFromText' canonique avec les arguments spécifiés.lineWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de ligne géographique basée sur les valeurs spécifiées.</returns>
      <param name="lineWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de ligne géographique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de ligne géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyMultiLineFromBinary' canonique avec les arguments spécifiés.multiLineWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie à plusieurs lignes basée sur les valeurs spécifiées.</returns>
      <param name="multiLineWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géographie à plusieurs lignes.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multiligne géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyMultiLineFromText' canonique avec les arguments spécifiés.multiLineWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie à plusieurs lignes basée sur les valeurs spécifiées.</returns>
      <param name="multiLineWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géographie à plusieurs lignes.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multiligne géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyMultiPointFromBinary' canonique avec les arguments spécifiés.multiPointWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie à plusieurs points basée sur les valeurs spécifiées.</returns>
      <param name="multiPointWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géographie à plusieurs points.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipoint géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyMultiPointFromText' canonique avec les arguments spécifiés.multiPointWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie à plusieurs points basée sur les valeurs spécifiées.</returns>
      <param name="multiPointWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géographie à plusieurs points.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipoint géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyMultiPolygonFromBinary' canonique avec les arguments spécifiés.multiPolygonWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie à plusieurs polygones basée sur les valeurs spécifiées.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géographie à plusieurs polygones.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipolygone géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyMultiPolygonFromText' canonique avec les arguments spécifiés.multiPolygonWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géographie à plusieurs polygones basée sur les valeurs spécifiées.</returns>
      <param name="multiPolygonWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géographie à plusieurs polygones.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipolygone géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyPointFromBinary canonique avec les arguments spécifiés.pointWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de point géographique basée sur les valeurs spécifiées.</returns>
      <param name="pointWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de point géographique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de point binaire connue.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyPointFromText' canonique avec les arguments spécifiés.</summary>
      <returns>Fonction 'GeographyPointFromText' canonique.</returns>
      <param name="pointWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de point géographique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du systempointWellKnownTextValue de coordonnées de la valeur de point géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyPolygonFromBinary' canonique avec les arguments spécifiés.polygonWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de polygone géographique basée sur les valeurs spécifiées.</returns>
      <param name="polygonWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géographie de type polygone.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de polygone géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeographyPolygonFromText' canonique avec les arguments spécifiés.polygonWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geography.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de polygone géographique basée sur les valeurs spécifiées.</returns>
      <param name="polygonWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géographie de type polygone.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de polygone géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryCollectionFromBinary' canonique avec les arguments spécifiés.geometryCollectionWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de collection géométrique basée sur les valeurs spécifiées.</returns>
      <param name="geometryCollectionWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de collection de géométrie.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de collection géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryCollectionFromText' canonique avec les arguments spécifiés.geometryCollectionWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de collection géométrique basée sur les valeurs spécifiées.</returns>
      <param name="geometryCollectionWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de collection de géométrie.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de collection géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'GeometryFromBinary' canonique avec l'argument spécifié, qui doit avoir un résultat de type binaire.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie basée sur la valeur binaire spécifiée.</returns>
      <param name="wellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryFromBinary' canonique avec les arguments spécifiés.wellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie basée sur les valeurs spécifiées.</returns>
      <param name="wellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'GeometryFromGml' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie basée sur la valeur spécifiée avec l'ID de système de coordonnées par défaut (SRID) du fournisseur sous-jacent.</returns>
      <param name="geometryMarkup">Expression qui fournit la représentation GML (Geography Markup Language) connue de la valeur géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryFromGml' canonique avec les arguments spécifiés.geometryMarkup doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie basée sur les valeurs spécifiées.</returns>
      <param name="geometryMarkup">Expression qui fournit la représentation GML (Geography Markup Language) connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'GeometryFromText' canonique avec l'argument spécifié, qui doit avoir un résultat de type chaîne.Le type de résultat de l'expression est Edm.Geometry.Sa valeur est l'ID de système de coordonnées par défaut (SRID) du fournisseur de données sous-jacent.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie basée sur la valeur spécifiée.</returns>
      <param name="wellKnownText">Expression qui fournit la représentation textuelle connue de la valeur géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryFromText' canonique avec les arguments spécifiés.wellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie basée sur les valeurs spécifiées.</returns>
      <param name="wellKnownText">Expression qui fournit la représentation textuelle connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryLineFromBinary' canonique avec les arguments spécifiés.lineWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de ligne géométrique basée sur les valeurs spécifiées.</returns>
      <param name="lineWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de ligne de géométrie.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de ligne géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryLineFromText' canonique avec les arguments spécifiés.lineWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de ligne géométrique basée sur les valeurs spécifiées.</returns>
      <param name="lineWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de ligne de géométrie.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de ligne géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryMultiLineFromBinary' canonique avec les arguments spécifiés.multiLineWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie à plusieurs lignes basée sur les valeurs spécifiées.</returns>
      <param name="multiLineWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géométrie à plusieurs lignes.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multiligne géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryMultiLineFromText' canonique avec les arguments spécifiés.multiLineWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie à plusieurs lignes basée sur les valeurs spécifiées.</returns>
      <param name="multiLineWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géométrie à plusieurs lignes.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multiligne géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryMultiPointFromBinary' canonique avec les arguments spécifiés.multiPointWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie à plusieurs points basée sur les valeurs spécifiées.</returns>
      <param name="multiPointWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géométrie à plusieurs points.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipoint géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryMultiPointFromText' canonique avec les arguments spécifiés.multiPointWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie à plusieurs points basée sur les valeurs spécifiées.</returns>
      <param name="multiPointWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géométrie à plusieurs points.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipoint géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryMultiPolygonFromBinary' canonique avec les arguments spécifiés.multiPolygonWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie à plusieurs polygones basée sur les valeurs spécifiées.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géométrie à plusieurs polygones.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipolygone géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryMultiPolygonFromText' canonique avec les arguments spécifiés.multiPolygonWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de géométrie à plusieurs polygones basée sur les valeurs spécifiées.</returns>
      <param name="multiPolygonWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géométrie à plusieurs polygones.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur multipolygone géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryPointFromBinary' canonique avec les arguments spécifiés.pointWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de point géométrique basée sur les valeurs spécifiées.</returns>
      <param name="pointWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de point géométrique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de point géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryPointFromText' canonique avec les arguments spécifiés.pointWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de point géométrique basée sur les valeurs spécifiées.</returns>
      <param name="pointWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de point géométrique.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de point géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryPolygonFromBinary' canonique avec les arguments spécifiés.polygonWellKnownBinaryValue doit avoir un type de résultat binaire, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de polygone géométrique basée sur les valeurs spécifiées.</returns>
      <param name="polygonWellKnownBinaryValue">Expression qui fournit la représentation binaire connue de la valeur de géométrie de type polygone.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de polygone géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'GeometryPolygonFromText' canonique avec les arguments spécifiés.polygonWellKnownText doit avoir un résultat de type chaîne, tandis que coordinateSystemId doit avoir un type de résultat numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une nouvelle valeur de polygone géométrique basée sur les valeurs spécifiées.</returns>
      <param name="polygonWellKnownText">Expression qui fournit la représentation textuelle connue de la valeur de géométrie de type polygone.</param>
      <param name="coordinateSystemId">Expression qui fournit l'ID de système de coordonnées (SRID) du système de coordonnées de la valeur de polygone géométrique.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'InteriorRingAt' canonique avec les arguments spécifiés.Le premier argument doit avoir un résultat de type Edm.Geometry.Le deuxième argument doit avoir un résultat de type numérique entier.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne l'anneau intérieur à la position indexValue dans geometryValue ou null si geometryValue n'est pas un polygone.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <param name="indexValue">Expression qui spécifie la position de l'anneau intérieur à récupérer dans le polygone.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'InteriorRingCount' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le nombre d'anneaux intérieurs du polygone geometryValue ou null si geometryValue n'est pas un polygone.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'IsClosedSpatial' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si spatialValue est fermé, ou null si spatialValue n'est pas une courbe.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de courbe spatiale à partir de laquelle la valeur IsClosedSpatial doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'IsEmptySpatial' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si spatialValue est vide.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de courbe spatiale à partir de laquelle la valeur IsEmptySpatial doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'IsRing' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue est un anneau (fermé et simple) ou null si geometryValue n'est pas une courbe.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur de courbe de géométrie à partir de laquelle la valeur IsRing doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'IsSimpleGeometry' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue est une géométrie simple.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'IsValidGeometry' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue est valide.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur de géométrie pour laquelle la validité spatiale doit être testée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Latitude' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur Latitude de geographyValue ou null si geographyValue n'est pas un point.</returns>
      <param name="geographyValue">Expression qui spécifie la valeur de point géographique à partir de laquelle la valeur Latitude doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Longitude' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur Longitude de geographyValue ou null si geographyValue n'est pas un point.</returns>
      <param name="geographyValue">Expression qui spécifie la valeur de point géographique à partir de laquelle la valeur Longitude doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'Measure' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la mesure de spatialValue ou null si spatialValue n'est pas un point.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur à partir de point spatial à partir de laquelle la valeur Measure (M) doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'PointAt' canonique avec les arguments spécifiés.Le premier argument doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le deuxième argument doit avoir un résultat de type numérique entier.Le type de résultat de l'expression est identique à celui de spatialValue.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le point à la position indexValue dans spatialValue ou null si spatialValue n'est pas une chaîne de ligne.</returns>
      <param name="spatialValue">Expression qui spécifie la première valeur de chaîne de ligne spatiale.</param>
      <param name="indexValue">Expression qui spécifie la position du point à récupérer dans la chaîne de ligne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'PointCount' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le nombre de points dans spatialValue ou null si spatialValue n'est pas une chaîne de ligne.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de chaîne de ligne spatiale à partir de laquelle le nombre de points doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'PointOnSurface' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne un point sur la surface geometryValue ou null si geometryValue n'est pas une surface.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur de surface de géométrie à partir de laquelle le point doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialBoundary' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la limite de geometryValue.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur de courbe de géométrie à partir de laquelle la valeur SpatialBoundary doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialBuffer' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur de géométrie représentant tous les points dont la valeur est inférieure ou égale à la distance de spatialValue.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur spatiale.</param>
      <param name="distance">Expression qui spécifie la distance de tampon.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialContains' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue1 contient spatialement geometryValue2.</returns>
      <param name="geometryValue1">Expression qui spécifie la première valeur géométrique.</param>
      <param name="geometryValue2">Expression qui spécifie la valeur de géométrie à comparer avec geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialConvexHull' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la forme convexe de geometryValue.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur de courbe de géométrie à partir de laquelle la valeur de forme convexe doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialCrosses' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue1 croise geometryValue2.</returns>
      <param name="geometryValue1">Expression qui spécifie la première valeur géométrique.</param>
      <param name="geometryValue2">Expression qui spécifie la valeur de géométrie à comparer avec geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialDifference' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est le même que le type de spatialValue1 et spatialValue2.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de géométrie représentant la différence de spatialValue2 par rapport à spatialValue1.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale pour laquelle la différence par rapport à spatialValue1 doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialDimension' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de dimension de spatialValue.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur à partir de laquelle la valeur de dimension doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialDisjoint' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si spatialValue1 et spatialValue2 sont disjoints de manière spatiale.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale pour laquelle la disjointure doit être comparée avec spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> qui appelle la fonction 'SpatialElementAt' canonique avec les arguments spécifiés.Le premier argument doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le deuxième argument doit avoir un résultat de type numérique entier.Le type de résultat de l'expression est identique à celui de spatialValue.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne l'élément de collection à la position indexValue dans spatialValue ou null si spatialValue n'est pas une collection.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de collection de géographie ou géométrie.</param>
      <param name="indexValue">Expression qui spécifie la position de l'élément à récupérer dans la collection de géométrie ou de géographie.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialElementCount' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Type de résultat de l'expression est Edm.Int32.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le nombre d'éléments dans spatialValue ou null si spatialValue si n'est pas une collection.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de collection de géographie ou géométrie à partir de laquelle le nombre d'éléments doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialEnvelope' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Geometry.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur minimale du cadre englobant de geometryValue.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur à partir de laquelle la valeur d'enveloppe doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialEquals' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si spatialValue1 et spatialValue2 sont égales.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale pour laquelle l'égalité doit être comparée avec spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialIntersection' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est le même que le type de spatialValue1 et spatialValue2.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur spatiale représentant l'intersection de spatialValue1 et spatialValue2.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale pour laquelle l'intersection avec spatialValue1 doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialIntersects' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si spatialValue1 et spatialValue2 se coupent.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale pour laquelle l'intersection doit être comparée avec spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialLength' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la longueur de spatialValue ou null si spatialValue n'est pas une courbe.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de courbe spatiale à partir de laquelle la longueur doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialOverlaps' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue1 chevauche spatialement geometryValue2.</returns>
      <param name="geometryValue1">Expression qui spécifie la première valeur géométrique.</param>
      <param name="geometryValue2">Expression qui spécifie la valeur de géométrie à comparer avec geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialRelate' canonique avec les arguments spécifiés, qui doivent avoir un résultat de type Edm.Geography et chaîne.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue1 est spatialement lié à geometryValue2 en fonction de la relation spatiale indiquée par intersectionPatternMatrix.</returns>
      <param name="geometryValue1">Expression qui spécifie la première valeur géométrique.</param>
      <param name="geometryValue2">Expression qui spécifie la valeur de géométrie à comparer avec geometryValue1.</param>
      <param name="intersectionPatternMatrix">Expression qui spécifie la représentation textuelle du modèle d'intersection DE-9IM (Dimensionally Extended Nine-Intersection Model) pour comparer geometryValue1 et geometryValue2.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialSymmetricDifference' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est le même que le type de spatialValue1 et spatialValue2.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur de géométrie représentant la différence symétrique de spatialValue2 par rapport à spatialValue1.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale pour laquelle la différence symétrique par rapport à spatialValue1 doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialTouches' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue1 touche geometryValue2.</returns>
      <param name="geometryValue1">Expression qui spécifie la première valeur géométrique.</param>
      <param name="geometryValue2">Expression qui spécifie la valeur de géométrie à comparer avec geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialTypeName' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de l'expression est Edm.String.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le nom de type de géométrie de la chaîne de spatialValue.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur à partir de laquelle le nom de type de géométrie doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialUnion' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat de spatialValue1 doit correspondre au type de résultat de spatialValue2.Le type de résultat de l'expression est le même que le type de spatialValue1 et spatialValue2.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur spatiale représentant l'union de spatialValue1 et de spatialValue2.</returns>
      <param name="spatialValue1">Expression qui spécifie la première valeur spatiale.</param>
      <param name="spatialValue2">Expression qui spécifie la valeur spatiale pour laquelle l'union avec spatialValue1 doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'SpatialWithin' canonique avec les arguments spécifiés, qui doivent tous avoir un résultat de type Edm.Geometry.Le type de résultat de l'expression est Edm.Boolean.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne une valeur booléenne indiquant si geometryValue1 est spatialement dans geometryValue2.</returns>
      <param name="geometryValue1">Expression qui spécifie la première valeur géométrique.</param>
      <param name="geometryValue2">Expression qui spécifie la valeur de géométrie à comparer avec geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'StartPoint' canonique avec l'argument spécifié, qui doit avoir un résultat de type Edm.Geography ou Edm.Geometry.Le type de résultat est identique à celui de spatialValue.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne le point de départ de spatialValue ou null si spatialValue n'est pas une courbe.</returns>
      <param name="spatialValue">Expression qui spécifie la valeur de courbe spatiale à partir de laquelle le point de départ doit être récupéré.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'XCoordinate' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur X de geometryValue ou null si geometryValue n'est pas un point.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur à partir de point géométrique à partir de laquelle la valeur X doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> appelant la fonction 'YCoordinate' canonique avec l'argument spécifié, qui doit avoir un type de résultat Edm.Geometry.Le type de résultat de l'expression est Edm.Double.</summary>
      <returns>Nouveau DbFunctionExpression qui retourne la valeur Y de geometryValue ou null si geometryValue n'est pas un point.</returns>
      <param name="geometryValue">Expression qui spécifie la valeur à partir de point géométrique à partir de laquelle la valeur Y doit être récupérée.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>Classe publique de l'analyseur Entity SQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>Analyse la requête spécifiée à l'aide des paramètres spécifiés.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> contenant <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> et des informations décrivant les définitions de fonction inline, le cas échéant.</returns>
      <param name="query">Requête Entity SQL à analyser.</param>
      <param name="parameters">Paramètres de requête facultatifs.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Analyse une requête spécifique avec une variable définie spécifique et crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> contenant <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> et des informations décrivant les définitions de fonction inline, le cas échéant.</returns>
      <param name="query">Requête à analyser.</param>
      <param name="variables">Variables de requête facultatives.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>Définition de la fonction inline de la requête Entity SQL, retournée comme une partie de <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>Position de fin de la définition de fonction dans le texte de requête Entity SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>Corps et paramètres de la fonction.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>Nom de la fonction.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>Position de départ de la définition de fonction dans le texte de requête Entity SQL.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>Informations de résultat de l'analyseur Entity SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>Arborescence de commandes créée lors de l'analyse.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>Liste d'objets <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" /> qui décrivent des définitions de la fonction inline de la requête.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>Classe représentant une commande pour la couche conceptuelle</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> avec les valeurs spécifiées.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> avec l'instruction spécifiée.</summary>
      <param name="statement">Texte de la commande.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> avec l'instruction et la connexion spécifiées.</summary>
      <param name="statement">Texte de la commande.</param>
      <param name="connection">Connexion à la source de données.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> avec l'instruction, la connexion et la transaction spécifiées.</summary>
      <param name="statement">Texte de la commande.</param>
      <param name="connection">Connexion à la source de données.</param>
      <param name="transaction">Transaction dans laquelle cette commande s'exécute.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Construit l'objet EntityCommand avec l'instruction Entity SQL indiquée et l'objet de connexion à utiliser</summary>
      <param name="statement">Texte de la commande Entity SQL à exécuter</param>
      <param name="connection">Objet de connexion</param>
      <param name="resolver">Programme de résolution utilisé pour résoudre DbProviderServices</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>Annule l'exécution d'un <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>Obtient ou définit une instruction Entity SQL qui spécifie une commande ou une procédure stockée à exécuter.</summary>
      <returns>Instruction Entity SQL qui spécifie une commande ou une procédure stockée à exécuter.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>Obtient ou définit le délai d'attente avant l'expiration.</summary>
      <returns>Durée en secondes d'attente de l'exécution de la commande.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>Obtient ou définit l'arborescence de commandes à exécuter. L'arborescence de commandes ou le texte de la commande peut être défini, mais pas les deux.</summary>
      <returns>Arborescence de commandes à exécuter.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>Obtient ou définit une valeur qui indique la manière dont la propriété <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> doit être interprétée.</summary>
      <returns>Une des valeurs d'énumération <see cref="T:System.Data.CommandType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>Obtient ou définit le <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> utilisé par le <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
      <returns>Connexion utilisée par la commande d'entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>Crée et retourne un nouvel objet de paramètre qui représente un paramètre dans l'instruction Entity SQL</summary>
      <returns>Objet paramètre.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>Crée une nouvelle instance d'un objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
      <returns>Nouvelle instance d'un objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>Objet de connexion utilisé pour exécuter la commande</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>Collection de paramètres pour cette commande</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>Transaction dans laquelle cette commande s'exécute</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>Obtient ou définit une valeur qui indique si l'objet de commande doit être visible dans un contrôle du Concepteur Windows Form.</summary>
      <returns>true si l'objet command doit être visible dans un contrôle Concepteur Windows Form ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>Obtient ou définit une valeur qui indique si la mise en cache d'un plan de requête est activée.</summary>
      <returns>true si la mise en cache d'un plan de requête est activée ; sinon false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>Exécute la commande et retourne un lecteur de données pour la lecture des résultats</summary>
      <returns>Objet DbDataReader</returns>
      <param name="behavior">Comportement à utiliser lors de l'exécution de la commande</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Exécute la commande de façon asynchrone et retourne un lecteur de données pour la lecture des résultats</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un objet DbDataReader.</returns>
      <param name="behavior">Comportement à utiliser lors de l'exécution de la commande</param>
      <param name="cancellationToken">Jeton pour surveiller les demandes d'annulation</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>Exécute la commande actuelle.</summary>
      <returns>Nombre de lignes affectées.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone la commande et ignore tous les résultats de la commande</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre de lignes affectées.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>Exécute la commande et retourne un lecteur de données.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> qui contient les résultats.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Compile le <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> en arborescence de commandes et le passe au fournisseur de magasins sous-jacent en vue de son exécution, puis génère un <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> en dehors du jeu de résultats produit à l'aide du <see cref="T:System.Data.CommandBehavior" /> spécifié.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> qui contient les résultats.</returns>
      <param name="behavior">Une des valeurs de <see cref="T:System.Data.CommandBehavior" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>Exécute la commande de façon asynchrone et retourne un lecteur de données pour la lecture des résultats.Ne peut être appelée que sur CommandType.CommandText (sinon, utilisez les méthodes Execute* standard)</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un objet EntityDataReader.</returns>
      <exception cref="T:System.InvalidOperationException">Pour les commandes de procédure stockée, si elle est appelée pour un résultat de la collection de l'entité</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>Exécute la commande de façon asynchrone et retourne un lecteur de données pour la lecture des résultats.Ne peut être appelée que sur CommandType.CommandText (sinon, utilisez les méthodes Execute* standard)</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un objet EntityDataReader.</returns>
      <param name="behavior">Comportement à utiliser lors de l'exécution de la commande</param>
      <exception cref="T:System.InvalidOperationException">Pour les commandes de procédure stockée, si elle est appelée pour un résultat de la collection de l'entité</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Exécute la commande de façon asynchrone et retourne un lecteur de données pour la lecture des résultats.Ne peut être appelée que sur CommandType.CommandText (sinon, utilisez les méthodes Execute* standard)</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un objet EntityDataReader.</returns>
      <param name="behavior">Comportement à utiliser lors de l'exécution de la commande</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Pour les commandes de procédure stockée, si elle est appelée pour un résultat de la collection de l'entité</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>Exécute la commande de façon asynchrone et retourne un lecteur de données pour la lecture des résultats.Ne peut être appelée que sur CommandType.CommandText (sinon, utilisez les méthodes Execute* standard)</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un objet EntityDataReader.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Pour les commandes de procédure stockée, si elle est appelée pour un résultat de la collection de l'entité</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>Exécute la commande et retourne la première colonne de la première ligne du jeu de résultats.Les colonnes ou lignes supplémentaires sont ignorées.</summary>
      <returns>Première colonne de la première ligne du jeu de résultats, ou référence Null (Nothing en Visual Basic) si le jeu de résultats est vide.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>Obtient les paramètres de la procédure stockée ou de l'instruction Entity SQL.</summary>
      <returns>Paramètres de l'instruction Entity SQL ou de la procédure stockée.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>Compile la commande de niveau entité et crée une version préparée de la commande.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>Compile la commande de niveau entité et retourne le texte de la commande de magasin.</summary>
      <returns>Texte de commande de stockage.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>Obtient ou définit la transaction dans laquelle le <see cref="T:System.Data.SqlClient.SqlCommand" /> s'exécute.</summary>
      <returns>Transaction dans laquelle le <see cref="T:System.Data.SqlClient.SqlCommand" /> s'exécute.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>Obtient ou définit la manière dont les résultats des commandes sont appliqués aux lignes en cours de mise à jour.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.UpdateRowSource" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>Classe représentant une connexion pour la couche conceptuelle.Une connexion d'entité ne peut être initialisée qu'une seule fois (en ouvrant la connexion).Il est ensuite possible de modifier la chaîne de connexion, de joindre une nouvelle connexion du magasin, ou de modifier la chaîne de connexion du magasin.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> avec les <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> et <see cref="T:System.Data.Common.DbConnection" /> spécifiés.</summary>
      <param name="workspace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> à associer à ce <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</param>
      <param name="connection">Connexion à la source de données sous-jacente pour cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre workspace ou connection est null.</exception>
      <exception cref="T:System.ArgumentException">Le modèle conceptuel est absent de l'espace de travail. -ou- Le fichier de mappage est absent de l'espace de travail. -ou- Le modèle de stockage est absent de l'espace de travail. -ou- La connexion n'est pas dans un état fermé.</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">La connection ne provient pas d'un fournisseur compatible avec ADO.NET Entity Framework.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>Construit l'objet EntityConnection à partir des métadonnées chargées en mémoire</summary>
      <param name="workspace">Espace de travail contenant des informations de métadonnées</param>
      <param name="connection">Connexion du magasin.</param>
      <param name="entityConnectionOwnsStoreConnection">Si défini sur true, la connexion du magasin est supprimée en même temps que la connexion d'entité, sinon, l'appelant doit supprimer la connexion du magasin.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, selon la chaîne de connexion.</summary>
      <param name="connectionString">Chaîne de connexion spécifique au fournisseur.</param>
      <exception cref="T:System.ArgumentException">Un mot clé de chaîne de connexion non valide a été fourni ou un mot clé de chaîne de connexion obligatoire n'a pas été fourni.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>Commence une transaction de base de données</summary>
      <returns>Objet représentant la nouvelle transaction</returns>
      <param name="isolationLevel">Niveau d'isolation de la transaction</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>Commence une transaction à l'aide du fournisseur sous-jacent.</summary>
      <returns>Nouveau <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.L'instance <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> retournée peut être ultérieurement associée au <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> pour exécuter la commande dans le cadre de cette transaction.</returns>
      <exception cref="T:System.InvalidOperationException">Le fournisseur sous-jacent n'est pas connu. -ou- L'appel à <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> a été effectué sur un <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> qui comporte déjà une transaction actuelle. -ou- L'état de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> n'est pas <see cref="F:System.Data.ConnectionState.Open" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Commence une transaction avec le niveau d'isolation spécifié à l'aide du fournisseur sous-jacent.</summary>
      <returns>Nouveau <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.L'instance <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> retournée peut être ultérieurement associée au <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> pour exécuter la commande dans le cadre de cette transaction.</returns>
      <param name="isolationLevel">Niveau d'isolation de la transaction.</param>
      <exception cref="T:System.InvalidOperationException">Le fournisseur sous-jacent n'est pas connu. -ou- L'appel à <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> a été effectué sur un <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> qui comporte déjà une transaction actuelle. -ou- L'état de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> n'est pas <see cref="F:System.Data.ConnectionState.Open" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>Non pris en charge.</summary>
      <param name="databaseName">Non pris en charge.</param>
      <exception cref="T:System.NotSupportedException">Lorsque la méthode est appelée.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>Ferme la connexion à la base de données.</summary>
      <exception cref="T:System.InvalidOperationException">Une erreur s'est produite lors de la fermeture de la connexion.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>Obtient ou définit la chaîne de connexion <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Chaîne de connexion requise pour établir la connexion initiale à une source de données.La valeur par défaut est une chaîne vide.Sur une connexion fermée, c'est la valeur actuellement définie qui est retournée.Si aucune valeur n'a été définie, une chaîne vide est retournée.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>Obtient, en nombre de secondes, la durée d'attente préalable à l'établissement d'une connexion avant que la tentative ne soit abandonnée et qu'une erreur ne soit générée.</summary>
      <returns>Durée d'attente (en secondes) préalable à l'établissement d'une connexion.La valeur par défaut est le délai d'attente par défaut du fournisseur de données sous-jacent.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>Crée une instance d'un objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />, avec la propriété <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" /> ayant pour valeur <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le nom du fournisseur de données sous-jacent n'est pas connu.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>Crée un objet de commande qui utilise cet objet de connexion</summary>
      <returns>Objet de commande.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.CurrentTransaction">
      <summary>Obtient la transaction actuelle à laquelle cette connexion est inscrite.Ce paramètre peut être null.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>Obtient le nom de la base de données actuelle ou de celle à utiliser une fois la connexion établie.</summary>
      <returns>Valeur de la propriété Database du fournisseur de données sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>Obtient le nom ou l'adresse réseau de la source de données à laquelle se connecter.</summary>
      <returns>Nom de la source de données.La valeur par défaut est une chaîne vide.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>Obtient la fabrique de fournisseur associée à EntityConnection.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>Nettoie l'objet de connexion</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Inscrit ce <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> dans la transaction spécifiée.</summary>
      <param name="transaction">Objet de transaction dans lequel effectuer l'inscription.</param>
      <exception cref="T:System.InvalidOperationException">L'état du <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> n'est pas <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associé à cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associé à ce <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">La chaîne de connexion incluse contient une valeur de mot clé Metadata non valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>Établit une connexion à la source de données en appelant la méthode Open du fournisseur de données sous-jacent.</summary>
      <exception cref="T:System.InvalidOperationException">Une erreur se produit lorsque vous établissez la connexion ou le nom du fournisseur de données sous-jacent n'est pas connu.</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">La chaîne de connexion incluse contient une valeur de mot clé Metadata non valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>Établit une connexion asynchrone au magasin de données en appelant la méthode Open sur le fournisseur de données sous-jacent.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>Obtient une chaîne qui contient la version de la source de données à laquelle le client est connecté.</summary>
      <returns>Version de la source de données qui est contenue dans la chaîne de connexion du fournisseur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>Obtient l'état de l'objet EntityConnection, configuré pour effectuer le suivi de l'état de la connexion à la base de données sous-jacente qui est encapsulée par cet objet EntityConnection.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>Fournit l'accès à la connexion à la source de données sous-jacente qui est utilisée par l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> pour la connexion à la source de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>Classe représentant un générateur de chaînes de connexion pour le fournisseur EntityClient</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> à l'aide de la chaîne de connexion spécifiée.</summary>
      <param name="connectionString">Chaîne de connexion spécifique au fournisseur pour la source de données sous-jacente.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>Efface le contenu de l'instance de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Détermine si <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> contient une clé spécifique.</summary>
      <returns>Retourne true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> contient un élément qui possède la clé spécifiée ; sinon, false.</returns>
      <param name="keyword">Clé à rechercher dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> possède une taille fixe.</summary>
      <returns>Retourne true dans tous les cas, car <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> fournit une collection de taille fixe de paires mot clé/valeur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>Obtient ou définit la valeur associée à la clé spécifiée.En C#, cette propriété est l'indexeur.</summary>
      <returns>Valeur associée à la clé spécifiée.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>Obtient un objet <see cref="T:System.Collections.ICollection" /> qui contient les clés dans l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> qui contient les clés dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>Obtient ou définit l'emplacement des métadonnées dans la chaîne de connexion.</summary>
      <returns>Obtient ou définit l'emplacement des métadonnées dans la chaîne de connexion.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>Obtient ou définit le nom d'une section tel que défini dans un fichier de configuration.</summary>
      <returns>Nom d'une section dans un fichier de configuration.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>Obtient ou définit le nom du fournisseur de données .NET Framework sous-jacent dans la chaîne de connexion.</summary>
      <returns>Nom invariant du fournisseur de données .NET Framework sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>Obtient ou définit la chaîne de connexion interne, spécifique au fournisseur.</summary>
      <returns>Chaîne de connexion interne, spécifique au fournisseur.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>Supprime l'entrée contenant la clé spécifiée dans l'instance de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Retourne true si la clé existait dans la chaîne de connexion et a été supprimée ; false si la clé n'existait pas.</returns>
      <param name="keyword">Clé de la paire mot clé/valeur à supprimer de la chaîne de connexion dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">Le mot clé a la valeur Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Récupère une valeur correspondant à la clé fournie à partir de cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Retourne true si keyword est trouvé dans la chaîne de connexion ; sinon, false.</returns>
      <param name="keyword">Clé de l'élément à récupérer.</param>
      <param name="value">Valeur correspondant à keyword.</param>
      <exception cref="T:System.ArgumentNullException">keyword contient une valeur null (Nothing en Visual Basic).</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>Classe de lecteur de données du fournisseur EntityClient</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>Ferme l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>Obtient <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> pour ce <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" />.</summary>
      <returns>Informations d'un enregistrement de données.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>Obtient une valeur indiquant la profondeur d'imbrication de la ligne actuelle.</summary>
      <returns>Profondeur d'imbrication de la ligne actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>Libère les ressources utilisées par <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> et appelle <see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" />.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>Obtient le nombre de colonnes figurant dans la ligne actuelle.</summary>
      <returns>Nombre de colonnes figurant dans la ligne actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'une valeur Boolean.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un octet.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Lit un flux de données d'octets de la colonne spécifiée, en commençant à l'emplacement indiqué par dataIndex, dans la mémoire tampon, en commençant à l'emplacement indiqué par bufferIndex.</summary>
      <returns>Nombre réel d'octets lus.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
      <param name="dataOffset">Index figurant dans la ligne à partir de laquelle commencer l'opération de lecture.</param>
      <param name="buffer">Mémoire tampon dans laquelle copier les données.</param>
      <param name="bufferOffset">Index avec la mémoire tampon vers laquelle les données seront copiées.</param>
      <param name="length">Nombre maximal de caractères à lire.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un caractère unique.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Lit un flux de données de caractères de la colonne spécifiée, en commençant à l'emplacement indiqué par dataIndex, dans la mémoire tampon, en commençant à l'emplacement indiqué par bufferIndex.</summary>
      <returns>Nombre réel de caractères lus.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
      <param name="dataOffset">Index figurant dans la ligne à partir de laquelle commencer l'opération de lecture.</param>
      <param name="buffer">Mémoire tampon dans laquelle copier les données.</param>
      <param name="bufferOffset">Index avec la mémoire tampon vers laquelle les données seront copiées.</param>
      <param name="length">Nombre maximal de caractères à lire.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>Retourne des lecteurs imbriqués sous la forme d'objets <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Lecteurs imbriqués sous la forme d'objets <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Ordinal de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>Retourne un <see cref="T:System.Data.Common.DbDataRecord" /> imbriqué.</summary>
      <returns>Enregistrement de données imbriqué.</returns>
      <param name="i">Numéro du DbDataRecord à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>Obtient le nom du type de données de la colonne spécifiée.</summary>
      <returns>Nom du type de données.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un objet <see cref="T:System.DateTime" />.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>Retourne un objet <see cref="T:System.Data.Common.DbDataReader" /> pour l'ordinal de colonne demandé qui peut être substitué par une implémentation spécifique au fournisseur.</summary>
      <returns>Lecteur de données.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un objet <see cref="T:System.Decimal" />.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un nombre à virgule flottante double précision.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>Retourne un objet <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein des lignes dans le lecteur de données.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein des lignes dans le lecteur de données.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>Obtient le type de données de la colonne spécifiée.</summary>
      <returns>Type de données de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un nombre à virgule flottante simple précision.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un identificateur global unique (GUID, Globally Unique IDentifier).</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un entier signé 16 bits.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un entier signé 32 bits.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'un entier signé 64 bits.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>Obtient le nom de la colonne, en fonction du numéro de colonne de base zéro.</summary>
      <returns>Nom de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>Obtient l'ordinal de colonne, en fonction du nom de la colonne.</summary>
      <returns>Numéro de colonne de base zéro.</returns>
      <param name="name">Nom de la colonne.</param>
      <exception cref="T:System.IndexOutOfRangeException">Le nom spécifié n'est pas un nom de colonne valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Retourne le type de champ spécifique au fournisseur de la colonne spécifiée.</summary>
      <returns>Objet <see cref="T:System.Type" /> qui décrit le type de données de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'une instance de l'objet <see cref="T:System.Object" />.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Obtient toutes les colonnes d'attributs spécifiques au fournisseur figurant dans la collection de la ligne actuelle.</summary>
      <returns>Nombre d'instances de l'objet <see cref="T:System.Object" /> dans le tableau.</returns>
      <param name="values">Tableau d'objets <see cref="T:System.Object" /> dans lequel copier les colonnes d'attributs.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>Retourne un <see cref="T:System.Data.DataTable" /> qui décrit les métadonnées de colonne de <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> qui décrit les métadonnées de colonne.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'une instance de l'objet <see cref="T:System.String" />.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'une instance de l'objet <see cref="T:System.Object" />.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>Remplit un tableau d'objets avec les valeurs de colonne de la ligne actuelle.</summary>
      <returns>Nombre d'instances de l'objet <see cref="T:System.Object" /> dans le tableau.</returns>
      <param name="values">Tableau d'objets <see cref="T:System.Object" /> dans lequel copier les colonnes d'attributs.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>Obtient une valeur qui indique si cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> contient une ou plusieurs lignes.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> contient une ou plusieurs lignes ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>Obtient une valeur indiquant si l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> est fermé.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> est fermé ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>Obtient une valeur qui indique si la colonne contient des valeurs inexistantes ou manquantes.</summary>
      <returns>true si la colonne spécifiée équivaut à <see cref="T:System.DBNull" /> ; sinon, false.</returns>
      <param name="ordinal">Numéro de colonne de base zéro.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'une instance de l'objet <see cref="T:System.Object" />.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>Obtient la valeur de la colonne spécifiée sous la forme d'une instance de l'objet <see cref="T:System.Object" />.</summary>
      <returns>Valeur de la colonne spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>Avance le lecteur jusqu'au résultat suivant lors de la lecture des résultats d'un lot d'instructions.</summary>
      <returns>true s'il existe des jeux de résultats supplémentaires ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>Avance le lecteur de façon asynchrone jusqu'au jeu de résultats suivant lors de la lecture des résultats d'un lot d'instructions</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur True s'il existe des jeux de résultats supplémentaires ; sinon, false.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>Avance le lecteur jusqu'à l'enregistrement suivant d'un jeu de résultats.</summary>
      <returns>true s'il existe des lignes supplémentaires ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>Déplace de façon asynchrone le lecteur jusqu'à la ligne suivante du jeu de résultats actuel</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur true s'il existe des lignes supplémentaires ; sinon, false.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>Obtient le nombre de lignes modifiées, insérées ou supprimées par l'exécution de l'instruction SQL.</summary>
      <returns>Nombre de lignes modifiées, insérées ou supprimées.Retourne -1 pour les instructions SELECT ; 0 si aucune ligne n'a été affectée ou si l'instruction a échoué.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>Obtient le nombre de champs dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> qui ne sont pas masqués.</summary>
      <returns>Nombre de champs qui ne sont pas masqués.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>Classe représentant un paramètre utilisé dans EntityCommand</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à l'aide des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à l'aide du nom du paramètre et du type de données spécifiés.</summary>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="dbType">Une des valeurs de <see cref="T:System.Data.DbType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à l'aide du nom du paramètre, du type de données et de la taille spécifiés.</summary>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="dbType">Une des valeurs de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Taille du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à l'aide des propriétés spécifiées.</summary>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="dbType">Une des valeurs de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Taille du paramètre.</param>
      <param name="direction">Une des valeurs de <see cref="T:System.Data.ParameterDirection" />.</param>
      <param name="isNullable">true pour indiquer que le paramètre accepte les valeurs Null ; sinon, false.</param>
      <param name="precision">Nombre de chiffres utilisé pour représenter la valeur.</param>
      <param name="scale">Nombre de décimales appliqué à la résolution de la valeur.</param>
      <param name="sourceColumn">Nom de la colonne source.</param>
      <param name="sourceVersion">Une des valeurs de <see cref="T:System.Data.DataRowVersion" />.</param>
      <param name="value">Valeur du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à l'aide des propriétés spécifiées.</summary>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="dbType">Une des valeurs de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Taille du paramètre.</param>
      <param name="sourceColumn">Nom de la colonne source.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>Obtient ou définit le <see cref="T:System.Data.DbType" /> du paramètre.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.DbType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>Obtient ou définit la direction du paramètre.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.ParameterDirection" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>Obtient ou définit le type du paramètre sous la forme d'un EdmType.</summary>
      <returns>Type du paramètre sous la forme d'un EdmType.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>Obtient ou définit une valeur qui indique si le paramètre accepte les valeurs Null.</summary>
      <returns>true si les valeurs Null sont acceptées ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>Obtient ou définit le nom du paramètre d'entité.</summary>
      <returns>Nom du paramètre d'entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>Obtient ou définit le nombre de chiffres utilisés pour représenter la propriété <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Nombre de chiffres utilisé pour représenter la valeur.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>Rétablit le type associé au <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>Obtient ou définit le nombre de décimales appliqué à la résolution de <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Nombre de décimales appliqué à la résolution de la valeur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>Obtient ou définit la taille maximale des données figurant dans la colonne.</summary>
      <returns>Taille maximale des données figurant dans la colonne.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>Obtient ou définit le nom de la colonne source mappée à <see cref="T:System.Data.DataSet" /> et utilisée pour charger et retourner <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Nom de la colonne source mappée au jeu de données et utilisée pour charger et retourner la valeur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>Obtient ou définit une valeur qui indique si la colonne source est nullable.</summary>
      <returns>true si la colonne source est nullable ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>Obtient ou définit la <see cref="T:System.Data.DataRowVersion" /> à utiliser lors du chargement de la valeur.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.DataRowVersion" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>Retourne une représentation sous forme de chaîne du paramètre.</summary>
      <returns>Représentation sous forme de chaîne du paramètre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>Obtient ou définit la valeur du paramètre.</summary>
      <returns>Valeur du paramètre.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>Classe représentant une collection de paramètres utilisée dans EntityCommand</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Ajoute l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié à <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Nouvel objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="value">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié dans le paramètre value est déjà ajouté à cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> ou à un autre.</exception>
      <exception cref="T:System.InvalidCastException">Le paramètre passé n'était pas un <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre value a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>Ajoute l'objet spécifié à <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Index du nouvel objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="value">Élément <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Ajoute un objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> en fonction du nom du paramètre et du type de données.</summary>
      <returns>Nouvel objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="dbType">Une des valeurs de <see cref="T:System.Data.DbType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>Ajoute un objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> avec le nom du paramètre, le type de données et la longueur de la colonne.</summary>
      <returns>Nouvel objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="dbType">Une des valeurs de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Longueur de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>Ajoute un tableau de valeurs à la fin de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Valeurs <see cref="T:System.Array" /> à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>Ajoute un tableau de valeurs <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à la fin de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Valeurs <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Ajoute une valeur à la fin de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Nom du paramètre.</param>
      <param name="value">Valeur à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>Supprime tous les objets <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>Détermine si l'objet <see cref="T:System.Object" /> spécifié se trouve dans cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> contient la valeur ; sinon, false.</returns>
      <param name="value">Valeur <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>Détermine si l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié se trouve dans cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> contient la valeur ; sinon, false.</returns>
      <param name="parameterName">Valeur <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie tous les éléments de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actuel dans le <see cref="T:System.Array" /> unidimensionnel spécifié, à partir de l'index <see cref="T:System.Array" /> de destination spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actuel.</param>
      <param name="index">Entier 32 bits qui représente l'index de l'objet <see cref="T:System.Array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>Copie tous les éléments de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actuel dans l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> spécifié à partir de l'index de destination donné.</summary>
      <param name="array">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> qui constitue la destination des éléments copiés à partir de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actuel.</param>
      <param name="index">Entier 32 bits qui représente l'index de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>Obtient un entier qui contient le nombre d'éléments figurant dans l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Nombre d'éléments figurant dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, sous forme d'entier.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>Renvoie un énumérateur qui effectue une itération au sein de la <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> pour l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Obtient l'emplacement de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié dans la collection.</summary>
      <returns>Emplacement de base zéro de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié qui est un <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> dans la collection.Retourne -1 lorsque l'objet n'existe pas dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à rechercher.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>Obtient l'emplacement de l'objet <see cref="T:System.Object" /> spécifié dans la collection.</summary>
      <returns>Emplacement de base zéro de l'objet <see cref="T:System.Object" /> spécifié qui est un <see cref="T:System.Object" /> dans la collection.Retourne -1 lorsque l'objet n'existe pas dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>Obtient l'emplacement de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié portant le nom donné.</summary>
      <returns>Emplacement de base zéro de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié portant le nom donné, qui respecte la casse.Retourne -1 lorsque l'objet n'existe pas dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
      <param name="parameterName">Nom qui respecte la casse de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à rechercher.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Insère un objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> à l'index spécifié.</summary>
      <param name="index">Index de base zéro auquel la valeur doit être insérée.</param>
      <param name="value">Objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à insérer dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Insère <see cref="T:System.Object" /> dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro auquel la valeur doit être insérée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à insérer dans <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> possède une taille fixe.</summary>
      <returns>Retourne true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> est de taille fixe ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> est en lecture seule.</summary>
      <returns>Retourne true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> est synchronisé.</summary>
      <returns>Retourne true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> est synchronisé ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>Obtient l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à l'index spécifié.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à l'index spécifié.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>Obtient l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> portant le nom spécifié.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> portant le nom spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Supprime l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à supprimer de la collection.</param>
      <exception cref="T:System.InvalidCastException">Le paramètre n'est pas un <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.SystemException">Le paramètre n'existe pas dans la collection.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>Supprime le paramètre spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.Object" /> à supprimer de la collection.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>Supprime l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> à l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>Supprime l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> au niveau du nom de paramètre spécifié.</summary>
      <param name="parameterName">Nom de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> à supprimer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>Classe qui représente une fabrique de fournisseurs du fournisseur EntityClient</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>Retourne une nouvelle instance de la classe du fournisseur qui implémente la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>Lève <see cref="T:System.NotSupportedException" />.Cette méthode n'est actuellement pas prise en charge.</summary>
      <returns>Cette méthode n'est actuellement pas prise en charge.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>Retourne une nouvelle instance de la classe du fournisseur qui implémente la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>Retourne une nouvelle instance de la classe du fournisseur qui implémente la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>Lève <see cref="T:System.NotSupportedException" />.Cette méthode n'est actuellement pas prise en charge.</summary>
      <returns>Cette méthode n'est actuellement pas prise en charge.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>Retourne une nouvelle instance de la classe du fournisseur qui implémente la classe <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Lève <see cref="T:System.NotSupportedException" />.Cette méthode n'est actuellement pas prise en charge.</summary>
      <returns>Cette méthode n'est actuellement pas prise en charge.</returns>
      <param name="state">Cette méthode n'est actuellement pas prise en charge.</param>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>Objet singleton pour l'objet de fabrique du fournisseur EntityClient.Cela reste un champ public (pas une propriété) car DbProviderFactory attend un champ.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>Retourne la classe <see cref="T:System.IServiceProvider" /> demandée.</summary>
      <returns>Nouvelle instance de <see cref="T:System.IServiceProvider" />.Les types pris en charge sont <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" /> et <see cref="T:System.Data.IEntityAdapter" />.Retourne null (ou Nothing en Visual Basic) pour les autres types.</returns>
      <param name="serviceType">Objet <see cref="T:System.Type" /> à retourner.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>Classe représentant une transaction pour la couche conceptuelle</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>Valide la transaction sous-jacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>Obtient <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> pour ce <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.</summary>
      <returns>Connexion <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> à la source de données sous-jacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>Objet de connexion détenant cet objet de transaction</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>Nettoie cet objet de transaction</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>Obtient le niveau d'isolation de cet objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.</summary>
      <returns>Valeur d'énumération <see cref="T:System.Data.IsolationLevel" /> qui représente le niveau d'isolation de la transaction sous-jacente.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>Restaure la transaction sous-jacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.StoreTransaction">
      <summary>Obtient le DbTransaction de la transaction du fournisseur sous-jacent.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
      <summary>Représente les métadonnées de mappage pour un AssociationSet dans l'espace CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialise une nouvelle instance AssociationSetMapping.</summary>
      <param name="associationSet">Ensemble d'associations à mapper.</param>
      <param name="storeEntitySet">Jeu d'entités du magasin à mapper.</param>
      <param name="containerMapping">Mappage du conteneur parent.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Ajoute une condition de mappage de propriété.</summary>
      <param name="condition">Condition à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
      <summary>Obtient l'ensemble d'associations qui est mappé.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
      <summary>Obtient le mappage de type d'association contenu.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
      <summary>Obtient les conditions de mappage de propriété.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
      <summary>Obtient ou définit le mappage de fonction correspondant.Peut être Null.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Supprime une condition de mappage de propriété.</summary>
      <param name="condition">Condition de mappage de propriété à supprimer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
      <summary>Obtient ou définit le mappage de propriété de terminaison source.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
      <summary>Obtient le jeu d'entités du magasin qui est mappé.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
      <summary>Obtient ou définit le mappage de propriété de terminaison cible.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
      <summary>Décrit les mappages de fonction de modification pour un ensemble d'associations.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping" />.</summary>
      <param name="associationSet">Ensemble d'associations.</param>
      <param name="deleteFunctionMapping">Mappage de fonction de suppression.</param>
      <param name="insertFunctionMapping">Mappage de fonction d'insertion.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
      <summary>Obtient l'ensemble d'associations.</summary>
      <returns>Ensemble d'associations.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Obtient le mappage de fonction de suppression.</summary>
      <returns>Mappage de fonction de suppression.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
      <summary>Obtient le mappage de fonction d'insertion.</summary>
      <returns>Mappage de fonction d'insertion.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString">
      <summary>Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de la valeur de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
      <summary>Représente les métadonnées de mappage pour un type d'association dans l'espace CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Crée une instance AssociationTypeMapping.</summary>
      <param name="associationSetMapping">AssociationSetMapping qui contient cet AssociationTypeMapping.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
      <summary>Obtient l'AssociationSetMapping qui contient cet AssociationTypeMapping.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
      <summary>Obtient le type d'association en cours de mappage.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
      <summary>Obtient le seul fragment de mappage.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
      <summary>Métadonnées de mappage des propriétés complexes.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Construit un nouvel objet de mappage de propriété complexe</summary>
      <param name="property">Objet MemberMetadata qui représente ce membre complexe</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Ajoute un mappage de type correspondant à un type complexe imbriqué.</summary>
      <param name="typeMapping">Mappage de type complexe à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Supprime un mappage de type correspondant à un type complexe imbriqué.</summary>
      <param name="typeMapping">Mappage de type complexe à supprimer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
      <summary>Obtient une collection de mappages de type en lecture seule correspondant aux types complexes imbriqués.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
      <summary>Métadonnées de mappage pour les types complexes.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Crée une instance ComplexTypeMapping.</summary>
      <param name="complexType">ComplexType en cours de mappage.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Ajoute une condition de mappage de propriété.</summary>
      <param name="condition">Condition de mappage de propriété à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Ajoute un mappage de propriété.</summary>
      <param name="propertyMapping">Mappage de propriété à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
      <summary>Obtient le ComplexType en cours de mappage.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
      <summary>Obtient une collection en lecture seule des conditions de mappage de propriété.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
      <summary>Obtient une collection en lecture seule des mappages de propriété.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Supprime une condition de mappage de propriété.</summary>
      <param name="condition">Condition de mappage de propriété à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Supprime un mappage de propriété.</summary>
      <param name="propertyMapping">Mappage de propriété à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
      <summary>Métadonnées de mappage pour le mappage de la propriété conditionnelle sur un type.Le mappage de la propriété de condition spécifie une condition sur la propriété côté C ou sur la propriété côté S.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
      <summary>Obtient un EdmProperty qui spécifie la colonne mappée.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
      <summary>Obtient un EdmProperty qui spécifie la propriété mappée.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
      <summary>Métadonnées de mappage pour la propriété de terminaison d'une association.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
      <summary>Crée un mappage de propriété de terminaison d'association.</summary>
      <param name="associationEnd">AssociationEndMember qui spécifie la terminaison d'association à mapper.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Ajoute un mappage de colonne de propriété enfant.</summary>
      <param name="propertyMapping">ScalarPropertyMapping qui spécifie le mappage de colonne de propriété à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
      <summary>Obtient un AssociationEndMember qui spécifie la terminaison d'association mappée.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
      <summary>Obtient un ReadOnlyCollection de ScalarPropertyMapping qui spécifie les enfants de ce mappage de propriété de terminaison d'association.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Supprime un mappage de colonne de propriété enfant.</summary>
      <param name="propertyMapping">ScalarPropertyMapping qui spécifie le mappage de colonne de propriété à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
      <summary>Représente les métadonnées de mappage pour un mappage EntityContainer dans l'espace CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.EntityContainerMapping" />.</summary>
      <param name="conceptualEntityContainer">Conteneur d'entités conceptuel à mapper.</param>
      <param name="storeEntityContainer">Conteneur d'entités de magasin à mapper.</param>
      <param name="mappingItemCollection">Collection parente d'éléments de mappage.</param>
      <param name="generateUpdateViews">Indicateur signalant s'il faut générer des vues de mise à jour.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Ajoute un mappage d'importation de fonction.</summary>
      <param name="functionImportMapping">Mappage d'importation de fonction à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Ajoute un mappage d'ensemble d'associations.</summary>
      <param name="setMapping">Mappage d'ensemble d'associations à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Ajoute un mappage de jeu d'entités.</summary>
      <param name="setMapping">Mappage de jeu d'entités à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
      <summary>Obtient les mappages d'ensembles d'associations.</summary>
      <returns>Mappages d'ensembles d'associations.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
      <summary>Obtient le genre de type de cet élément.</summary>
      <returns>Genre de type de cet élément.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
      <summary>Obtient le conteneur d'entités conceptuel.</summary>
      <returns>Conteneur d'entités conceptuel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
      <summary>Obtient les mappages de jeu d'entités.</summary>
      <returns>Mappages de jeux d'entités.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
      <summary>Obtient les mappages d'importation de fonction.</summary>
      <returns>Mappages d'importation de fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
      <summary>Obtient un indicateur qui signale s'il faut générer les vues de mise à jour.</summary>
      <returns>true pour générer les vues de mise à jour ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
      <summary>Obtient la collection parente d'éléments de mappage.</summary>
      <returns>Collection parente d'éléments de mappage.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Supprime un mappage d'importation de fonction.</summary>
      <param name="functionImportMapping">Mappage d'importation de fonction à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Supprime un mappage d'ensemble d'associations.</summary>
      <param name="setMapping">Mappage d'ensemble d'associations à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Supprime un mappage d'ensemble d'associations.</summary>
      <param name="setMapping">Mappage d'ensemble d'associations à supprimer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
      <summary>Obtient le conteneur d'entités de magasin.</summary>
      <returns>Conteneur d'entités de magasin.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
      <summary>Représente les métadonnées de mappage pour un Extent dans l'espace CS.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
      <summary>Obtient le mappage du conteneur parent.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
      <summary>Obtient ou définit l'affichage des requêtes associé à ce mappage.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
      <summary>Représente les métadonnées de mappage pour un EntitySet dans l'espace CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialise une nouvelle instance EntitySetMapping.</summary>
      <param name="entitySet">Jeu d'entités à mapper.</param>
      <param name="containerMapping">Mappage du conteneur parent.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Ajoute un mappage de fonction.</summary>
      <param name="modificationFunctionMapping">Mappage de fonction à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Ajoute un mappage de type.</summary>
      <param name="typeMapping">Mappage de type à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
      <summary>Obtient le jeu d'entités qui est mappé.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
      <summary>Obtient les mappages de types d'entité contenus.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
      <summary>Obtient les mappages de fonction correspondants.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Supprime un mappage de fonction.</summary>
      <param name="modificationFunctionMapping">Mappage de fonction à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Supprime un mappage de type.</summary>
      <param name="typeMapping">Mappage de type à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
      <summary>Métadonnées de mappage pour le type d'entité.Si un EntitySet représente les entités de plusieurs types, il y aura plusieurs EntityTypeMapping pour un EntitySet (par exemple, si l'extension d'entité PersonSet représente des entités de types Person et Customer, il y aura deux mappages EntityType sous le mappage de PersonSet).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Crée une instance EntityTypeMapping.</summary>
      <param name="entitySetMapping">EntitySetMapping qui contient cet EntityTypeMapping.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Ajoute un fragment de mappage.</summary>
      <param name="fragment">Fragment de mappage à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Ajoute une hiérarchie des types d'entités au mappage.Cette hiérarchie est représentée par le type d'entité racine spécifié.</summary>
      <param name="type">EntityType racine de la hiérarchie à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Ajoute un type d'entité au mappage.</summary>
      <param name="type">EntityType à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
      <summary>Obtient l'EntitySetMapping qui contient cet EntityTypeMapping.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
      <summary>Obtient le seul EntityType en cours de mappage.Lève une exception en cas de mappage de type de hiérarchie.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
      <summary>Obtient les types d'entités mappés.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
      <summary>Obtient une collection en lecture seule des fragments de mappage.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
      <summary>Obtient un indicateur signalant s'il s'agit d'un mappage de hiérarchie des types.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
      <summary>Obtient les types de base mappés pour un mappage de hiérarchie.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Supprime un fragment de mappage.</summary>
      <param name="fragment">Fragment de mappage à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Supprime une hiérarchie des types d'entités du mappage.Cette hiérarchie est représentée par le type d'entité racine spécifié.</summary>
      <param name="type">EntityType racine de la hiérarchie à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Supprime un type d'entité du mappage.</summary>
      <param name="type">EntityType à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
      <summary>Décrit les mappages des fonctions de modification d'un type d'entité dans un jeu d'entités.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />.</summary>
      <param name="entityType">Type d'entité EDM.</param>
      <param name="deleteFunctionMapping">Mappage pour la suppression d'une fonction.</param>
      <param name="insertFunctionMapping">Mappage pour l'insertion d'une fonction.</param>
      <param name="updateFunctionMapping">Mappage pour la mise à jour d'une fonction.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Obtenir le mappage pour la suppression d'une fonction.</summary>
      <returns>Mappage pour la suppression d'une fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
      <summary>Obtient le type d'entité EDM.</summary>
      <returns>Type d'entité EDM.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
      <summary>Obtenir le mappage pour l'insertion d'une fonction.</summary>
      <returns>Mappage pour l'insertion d'une fonction.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString">
      <summary>Retourne une représentation sous forme de chaîne de l'objet <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />.</summary>
      <returns>Représentation sous forme de chaîne de l'objet <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
      <summary>Obtenir le mappage pour la mise à jour d'une fonction.</summary>
      <returns>Mappage pour la mise à jour d'une fonction.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>Classe de base pour le type créé au moment de la conception pour stocker les vues générées.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>Obtient ou définit le nom de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Nom du conteneur.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>Retourne la paire clé/valeur au niveau de l'index spécifié qui contient la vue et sa clé.</summary>
      <returns>Paire clé/valeur au niveau de l'index, qui contient la vue et sa clé.</returns>
      <param name="index">Index de la vue.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>Valeur de hachage des vues.</summary>
      <returns>Valeur de hachage.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>Valeur de hachage.</summary>
      <returns>Valeur de hachage.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>Obtient ou définit <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> dans le schéma de stockage.</summary>
      <returns>Nom du conteneur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>Obtient ou définit le nombre de vues.</summary>
      <returns>Nombre de vues.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>Attribut utilisé pour marquer les assemblys qui contiennent le type des vues générées.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" />.</summary>
      <param name="viewGenerationType">Type de la vue.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>Obtient la valeur T:System.Type de la vue.</summary>
      <returns>Valeur T:System.Type de la vue.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
      <summary>Représente un mappage de type complexe pour un résultat d'importation de fonction.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
      <summary>Initialise une nouvelle instance FunctionImportComplexTypeMapping.</summary>
      <param name="returnType">Type de retour.</param>
      <param name="properties">Mappages de propriété du type de résultat d'une importation de fonction.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
      <summary>Obtient le type de retour.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
      <summary>Représente un mappage de type d'entité d'importation de fonction.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
      <summary>Initialise une nouvelle instance FunctionImportEntityTypeMapping.</summary>
      <param name="isOfTypeEntityTypes">Types d'entité à la base des hiérarchies de types à mapper.</param>
      <param name="entityTypes">Types d'entité à mapper.</param>
      <param name="properties">Mappages de propriété pour les types de résultat d'une importation de fonction.</param>
      <param name="conditions">Conditions de mappage.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
      <summary>Obtient les conditions de mappage.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
      <summary>Obtient les types d'entité en cours de mappage.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
      <summary>Obtient les types d'entité à la base des hiérarchies en cours de mappage.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
      <summary>Représente une condition de mappage pour un résultat d'importation de fonction.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
      <summary>Obtient le nom de la colonne utilisée pour évaluer la condition.</summary>
      <returns>Nom de la colonne utilisée pour évaluer la condition.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString">
      <summary>Convertit la valeur de l'instance actuelle en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de cette instance actuelle.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
      <summary>Représente une condition de mappage pour le résultat d'une importation de fonction évaluée en déterminant si une valeur est Null ou non Null.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance FunctionImportEntityTypeMappingConditionIsNull.</summary>
      <param name="columnName">Nom de la colonne utilisée pour évaluer la condition.</param>
      <param name="isNull">Indicateur qui signale si une vérification de valeur Null ou non Null est effectuée.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
      <summary>Obtient un indicateur qui signale si une vérification de valeur Null ou non Null est effectuée.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
      <summary>Représente une condition de mappage pour le résultat d'une importation de fonction, évalué par comparaison à une valeur spécifiée.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
      <summary>Initialise une nouvelle instance FunctionImportEntityTypeMappingConditionValue.</summary>
      <param name="columnName">Nom de la colonne utilisée pour évaluer la condition.</param>
      <param name="value">Valeur à comparer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
      <summary>Obtient la valeur utilisée pour la comparaison.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
      <summary>Représente un mappage d'une importation de fonction de modèle sur une fonction composable ou non composable de magasin.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
      <summary>Obtient la fonction de modèle (ou la source du mappage)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
      <summary>Obtient la fonction de magasin (ou la cible du mappage)</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
      <summary>Représente un mappage d'une importation de fonction de modèle sur une fonction composable de magasin.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialise une nouvelle instance FunctionImportMappingComposable.</summary>
      <param name="functionImport">Importation de fonction de modèle.</param>
      <param name="targetFunction">Fonction composable de magasin.</param>
      <param name="resultMapping">Mappage des résultats de l'importation de fonction.</param>
      <param name="containerMapping">Mappage du conteneur parent.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
      <summary>Obtient le mappage des résultats de l'importation de fonction.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
      <summary>Représente un mappage d'une importation de fonction de modèle à une fonction non composable de magasin.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Initialise une nouvelle instance FunctionImportMappingNonComposable.</summary>
      <param name="functionImport">Importation de fonction de modèle.</param>
      <param name="targetFunction">Fonction non composable de magasin.</param>
      <param name="resultMappings">Mappages des résultats d'importation de fonction.</param>
      <param name="containerMapping">Mappage du conteneur parent.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
      <summary>Obtient les mappages des résultats d'importation de fonction.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
      <summary>Représente un mappage de résultats d'une importation de fonction.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Ajoute un mappage de type.</summary>
      <param name="typeMapping">Mappage de type à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Supprime un mappage de type.</summary>
      <param name="typeMapping">Mappage de type à supprimer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
      <summary>Obtient les mappages de type.</summary>
      <returns>Mappages de type.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
      <summary>Classe de base pour mapper une propriété d'un type de retour d'importation de fonction.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
      <summary>Mappe une propriété de type de retour d'importation de fonction à une colonne de table.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance FunctionImportReturnTypeScalarPropertyMapping.</summary>
      <param name="propertyName">Nom de la propriété mappée.</param>
      <param name="columnName">Nom de la colonne mappée.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
      <summary>Obtient le nom de la colonne mappée.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
      <summary>Obtient le nom de la propriété mappée.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
      <summary>Spécifie un mappage de type structurel d'importation de fonction.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
      <summary>Obtient les mappages de propriété du type de résultat d'une importation de fonction.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
      <summary>Spécifie une condition de mappage évaluée en déterminant si la valeur de la propriété ou de la colonne est Null ou non Null.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
      <summary>Crée une instance IsNullConditionMapping.</summary>
      <param name="propertyOrColumn">EdmProperty qui spécifie une propriété ou une colonne.</param>
      <param name="isNull">Valeur booléenne qui indique s'il faut vérifier si la valeur est Null ou non Null.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
      <summary>Obtient une valeur booléenne qui indique si la condition est évaluée en vérifiant si la valeur est Null ou non Null.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
      <summary>Représente une classe d'élément de base pour toutes les métadonnées de mappage</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
      <summary>Représente les métadonnées pour le fragment de mappage.Un jeu de fragments de mappage compose les mappages définis (EntitySet, AssociationSet ou CompositionSet). Chaque MappingFragment fournit le mappage des propriétés d'un type mappé à une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
      <summary>Crée une instance MappingFragment.</summary>
      <param name="storeEntitySet">EntitySet correspondant à la table de la vue en cours de mappage.</param>
      <param name="typeMapping">TypeMapping qui contient ce MappingFragment.</param>
      <param name="makeColumnsDistinct">Indicateur qui signale s'il faut inclure « DISTINCT » lors de la génération de requêtes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Ajoute une condition de mappage de propriété.</summary>
      <param name="condition">Condition de mappage de propriété à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Ajoute un mappage de propriété.</summary>
      <param name="propertyMapping">Mappage de propriété à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
      <summary>Obtient une collection en lecture seule des conditions de mappage de propriété.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
      <summary>Obtient un indicateur qui signale s'il faut inclure « DISTINCT » lors de la génération de requêtes.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
      <summary>Obtient une collection en lecture seule des mappages de propriété.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Supprime une condition de mappage de propriété.</summary>
      <param name="condition">Condition de mappage de propriété à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Supprime un mappage de propriété.</summary>
      <param name="propertyMapping">Mappage de propriété à supprimer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
      <summary>Obtient l'EntitySet correspondant à la table ou à la vue en cours de mappage.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
      <summary>Obtient le TypeMapping qui contient ce MappingFragment.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
      <summary>Représente une classe de base des éléments dans l'espace de mappage (DataSpace.CSSpace).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingItem.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.MappingItem" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>Classe pour représenter une collection d'éléments de mappage dans l'espace EDM.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
      <summary>Décrit la liaison de fonction de modification pour le traitement des modifications d'entités ou d'associations.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping" />.</summary>
      <param name="entitySet">Jeu d'entités ou ensemble d'associations.</param>
      <param name="entityType">Type d'entité ou d'association.</param>
      <param name="function">Métadonnées de la fonction à laquelle la liaison doit être effectuée.</param>
      <param name="parameterBindings">Liaisons des paramètres de fonction.</param>
      <param name="rowsAffectedParameter">Paramètre de sortie indiquant le nombre de lignes affectées.</param>
      <param name="resultBindings">Liaisons des résultats de l'évaluation de la fonction.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
      <summary>Obtient les métadonnées de la fonction à laquelle la liaison doit être effectuée.</summary>
      <returns>Métadonnées de la fonction à laquelle la liaison doit être effectuée.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
      <summary>Obtient les liaisons des paramètres de fonction.</summary>
      <returns>Liaisons des paramètres de fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
      <summary>Obtient les liaisons des résultats de l'évaluation de la fonction.</summary>
      <returns>Liaisons des résultats de l'évaluation de la fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
      <summary>Obtient le paramètre de sortie indiquant le nombre de lignes affectées.Ce paramètre peut être null.</summary>
      <returns>Paramètre de sortie indiquant le nombre de lignes affectées.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString">
      <summary>Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
      <summary>Décrit l'emplacement d'un membre dans une structure de type d'entité ou d'association.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath" />.</summary>
      <param name="members">Membres se trouvant dans le chemin d'accès de la feuille (le membre en cours de liaison) à la racine de la structure.</param>
      <param name="associationSet">Ensemble d'associations vers lequel nous naviguons via ce membre.Si la valeur est Null, il ne s'agit pas d'un chemin d'accès de membre de navigation.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
      <summary>Obtient l'ensemble d'associations vers lequel nous naviguons via ce membre.Si la valeur est Null, il ne s'agit pas d'un chemin d'accès de membre de navigation.</summary>
      <returns>Ensemble d'associations vers lequel nous naviguons via ce membre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
      <summary>Obtient les membres dans le chemin d'accès de la feuille (le membre en cours de liaison) à la racine de la structure.</summary>
      <returns>Membres se trouvant dans le chemin d'accès de la feuille (le membre en cours de liaison) à la racine de la structure.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString">
      <summary>Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de la valeur de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
      <summary>Représente la liaison d'un paramètre de fonction de modification à un membre de l'entité ou de l'association en cours de modification.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding" />.</summary>
      <param name="parameter">Paramètre prenant la valeur.</param>
      <param name="memberPath">Chemin d'accès au membre d'entité ou d'association définissant la valeur.</param>
      <param name="isCurrent">true pour lier la valeur de membre d'origine ou actuelle ; sinon, false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
      <summary>Obtient un indicateur signalant si la valeur de membre d'origine ou actuelle est en cours de liaison.</summary>
      <returns>true si la valeur de membre d'origine ou actuelle est en cours de liaison ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
      <summary>Obtient le chemin d'accès au membre d'entité ou d'association définissant la valeur.</summary>
      <returns>Chemin d'accès au membre d'entité ou d'association définissant la valeur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
      <summary>Obtient le paramètre prenant la valeur.</summary>
      <returns>Paramètre prenant la valeur.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString">
      <summary>Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente à l'aide du format spécifié.</summary>
      <returns>Représentation sous forme de chaîne de la valeur de cette instance comme spécifié par le format.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
      <summary>Définit une liaison d'une colonne nommée du jeu de résultats à un membre prenant la valeur.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding" />.</summary>
      <param name="columnName">Nom de la colonne à lier à partir du jeu de résultats de la fonction.</param>
      <param name="property">Propriété à définir sur l'entité.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
      <summary>Obtient le nom de la colonne à lier à partir du jeu de résultats de la fonction.</summary>
      <returns>Nom de la colonne à lier à partir du jeu de résultats de la fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
      <summary>Obtient la propriété à définir sur l'entité.</summary>
      <returns>Propriété à définir sur l'entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString">
      <summary>Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de la valeur de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
      <summary>Métadonnées de mappage pour tous les types de mappages de propriété.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
      <summary>Obtient un EdmProperty qui spécifie la propriété mappée.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
      <summary>Métadonnées de mappage des propriétés scalaires.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Crée un mappage entre une propriété simple et une colonne.</summary>
      <param name="property">Propriété à mapper.</param>
      <param name="column">Colonne à mapper.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
      <summary>Obtient un EdmProperty qui spécifie la colonne mappée.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>Représente une collection d'éléments dans l'espace de mappage de stockage (mappage CS).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> à l'aide des <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> et des lecteurs XML spécifiés.</summary>
      <param name="edmCollection">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> utilisé par ce mappage.</param>
      <param name="storeCollection">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> utilisé par ce mappage.</param>
      <param name="xmlReaders">Lecteurs XML utilisés par ce mappage.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> à l'aide des <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> spécifiés et d'une collection de chaînes indiquant les chemins d'accès aux fichiers de métadonnées.</summary>
      <param name="edmCollection">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> utilisé par ce mappage.</param>
      <param name="storeCollection">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> utilisé par ce mappage.</param>
      <param name="filePaths">Chemins d'accès aux fichiers utilisés par ce mappage.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>Calcule une valeur de hachage pour le mappage de conteneur unique de la collection.</summary>
      <returns>Chaîne spécifiant la valeur de hachage calculée.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>Calcule une valeur de hachage pour le mappage de conteneur spécifié par les noms des conteneurs mappés.</summary>
      <returns>Chaîne spécifiant la valeur de hachage calculée.</returns>
      <param name="conceptualModelContainerName">Nom d'un conteneur dans le modèle conceptuel.</param>
      <param name="storeModelContainerName">Nom d'un conteneur dans le modèle de magasin.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>Instance <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" /> si aucune erreur n'est rencontrée.Sinon, null.</returns>
      <param name="edmItemCollection">Collection de métadonnées EDM à mapper.Ne doit pas être null.</param>
      <param name="storeItemCollection">Collection de métadonnées de magasin à mapper.Ne doit pas être null.</param>
      <param name="xmlReaders">Artefacts MSL à charger.Ne doit pas être null.</param>
      <param name="filePaths">Chemins d'accès aux artefacts MSL.Utilisé dans les messages d'erreur.Peut être null, auquel cas l'URI de base du XmlReader sera utilisé comme chemin d'accès.</param>
      <param name="errors">Collection d'erreurs rencontrées lors du chargement.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Crée un dictionnaire (étendue, vue générée) pour le mappage de conteneur unique dans la collection.</summary>
      <returns>Dictionnaire (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />) qui spécifie les vues générées.</returns>
      <param name="errors">Liste qui accumule les erreurs éventuelles.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Crée un dictionnaire (étendue, vue générée) d'un mappage de conteneur spécifié par les noms des conteneurs mappés.</summary>
      <returns>Dictionnaire (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />) qui spécifie les vues générées.</returns>
      <param name="conceptualModelContainerName">Nom d'un conteneur dans le modèle conceptuel.</param>
      <param name="storeModelContainerName">Nom d'un conteneur dans le modèle de magasin.</param>
      <param name="errors">Liste qui accumule les erreurs éventuelles.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>Obtient la version représentée par ce <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>Version représentée par ce <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>Obtient ou définit un <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> pour la création d'instances <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> qui sont utilisées pour récupérer des vues de mappages prégénérées.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> pour la création d'instances de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> qui sont utilisées pour récupérer des vues de mappage prégénérées.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
      <summary>Spécifie un mappage de type structurel.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Ajoute une condition de mappage de propriété.</summary>
      <param name="condition">Condition de mappage de propriété à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Ajoute un mappage de propriété.</summary>
      <param name="propertyMapping">Mappage de propriété à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
      <summary>Obtient une collection en lecture seule des conditions de mappage de propriété.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
      <summary>Obtient une collection en lecture seule des mappages de propriété.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Supprime une condition de mappage de propriété.</summary>
      <param name="condition">Condition de mappage de propriété à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Supprime un mappage de propriété.</summary>
      <param name="propertyMapping">Mappage de propriété à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
      <summary>Représente les métadonnées de mappage pour un mappage de types dans l'espace CS.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
      <summary>Spécifie une condition de mappage évaluée en comparant la valeur d'une propriété ou d'une colonne avec une valeur donnée.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
      <summary>Crée une instance ValueConditionMapping.</summary>
      <param name="propertyOrColumn">EdmProperty qui spécifie une propriété ou une colonne.</param>
      <param name="value">Objet qui spécifie la valeur de comparaison.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
      <summary>Obtient un objet qui spécifie la valeur de comparaison.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>Représente une terminaison d'un type d'association</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance AssociationEndMember en lecture seule.</summary>
      <returns>Instance AssociationEndMember nouvellement créée.</returns>
      <param name="name">Nom du membre de terminaison d'association.</param>
      <param name="endRefType">Type de référence de la terminaison.</param>
      <param name="multiplicity">Multiplicité de la terminaison.</param>
      <param name="deleteAction">Indicateur qui spécifie le comportement de suppression de la terminaison.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer à l'instance.</param>
      <exception cref="T:System.ArgumentException">Le nom spécifié est Null ou vide.</exception>
      <exception cref="T:System.ArgumentNullException">Le type de référence spécifié est Null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>Classe pour représenter un ensemble d'associations</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>Obtient les terminaisons de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient les terminaisons de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance AssociationSet en lecture seule en fonction des paramètres spécifiés.</summary>
      <returns>Instance AssociationSet nouvellement créée.</returns>
      <param name="name">Nom de l'ensemble d'associations.</param>
      <param name="type">Type d'association des éléments dans l'ensemble d'associations.</param>
      <param name="sourceSet">Jeu d'entités pour la terminaison d'ensemble d'associations source.</param>
      <param name="targetSet">Jeu d'entités pour la terminaison d'ensemble d'associations cible.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer à l'instance.</param>
      <exception cref="T:System.ArgumentException">Le nom spécifié est Null ou vide.</exception>
      <exception cref="T:System.ArgumentNullException">Le type d'association spécifié est Null.</exception>
      <exception cref="T:System.ArgumentException">Le type d'entité d'une des terminaisons du type d'association spécifié ne correspond pas au type d'entité de la terminaison correspondante du jeu d'entités.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>Obtient l'association liée à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> qui représente l'association liée à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>Classe pour représenter une terminaison d'AssociationSet</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>Obtient le membre de terminaison auquel correspond cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> qui représente le membre de terminaison auquel correspond cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>Obtient le jeu d'entités référencé par ce rôle End.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> qui représente le jeu d'entités référencé par ce rôle de terminaison.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>Obtient le nom de la terminaison End de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Nom de la terminaison End de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>Obtient l'ensemble d'associations parent de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> qui représente l'ensemble d'associations parent de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>Obtient le nom du rôle de terminaison de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Nom du rôle de terminaison de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>Retourne le nom du rôle de terminaison de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Nom du rôle de terminaison de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>Décrit une association/relation entre deux entités dans le modèle conceptuel, ou une relation de clé étrangère entre deux tables dans le modèle de magasin.Dans le modèle conceptuel, la classe dépendante peut définir ou non une propriété de clé étrangère.Si la clé étrangère est définie, la propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" /> a la valeur true et la propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" /> contient les détails des clés étrangères</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>Obtient la liste des terminaisons de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des terminaisons de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>Obtient ou définit le nom de la contrainte référentielle.</summary>
      <returns>Contrainte référentielle.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance AssociationType en lecture seule en fonction des paramètres spécifiés.</summary>
      <returns>Instance AssociationType nouvellement créée.</returns>
      <param name="name">Nom du type d'associations.</param>
      <param name="namespaceName">Espace de noms du type d'association.</param>
      <param name="foreignKey">Indicateur qui spécifie une relation de clé étrangère.</param>
      <param name="dataSpace">Espace de données du type d'association.</param>
      <param name="sourceEnd">Membre de terminaison d'association source.</param>
      <param name="targetEnd">Membre de terminaison d'association cible.</param>
      <param name="constraint">Contrainte référentielle.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer à l'instance.</param>
      <exception cref="T:System.ArgumentException">Le nom spécifié est Null ou vide.</exception>
      <exception cref="T:System.ArgumentException">L'espace de noms spécifié est Null ou vide.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>Obtient la valeur de propriété booléenne qui spécifie si la colonne est une clé étrangère.</summary>
      <returns>Valeur booléenne qui spécifie si la colonne est une clé étrangère.Si la valeur est true, la colonne est une clé étrangère.Si la valeur est false (valeur par défaut), la colonne n'est pas une clé étrangère.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>Obtient la liste des contraintes de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des contraintes de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>Liste de tous les types intégrés</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>Genre de type d'association</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>Genre AssociationSet</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>Genre AssociationSetEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>Genre de type d'association</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>Type de collection</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>Genre de type de collection</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>Genre de type complexe</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>Genre de documentation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>Genre EdmFunction</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>Genre de type EdmMember</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>Genre de type EdmProperty</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Genre de type EDM</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>Genre de conteneur d'entités</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>Genre de jeu d'entités</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>Genre EntitySetBase</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>Genre de type d'entité</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>Genre de base de type d'entité</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>Genre de membre enum</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>Genre de type d'énumération</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>Genre de facette</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>Genre de paramètre de fonction</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>Genre de type d'élément global</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>Genre de type d'élément de métadonnées</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>Genre de propriété de métadonnées</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>Genre de propriété de navigation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>Genre de type DeleteAction</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>Genre de mode de paramètre</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>Genre de type primitif</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>Genre de type de type primitif</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>Genre de type ProviderManifest</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>Genre de type de contrainte référentielle</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Genre de type de référence</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>Genre de type RelationshipEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>Genre de type de multiplicité de relation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>Genre de type de jeu de relations</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>Type de relation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>Genre de type de ligne</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>Genre de type simple</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>Genre de type structurel</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>Genre d'informations de type</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>Type de collection (appliquée aux propriétés)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>La collection a la sémantique des sacs (non ordonnée et avec doublons)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>La collection a la sémantique des listes (tri déterministe et avec doublons)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>La propriété n'est pas une collection.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>Représente le type de collection EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>Obtient l'instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient le type de l'élément que cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> actuel inclut et les facettes de ce type.</summary>
      <returns>Instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient le type de l'élément que cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> actuel inclut et les facettes de ce type.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>Représente le type complexe EDM.Peut être utilisé pour configurer des types complexes depuis une convention basée sur un modèle d'espace conceptuel.Les types complexes ne sont pas pris en charge dans le modèle de magasin.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Nouvelle instance de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</returns>
      <param name="name">Nom du type complexe.</param>
      <param name="namespaceName">Espace de noms du type complexe.</param>
      <param name="dataSpace">Espace de données auquel appartient le type complexe.</param>
      <param name="members">Membre du type complexe.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer à l'instance.</param>
      <exception cref="T:System.ArgumentNullException">Exception levée si l'argument de nom, d'espace de noms ou de membre est NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>Obtient la liste des propriétés de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des propriétés de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>Mode d'accès concurrentiel des propriétés.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>Mode d'accès concurrentiel fixe : la propriété est toujours validée au moment de l'écriture</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>Mode d'accès concurrentiel par défaut : la propriété n'est jamais validée au moment de l'écriture</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>Sérialise un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> conforme aux restrictions d'un fichier de schéma CSDL dans un enregistreur XML.Le modèle à sérialiser doit contenir un seul <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer" />.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>Se produit lorsqu'une erreur est rencontrée lors de la sérialisation du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>Sérialise le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> dans XmlWriter.</summary>
      <returns>true si le modèle est valide ; sinon, false.</returns>
      <param name="model">EdmModel à sérialiser.</param>
      <param name="xmlWriter">XmlWriter pour la sérialisation.</param>
      <param name="modelNamespace">Espace de noms du modèle sérialisé.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>Représente des informations relatives à une erreur qui s'est produite lors du traitement d'un modèle Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>Obtient un message descriptif facultatif qui décrit l'erreur déclenchée.</summary>
      <returns>Message descriptif facultatif qui décrit l'erreur déclenchée.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>Obtient une valeur indiquant le <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> qui a déclenché l'événement.</summary>
      <returns>true si le <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> a déclenché l'événement ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>Obtient une valeur facultative qui indique quelle propriété de l'élément source a déclenché l'événement.</summary>
      <returns>Valeur facultative qui indique quelle propriété de l'élément source a déclenché l'événement.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace indique l'élément dans le CSpace - les types primitifs EDM + les types définis dans le langage CSDL</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>Mappage entre CSpace et SSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>Mappage entre OSpace et CSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace indique l'élément dans l'espace CLR</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace indique l'élément dans l'espace SSpace</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>Méthodes d'extension pour <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Obtient le modèle conceptuel du DbModel spécifié.</summary>
      <returns>Instance d'EdmModel qui représente le modèle conceptuel.</returns>
      <param name="model">Instance d'une classe qui implémente IEdmModelAdapter (par ex.DbModel).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Obtient le modèle de magasin du DbModel spécifié.</summary>
      <returns>Instance d'EdmModel qui représente le modèle de magasin.</returns>
      <param name="model">Instance d'une classe qui implémente IEdmModelAdapter (par ex.DbModel).</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>Classe pour représenter la documentation associée à un élément</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de documentation.</summary>
      <param name="summary">Chaîne de synthèse.</param>
      <param name="longDescription">Longue chaîne de description.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>Obtient une valeur indiquant si cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> contient uniquement une valeur nulle ou une propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> et une propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" /> vides.</summary>
      <returns>true si cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> contient uniquement une valeur nulle ou une propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> et une propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" /> vides ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>Obtient la description longue de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Description longue de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>Obtient le résumé de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Résumé de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>Retourne le résumé de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Résumé de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>Cette classe encapsule les informations relatives à une erreur EDM (Entity Data Model) générique.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>Obtient le message d'erreur.</summary>
      <returns>Message d'erreur.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>Classe pour représenter une fonction</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>Ajoute un paramètre à cette fonction.</summary>
      <param name="functionParameter">Paramètre à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>Obtient l'attribut d'agrégat de cette fonction.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>Obtient une valeur indiquant si l'attribut intégré est présent sur cette fonction.</summary>
      <returns>true si l'attribut est présent ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>L'une des valeurs d'énumération de l'énumération <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>Obtient une requête dans le langage utilisé par le système de gestion de base de données ou modèle de stockage.</summary>
      <returns>Valeur de chaîne dans la syntaxe utilisée par le système de gestion de base de données ou modèle de stockage qui contient la requête ou l'instruction de mise à jour de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Méthode de fabrique pour créer l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Nouvelle instance en lecture seule du type <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
      <param name="name">Nom de la fonction.</param>
      <param name="namespaceName">Espace de noms de la fonction.</param>
      <param name="dataSpace">Espace de noms auquel la fonction appartient.</param>
      <param name="payload">Attributs et propriétés supplémentaires de la fonction.</param>
      <param name="metadataProperties">Propriétés de métadonnées qui sont ajoutées à la fonction.Peut être Null.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>Retourne le nom complet (espace de noms plus nom) de ce type.</summary>
      <returns>Nom complet du type.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>Détermine si cette instance est mappée à une fonction ou à une procédure stockée.</summary>
      <returns>true si cette instance est mappée à une fonction ; false si cette instance est mappée à une procédure stockée.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>Obtient une valeur qui indique si cette instance provient du manifeste du fournisseur.</summary>
      <returns>true si cette instance provient du manifeste du fournisseur ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>Obtient une valeur indiquant s'il s'agit d'une fonction niladique (fonction qui n'accepte aucun argument).</summary>
      <returns>true si la fonction est niladique ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>Obtient les paramètres de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient les paramètres de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>Obtient les attributs sémantiques du type de paramètre de cette fonction.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>Obtient le paramètre de retour de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> qui représente le paramètre de retour de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>Obtient les paramètres de retour de ce <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui représente les paramètres de retour de ce <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>Obtient ou définit le schéma associé à la fonction.</summary>
      <returns>Schéma associé à la fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>Obtient l'attribut du nom de la fonction de magasin de cette fonction.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>Contient des attributs et des propriétés supplémentaires de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>Obtient ou définit le texte de commande associé à la fonction.</summary>
      <returns>Texte de commande associé à la fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>Obtient ou définit les jeux d'entités de la fonction.</summary>
      <returns>Jeux d'entités de la fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>Obtient une valeur qui indique s'il s'agit d'une fonction d'agrégation.</summary>
      <returns>true s'il s'agit d'une fonction d'agrégation ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>Obtient ou définit si cette fonction est intégrée.</summary>
      <returns>true si cette fonction est intégrée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>Obtient ou définit si cette fonction est une fonction de magasin mise en cache.</summary>
      <returns>true si cette fonction est une fonction de magasin mise en cache ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>Obtient ou définit si cette fonction peut être composée.</summary>
      <returns>true si cette fonction peut être composée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>Obtient ou définit si cette fonction provient d'un manifeste du fournisseur.</summary>
      <returns>true si cette fonction provient d'un manifeste du fournisseur ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>Obtient ou définit si cette fonction est une importation de fonction.</summary>
      <returns>true si cette fonction est une importation de fonction ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>Obtient ou définit si la fonction ne contient aucun argument.</summary>
      <returns>true si la fonction ne contient aucun argument ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>Obtient ou définit les paramètres de fonction.</summary>
      <returns>Paramètres de fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>Obtient ou définit la sémantique du type de paramètre.</summary>
      <returns>Sémantique du type de paramètre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>Obtient ou définit les paramètres de retour.</summary>
      <returns>Paramètres de retour.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>Obtient ou définit le schéma de fonction.</summary>
      <returns>Schéma de fonction.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>Obtient ou définit le nom de la fonction de magasin.</summary>
      <returns>Nom de la fonction de magasin.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>Classe pour représenter une collection d'éléments dans l'espace EDM.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> en utilisant la collection des objets XMLReader où se trouvent les fichiers CSDL (Conceptual Schema Definition Language).</summary>
      <param name="xmlReaders">Collection des objets XMLReader où se trouvent les fichiers CSDL (Conceptual Schema Definition Language).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />.</summary>
      <param name="model">Modèle de données d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> en utilisant les chemins d'accès des fichiers CSDL (Conceptual Schema Definition Language).</summary>
      <param name="filePaths">Chemins d'accès des fichiers CSDL (Conceptual Schema Definition Language).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Méthode de fabrique qui crée un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> si aucune erreur n'est rencontrée.Sinon, null.</returns>
      <param name="xmlReaders">Artefacts CSDL à charger.Ne doit pas être null.</param>
      <param name="filePaths">Chemins d'accès aux artefacts CSDL.Utilisé dans les messages d'erreur.Peut être null, auquel cas l'URI de base du XmlReader sera utilisé comme chemin d'accès.</param>
      <param name="errors">Collection d'erreurs rencontrées lors du chargement.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>Obtient la version du modèle conceptuel de cette collection.</summary>
      <returns>Version du modèle conceptuel de cette collection.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>Retourne une collection des objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Objet ReadOnlyCollection qui représente une collection des objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>Retourne une collection des objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> avec la version du modèle conceptuel spécifiée.</summary>
      <returns>Objet ReadOnlyCollection qui représente une collection des objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
      <param name="edmVersion">Version du modèle conceptuel.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>Représente la classe de membre EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>Obtient le type sur lequel ce membre est déclaré.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type sur lequel ce membre est déclaré.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>Indique si le membre est marqué comme membre calculé dans la définition EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>Indique si le modèle généré par le magasin de ce membre est marqué comme identité dans la définition EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>Obtient ou définit le nom de la propriété.En définissant cette valeur à partir d'une convention de modèle d'espace de magasin, le nom de la colonne de base de données pour cette propriété est modifié.Dans le modèle conceptuel, il doit être aligné avec la propriété correspondante de la classe d'entité, et ne doit pas être changé.</summary>
      <returns>Nom de ce membre.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>Retourne le nom de ce membre.</summary>
      <returns>Nom de ce membre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>Obtient l'instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient à la fois le type du membre et les facettes du type.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient à la fois le type du membre et les facettes du type.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>Représente un modèle conceptuel ou de magasin.Cette classe peut être utilisée pour accéder aux informations sur la forme du modèle et la façon dont il a été configuré.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Ajoute un type d'association au modèle.</summary>
      <param name="item">Instance AssociationType à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Ajoute un type complexe au modèle.</summary>
      <param name="item">Instance ComplexType à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Ajoute une fonction au modèle.</summary>
      <param name="item">Instance EdmFunction à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Ajoute un type d'entité au modèle.</summary>
      <param name="item">Instance EntityType à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Ajoute un type d'énumération au modèle.</summary>
      <param name="item">Instance EnumType à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>Obtient les types d'association dans le modèle.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>Obtient le type intégré de ce type.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de ce type.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>Obtient les types complexes dans le modèle.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>Obtient le conteneur qui stocke les jeux d'entités et les ensembles d'associations, ainsi que les importations de fonction.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>Obtient l'espace de données associé au modèle, qui indique s'il s'agit d'un modèle conceptuel (DataSpace.CSpace) ou d'un modèle de magasin (DataSpace.SSpace).</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>Obtient les types d'entités dans le modèle.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>Obtient les types d'énumération dans le modèle.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>Obtient les fonctions dans le modèle.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>Obtient les éléments globaux associés au modèle.</summary>
      <returns>Éléments globaux associés au modèle.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Supprime un type d'association du modèle.</summary>
      <param name="item">Instance AssociationType à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Supprime un type complexe du modèle.</summary>
      <param name="item">Instance ComplexType à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Supprime une fonction du modèle.</summary>
      <param name="item">Instance EdmFunction à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Supprime un type d'entité du modèle.</summary>
      <param name="item">Instance EntityType à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Supprime un objet d'énumération du modèle.</summary>
      <param name="item">Instance EnumType à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>Dans l'espace conceptuel, EdmProperty représente une propriété sur une entité.Dans l'espace de magasin, EdmProperty représente une colonne dans une table.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>Obtient ou définit le genre de collection pour ce modèle.</summary>
      <returns>Genre de collection pour ce modèle.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>Obtient les informations sur les types complexes pour cette propriété.</summary>
      <returns>Informations sur les types complexes pour cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>Obtient ou définit le mode d'accès concurrentiel pour la propriété.</summary>
      <returns>Mode d'accès concurrentiel pour la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crée une nouvelle instance de type EdmProperty.</summary>
      <returns>Nouvelle instance de type EdmProperty</returns>
      <param name="name">Nom de la propriété.</param>
      <param name="typeUsage">Propriété <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Crée une nouvelle propriété complexe.</summary>
      <returns>Propriété nouvellement créée.</returns>
      <param name="name">Nom de la propriété.</param>
      <param name="complexType">Type de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Crée une nouvelle propriété d'énumération.</summary>
      <returns>Propriété nouvellement créée.</returns>
      <param name="name">Nom de la propriété.</param>
      <param name="enumType">Type de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Crée une propriété primitive.</summary>
      <returns>Propriété nouvellement créée.</returns>
      <param name="name">Nom de la propriété.</param>
      <param name="primitiveType">Type de la propriété.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>Obtient la valeur par défaut de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Valeur par défaut de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>Obtient les informations sur les types d'énumération pour cette propriété.</summary>
      <returns>Informations sur les types d'énumération pour cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>Détermine si la propriété est une propriété de type de collection.</summary>
      <returns>true si la propriété est une propriété de type de collection ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>Détermine si cette propriété est une propriété de type complexe.</summary>
      <returns>true si cette propriété est une propriété de type complexe ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>Détermine si cette propriété est une propriété de type d'énumération.</summary>
      <returns>true si cette propriété est une propriété de type d'énumération ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>Obtient ou définit si la longueur de cette propriété est fixe.</summary>
      <returns>true si la longueur de cette propriété est fixe ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>Détermine si la facette de longueur fixe est constante pour le fournisseur de bases de données.</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>Obtient ou définit si la propriété utilise la longueur maximale prise en charge par le fournisseur.</summary>
      <returns>true si cette propriété utilise la longueur maximale prise en charge par le fournisseur ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>Détermine si la facette de longueur maximale est constante pour le fournisseur de bases de données.</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>Détermine si la facette de précision est constante pour le fournisseur de bases de données</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>Détermine si cette propriété est un type primitif.</summary>
      <returns>true si cette propriété est un type primitif ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>Détermine si la facette d'échelle est constante pour le fournisseur de bases de données.</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>Détermine si cette propriété est un type primitif sous-jacent.</summary>
      <returns>true si cette propriété est un type primitif sous-jacent ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>Obtient ou définit si cette propriété est une propriété Unicode.</summary>
      <returns>true si cette propriété est une propriété Unicode ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>Détermine si la facette Unicode est constante pour le fournisseur de bases de données</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>Obtient ou définit la longueur maximale de la propriété.</summary>
      <returns>Longueur maximale de la propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>Obtient une valeur indiquant si cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> peut avoir une valeur Null.</summary>
      <returns>true si ce <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> peut avoir une valeur Null ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>Obtient ou définit la précision de cette propriété.</summary>
      <returns>Précision de cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>Obtient les informations sur les types primitifs pour cette propriété.</summary>
      <returns>Informations sur les types primitifs pour cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>Obtient ou définit l'échelle de cette propriété.</summary>
      <returns>Échelle de cette propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Définit les propriétés des métadonnées.</summary>
      <param name="metadataProperties">Propriétés de métadonnées à définir.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>Obtient ou définit la méthode de génération de base de données pour la colonne de base de données associée à cette propriété</summary>
      <returns>Modèle généré par le magasin pour la propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>Obtient le nom de type de la propriété.</summary>
      <returns>Nom de type de la propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>Obtient les informations sur les types primitifs sous-jacents pour cette propriété.</summary>
      <returns>Informations sur les types primitifs sous-jacents pour cette propriété.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>Cette classe encapsule les informations d'erreur pour une erreur de schéma qui a été rencontrée.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>Construit un objet EdmSchemaError.</summary>
      <param name="message">Explication de l'erreur.</param>
      <param name="errorCode">Code a associé à cette erreur.</param>
      <param name="severity">Gravité de l'erreur.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>Obtient la colonne où l'erreur s'est produite.</summary>
      <returns>Colonne où l'erreur s'est produite.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>Obtient le code d'erreur.</summary>
      <returns>Code d'erreur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>Obtient le numéro de ligne où l'erreur s'est produite.</summary>
      <returns>Numéro de ligne où l'erreur s'est produite.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>Obtient l'emplacement du schéma qui contient l'erreur.Le nom du schéma est également inclus à la fin de cette chaîne.</summary>
      <returns>Emplacement du schéma qui contient l'erreur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>Obtient le nom du schéma qui contient l'erreur.</summary>
      <returns>Nom du schéma qui contient l'erreur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>Obtient le niveau de gravité de l'erreur.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" />.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>Obtient une représentation de chaîne de la trace de la pile au moment où l'erreur s'est produite.</summary>
      <returns>Représentation de chaîne de la trace de la pile au moment où l'erreur s'est produite.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>Retourne le message d'erreur.</summary>
      <returns>Message d'erreur.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Définit les différentes gravités d'erreurs qui peuvent se produire lors de la validation d'un modèle Entity Framework.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>Erreur qui empêche l'utilisation du modèle.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>Avertissement qui n'empêche pas l'utilisation du modèle.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>Classe EdmType de base pour tous les types de modèles</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>Obtient une valeur indiquant si ce type est, ou non, abstrait.</summary>
      <returns>true si ce type est abstrait ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>Obtient le type de base de ce type.</summary>
      <returns>Type de base de ce type.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>Obtient le nom complet de ce type.</summary>
      <returns>Nom complet de ce type.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>Retourne une instance de l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> dont le type d'élément est ce type.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> dont le type d'élément est ce type.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>Obtient le nom de ce type.</summary>
      <returns>Nom de ce type.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>Obtient l'espace de noms de ce type.</summary>
      <returns>Espace de noms de ce type.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>Retourne le nom complet de ce type.</summary>
      <returns>Nom complet de ce type.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>Classe pour représenter un conteneur d'entités</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Crée un conteneur d'entités ayant le nom et l'espace de données spécifiés.</summary>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="dataSpace">Espace de données du conteneur d'entités.</param>
      <exception cref="T:System.ArgumentNullException">Levée si l'argument de nom a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Levée si l'argument de nom est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Ajoute le jeu d'entités spécifié au conteneur.</summary>
      <param name="entitySetBase">Jeu d'entités à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Ajoute une importation de fonction au conteneur.</summary>
      <param name="function">Importation de fonction à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>Obtient les ensembles d'associations pour ce conteneur d'entités.</summary>
      <returns>Ensembles d'associations pour ce conteneur d'entités.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>Obtient la liste des jeux d'entités et des ensembles d'associations que cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des jeux d'entités et des ensembles d'associations que cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Méthode de fabrique pour créer l'objet EntityContainer.</summary>
      <returns>Objet EntityContainer.</returns>
      <param name="name">Nom du conteneur d'entités à créer.</param>
      <param name="dataSpace">DataSpace auquel ce conteneur d'entités appartient.</param>
      <param name="entitySets">Jeux d'entités qui seront inclus dans le nouveau conteneur.Peut être Null.</param>
      <param name="functionImports">Fonctions qui seront incluses dans le nouveau conteneur.Peut être Null.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer à l'instance.</param>
      <exception cref="T:System.ArgumentException">Exception levée si l'argument name a la valeur Null ou est une chaine vide.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>Obtient les jeux d'entités pour ce conteneur d'entités.</summary>
      <returns>Jeux d'entités pour ce conteneur d'entités.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>Spécifie une collection d'éléments <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.Chaque fonction contient les détails d'une procédure stockée qui existe dans la base de données ou d'un CommandText équivalent mappé à une entité et ses propriétés.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient des éléments <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> en utilisant le nom spécifié pour le jeu d'entités.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> qui représente le jeu d'entités portant le nom spécifié.</returns>
      <param name="name">Nom du jeu d'entités qui fait l'objet de la recherche.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> en utilisant le nom spécifié pour l'ensemble de relations.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> qui représente l'ensemble de relations portant le nom spécifié.</returns>
      <param name="name">Nom de l'ensemble de relations qui fait l'objet de la recherche.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>Obtient le nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Supprime un jeu d'entités spécifique du conteneur.</summary>
      <param name="entitySetBase">Jeu d'entités à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>Retourne le nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> en utilisant le nom spécifié pour le jeu d'entités.</summary>
      <returns>true si un jeu d'entités correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du jeu d'entités qui fait l'objet de la recherche.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="entitySet">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.S'il n'y a aucun jeu d'entités, ce paramètre de sortie contient la valeur Null.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> en utilisant le nom spécifié pour l'ensemble de relations.</summary>
      <returns>true si un ensemble de relations correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom de l'ensemble de relations qui fait l'objet de la recherche.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="relationshipSet">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>Représente une utilisation spécifique d'une structure définie dans EntityType.Dans le modèle conceptuel, cela représente un ensemble qui peut interroger des entités et les rendre persistantes.Dans le modèle de magasin, cela représente une table.À partir d'une convention de modèle d'espace de magasin, peut être utilisé pour configurer le nom d'une table avec la propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" /> et le schéma de la table avec la propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Méthode de fabrique pour créer l'objet EntitySet.</summary>
      <returns>Objet EntitySet.</returns>
      <param name="name">Nom de l'objet EntitySet.</param>
      <param name="schema">Schéma db.Peut être Null.</param>
      <param name="table">Table db.Peut être Null.</param>
      <param name="definingQuery">Requête spécifique au fournisseur qui doit être utilisée pour récupérer des données pour cet objet EntitySet.Peut être Null.</param>
      <param name="entityType">Type d'entité des entités que ce type de jeu d'entités contient.</param>
      <param name="metadataProperties">Propriétés de métadonnées qui sont ajoutées au nouvel objet EntitySet créé.Peut être Null.</param>
      <exception cref="T:System.ArgumentException">Exception levée si l'argument name a la valeur Null ou est une chaine vide.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>Obtient le type d'entité de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> qui représente le type d'entité de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>Classe pour représenter un jeu d'entités</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>Obtient l'instruction SQL spécifique au fournisseur de séquence d'échappement qui décrit le jeu d'entités.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>Obtient le type d'entité de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> qui représente le type d'entité de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>Obtient le conteneur d'entités du jeu d'entités ou de l'ensemble de relations actuel.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> qui représente le conteneur d'entités du jeu d'entités ou de l'ensemble de relations actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>Obtient ou définit le nom du jeu d'entités ou de l'ensemble de relations actuel.Si cette propriété est modifiée à partir de l'espace du magasin, la couche de mappage doit être mise à jour pour refléter le nouveau nom.Pour modifier le nom de table d'un espace de magasin <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />, utilisez la propriété Table.</summary>
      <returns>Nom du jeu d'entités ou de l'ensemble de relations actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>Obtient ou définit le schéma de base de données de ce jeu d'entités.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>Obtient ou définit le nom de la table de base de données de ce jeu d'entités.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>Retourne le nom du jeu d'entités ou de l'ensemble de relations actuel.</summary>
      <returns>Nom du jeu d'entités ou de l'ensemble de relations actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>Représente la structure d'un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.Dans le modèle conceptuel, cela représente la forme et la structure d'une entité.Dans le modèle de magasin, cela représente la structure d'une table.Pour modifier le nom du schéma et de la table, utilisez l'EntitySet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Ajoute la propriété de navigation spécifiée aux membres de ce type.La propriété de navigation est ajoutée indépendamment de l'indicateur de lecture seule.</summary>
      <param name="property">Propriété de navigation à ajouter.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Méthode de fabrique pour créer l'objet EntityType.</summary>
      <returns>Objet EntityType.</returns>
      <param name="name">Nom du type d'entité.</param>
      <param name="namespaceName">Espace de noms du type d'entité.</param>
      <param name="dataSpace">Espace de données auquel appartient EntityType.</param>
      <param name="keyMemberNames">Nom des membres clés du type.</param>
      <param name="members">Membres du type d'entité (propriétés primitives et de navigation).</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer à l'instance.</param>
      <exception cref="T:System.ArgumentException">Exception levée si l'argument de nom, d'espace de noms ou de version a la valeur Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Méthode de fabrique pour créer l'objet EntityType.</summary>
      <returns>Objet EntityType.</returns>
      <param name="name">Nom du type d'entité.</param>
      <param name="namespaceName">Espace de noms du type d'entité.</param>
      <param name="dataSpace">Espace de données auquel appartient EntityType.</param>
      <param name="baseType">Type de base.</param>
      <param name="keyMemberNames">Nom des membres clés du type.</param>
      <param name="members">Membres du type d'entité (propriétés primitives et de navigation).</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer à l'instance.</param>
      <exception cref="T:System.ArgumentException">Exception levée si l'argument de nom, d'espace de noms ou de version a la valeur Null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>Obtient la collection des membres déclarés pour le type d'entité.</summary>
      <returns>Collection des membres déclarés pour le type d'entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>Obtient les propriétés de navigation déclarées associées au type d'entité.</summary>
      <returns>Propriétés de navigation déclarées associées au type d'entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>Obtient la liste des propriétés déclarées pour le type d'entité.</summary>
      <returns>Propriétés déclarées pour le type d'entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> qui fait référence à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> qui fait référence à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>Obtient les propriétés de navigation de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des propriétés de navigation de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>Obtient la liste des propriétés de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des propriétés de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>Représente le type d'entité</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Ajoute la propriété spécifiée à la liste des clés pour l'entité actuelle.</summary>
      <param name="member">Propriété à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">si l'argument member est Null</exception>
      <exception cref="T:System.InvalidOperationException">Exception levée si EntityType a un type de base d'un autre EntityTypeBase.Dans ce cas KeyMembers doit être ajouté au type de base</exception>
      <exception cref="T:System.InvalidOperationException">Si l'instance EntityType est en lecture seule</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>Obtient la liste de tous les membres clés du type d'entité ou de relation actuel.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui représente la liste de tous les membres clés du type d'entité ou de relation actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>Obtient la liste de toutes les propriétés de clé pour ce type d'entité.</summary>
      <returns>Liste de toutes les propriétés de clé pour ce type d'entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Supprime le membre clé spécifié de la collection.</summary>
      <param name="member">Membre clé à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>Représente un membre d'énumération.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>Obtient le type de ce type.</summary>
      <returns>Genre de ce type.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance EnumMember en lecture seule.</summary>
      <returns>Instance EnumMember nouvellement créée.</returns>
      <param name="name">Nom du membre d'énumération.</param>
      <param name="value">Valeur du membre d'énumération.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer au membre d'énumération.</param>
      <exception cref="T:System.ArgumentException">Le nom est Null ou vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance EnumMember en lecture seule.</summary>
      <returns>Instance EnumMember nouvellement créée.</returns>
      <param name="name">Nom du membre d'énumération.</param>
      <param name="value">Valeur du membre d'énumération.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer au membre d'énumération.</param>
      <exception cref="T:System.ArgumentException">Le nom est Null ou vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance EnumMember en lecture seule.</summary>
      <returns>Instance EnumMember nouvellement créée.</returns>
      <param name="name">Nom du membre d'énumération.</param>
      <param name="value">Valeur du membre d'énumération.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer au membre d'énumération.</param>
      <exception cref="T:System.ArgumentException">Le nom est Null ou vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance EnumMember en lecture seule.</summary>
      <returns>Instance EnumMember nouvellement créée.</returns>
      <param name="name">Nom du membre d'énumération.</param>
      <param name="value">Valeur du membre d'énumération.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer au membre d'énumération.</param>
      <exception cref="T:System.ArgumentException">Le nom est Null ou vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance EnumMember en lecture seule.</summary>
      <returns>Instance EnumMember nouvellement créée.</returns>
      <param name="name">Nom du membre d'énumération.</param>
      <param name="value">Valeur du membre d'énumération.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer au membre d'énumération.</param>
      <exception cref="T:System.ArgumentException">Le nom est Null ou vide.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>Obtient le nom de ce membre d'énumération.</summary>
      <returns>Nom de ce membre d'énumération.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>Substitution de System.Object.ToString pour fournir une meilleure représentation sous forme de chaîne de ce type.</summary>
      <returns>Nom de ce membre d'énumération.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>Obtient la valeur de ce membre d'énumération.</summary>
      <returns>Valeur de ce membre d'énumération.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>Représente un type énumération.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>Retourne le genre de type</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance EnumType en lecture seule.</summary>
      <returns>Instance EnumType nouvellement créée.</returns>
      <param name="name">Nom du type d'énumération.</param>
      <param name="namespaceName">Espace de noms du type d'énumération.</param>
      <param name="underlyingType">Type sous-jacent du type d'énumération.</param>
      <param name="isFlags">Indique si le type d'énumération peut être traité comme un champ de bits (c'est-à-dire en tant que jeu d'indicateurs).</param>
      <param name="members">Membres du type d'énumération.</param>
      <param name="metadataProperties">Propriétés de métadonnées à associer au type d'énumération.</param>
      <exception cref="T:System.ArgumentNullException">underlyingType est Null.</exception>
      <exception cref="T:System.ArgumentException">Le nom est Null ou vide.- Ou - namespaceName est Null ou vide.- Ou - underlyingType n'est pas un type sous-jacent pris en charge.- Ou - Les membres spécifiés n'ont pas des noms uniques.- Ou - La valeur d'un membre spécifié est en dehors de la plage du type sous-jacent.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>Obtient une valeur indiquant si le type enum est défini en tant qu'indicateurs (peut être traité comme un champ de bits)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>Obtient une collection de membres d'énumération pour ce type énumération.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>Obtient le type sous-jacent de ce type d'énumération.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>Classe pour représenter un objet Facet. Cet objet est immuable (pas seulement défini en lecture seule) et certaines parties du système dépendent de ce comportement.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>Obtient la description de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" /> qui représente la description de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>Obtient le type de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui représente le type de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>Obtient une valeur indiquant si la valeur de la facette est illimitée.</summary>
      <returns>true si la valeur de la facette est illimitée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>Obtient le nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>Retourne le nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>Obtient la valeur de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Valeur de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>Classe pour représenter un objet FacetDescription</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>Obtient la valeur par défaut d'une facette présentant cette description de facette.</summary>
      <returns>Valeur par défaut d'une facette présentant cette description de facette.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>Obtient le nom de cette facette.</summary>
      <returns>Nom de cette facette.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>Obtient le type de cette facette.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui représente le type de cette facette.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>Obtient une valeur indiquant si la valeur de cette facette est une constante.</summary>
      <returns>true si cette facette est une constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>Obtient une valeur indiquant si cette facette est une facette obligatoire.</summary>
      <returns>true si cette facette est une facette obligatoire ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>Obtient la valeur maximale pour cette facette.</summary>
      <returns>Valeur maximale pour cette facette.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>Obtient la valeur minimale pour cette facette.</summary>
      <returns>Valeur minimale pour cette facette.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>Retourne le nom de cette facette.</summary>
      <returns>Nom de cette facette.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>Classe pour représenter un paramètre de fonction</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>Méthode de fabrique pour créer l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Nouvelle instance en lecture seule du type <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
      <param name="name">Nom du paramètre.</param>
      <param name="edmType">EdmType du paramètre.</param>
      <param name="parameterMode">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> du paramètre.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>Obtient l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> sur lequel ce paramètre est déclaré.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> qui représente la fonction sur laquelle ce paramètre est déclaré.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>Détermine si le paramètre utilise la longueur maximale prise en charge par le fournisseur de bases de données.</summary>
      <returns>true si le paramètre utilise la longueur maximale prise en charge par le fournisseur de bases de données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>Détermine si la facette de longueur maximale est constante pour le fournisseur de bases de données.</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>Détermine si la facette de précision est constante pour le fournisseur de bases de données</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>Détermine si la facette d'échelle est constante pour le fournisseur de bases de données.</summary>
      <returns>true si la facette est constante ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>Obtient la longueur maximale du paramètre.</summary>
      <returns>Longueur maximale du paramètre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>Obtient le mode de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>Obtient le nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>Obtient la valeur de précision du paramètre.</summary>
      <returns>Valeur de précision du paramètre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>Obtient la valeur d'échelle du paramètre.</summary>
      <returns>Valeur d'échelle paramètre.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>Retourne le nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>Obtient le nom du type de ce paramètre.</summary>
      <returns>Nom du type de ce paramètre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>Obtient l'instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient à la fois le type du paramètre et les facettes du type.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient à la fois le type du paramètre et les facettes du type.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>Représente une classe d'élément de base pour toutes les métadonnées</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>Interface pour obtenir le modèle conceptuel et le modèle de magasin sous-jacents d'un <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>Obtient le modèle conceptuel.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>Obtient le modèle de magasin.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>Classe pour représenter une collection d'éléments.L'essentiel de l'implémentation de la maintenance réelle de la collection est effectué par MetadataCollection.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>Obtient le modèle de données associé à cette collection d'éléments.</summary>
      <returns>Modèle de données associé à cette collection d'éléments.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités spécifié.</summary>
      <returns>S'il n'y a aucun conteneur d'entités, cette méthode retourne la valeur Null ; sinon, elle retourne le premier.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités spécifié.</summary>
      <returns>S'il n'y a aucun conteneur d'entités, cette méthode retourne la valeur Null ; sinon, elle retourne le premier conteneur d'entités.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>Retourne toutes les surcharges des fonctions en utilisant le nom spécifié dans cette collection d'éléments.</summary>
      <returns>Collection de type ReadOnlyCollection qui contient toutes les fonctions qui portent le nom spécifié.</returns>
      <param name="functionCollection">Dictionnaire de fonctions.</param>
      <param name="functionName">Nom complet de la fonction.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>Retourne toutes les surcharges des fonctions en utilisant le nom spécifié dans cette collection d'éléments.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient toutes les fonctions qui portent le nom spécifié.</returns>
      <param name="functionName">Nom complet de la fonction.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>Retourne toutes les surcharges des fonctions en utilisant le nom spécifié dans cette collection d'éléments.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient toutes les fonctions qui portent le nom spécifié.</returns>
      <param name="functionName">Nom complet de la fonction.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fortement typé en utilisant l'identité spécifiée.</summary>
      <returns>Élément qui est spécifié par l'identité.</returns>
      <param name="identity">Identité de l'élément.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fortement typé en utilisant l'identité spécifiée avec la recherche respectant, ou non, la casse.</summary>
      <returns>Élément qui est spécifié par l'identité.</returns>
      <param name="identity">Identité de l'élément.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>Retourne tous les éléments du type spécifié dans cette collection d'éléments.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient tous les éléments du type spécifié.</returns>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type spécifié et le nom d'espace de noms de cette collection d'éléments.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui représente le type correspondant au nom de type spécifié et au nom d'espace de noms de cette collection d'éléments.S'il n'existe aucune correspondance de type, cette méthode retourne la valeur Null.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type spécifié et le nom d'espace de noms de cette collection d'éléments.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui représente le type correspondant au nom de type spécifié et au nom d'espace de noms de cette collection d'éléments.S'il n'existe aucune correspondance de type, cette méthode retourne la valeur Null.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités spécifié.S'il n'y a aucun conteneur d'entités, ce paramètre de sortie contient la valeur Null ; sinon, il contient le premier conteneur d'entités.</summary>
      <returns>true si un conteneur d'entités correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="entityContainer">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.S'il n'y a aucun conteneur d'entités, ce paramètre de sortie contient la valeur Null ; sinon, il contient le premier conteneur d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités spécifié.S'il n'y a aucun conteneur d'entités, le paramètre de sortie contient la valeur Null ; sinon, il contient le premier conteneur d'entités.</summary>
      <returns>true si un conteneur d'entités correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="entityContainer">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.S'il n'y a aucun conteneur d'entités, ce paramètre de sortie contient la valeur Null ; sinon, il contient le premier conteneur d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fortement typé en utilisant l'identité spécifiée dans cette collection d'éléments.</summary>
      <returns>true si un élément correspond aux critères de recherche ; sinon, false.</returns>
      <param name="identity">Identité de l'élément.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="item">Lorsque cette méthode retourne une valeur, le paramètre de sortie contient un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />.S'il n'y a aucun élément global ayant l'identité spécifiée de la collection d'éléments, ce paramètre de sortie contient la valeur Null.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fortement typé en utilisant l'identité spécifiée dans cette collection d'éléments.</summary>
      <returns>true si un élément correspond aux critères de recherche ; sinon, false.</returns>
      <param name="identity">Identité de l'élément.</param>
      <param name="item">Lorsque cette méthode retourne une valeur, le paramètre de sortie contient un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />.S'il n'y a aucun élément global ayant l'identité spécifiée de la collection d'éléments, ce paramètre de sortie contient la valeur Null.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type spécifié et le nom d'espace de noms de cette collection d'éléments.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="type">Lorsque cette méthode retourne une valeur, ce paramètre de sortie contient un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.S'il n'y a aucun type ayant le nom spécifié et le nom d'espace de noms de la collection d'éléments, ce paramètre de sortie contient la valeur Null.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type spécifié et le nom d'espace de noms de cette collection d'éléments.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
      <param name="type">Lorsque cette méthode retourne une valeur, ce paramètre de sortie contient un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.S'il n'y a aucun type ayant le nom spécifié et le nom d'espace de noms de la collection d'éléments, ce paramètre de sortie contient la valeur Null.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>Représente une classe d'élément de base pour toutes les métadonnées</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>Ajoute ou met à jour une annotation avec le nom et la valeur spécifiés.</summary>
      <param name="name">Nom de la propriété de l'annotation.</param>
      <param name="value">Valeur de la propriété de l'annotation.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>Obtient le type intégré de ce type.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de ce type.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>Obtient ou définit la documentation associée à ce type.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> qui représente la documentation sur ce type.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>Retourne le type intégré de modèle conceptuel qui correspond à l'une des valeurs de <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui représente le type intégré du modèle EDM.</returns>
      <param name="builtInTypeKind">Une des valeurs de <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>Retourne la liste des descriptions de facettes générales pour le type spécifié.</summary>
      <returns>Objet <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui représente la liste des descriptions de facettes générales pour le type spécifié.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>Obtient la liste des propriétés du type en cours.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des propriétés du type en cours.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>Supprime une annotation portant le nom spécifié.</summary>
      <returns>true si une annotation a été supprimée ; sinon, false.</returns>
      <param name="name">Nom de la propriété de l'annotation.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>Classe représentant un attribut de métadonnées pour un élément</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Méthode de fabrique pour créer l'objet MetadataProperty.</summary>
      <returns>Objet MetadataProperty.</returns>
      <param name="name">Nom de la propriété de métadonnées.</param>
      <param name="typeUsage">Utilisation de type de la propriété de métadonnées.</param>
      <param name="value">Valeur de la propriété de métadonnées.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="typeUsage" /> levé est null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.CreateAnnotation(System.String,System.Object)">
      <summary>Crée une annotation de métadonnées ayant le nom et la valeur spécifiés.</summary>
      <returns>Instance de MetadataProperty qui représente l'annotation créée.</returns>
      <param name="name">Nom de l'annotation.</param>
      <param name="value">Valeur d'annotation.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
      <summary>Obtient une valeur booléenne qui indique si la propriété de métadonnées est une annotation.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>Obtient le nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>Obtient la valeur de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.</summary>
      <returns>Valeur de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>Obtient l'instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient à la fois le type de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> et les facettes du type.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient à la fois le type de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> et les facettes du type.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>Obtient la valeur de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Valeur de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>Espace de travail des métadonnées de runtime</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> à l'aide des chemins d'accès et des assemblys spécifiés.</summary>
      <param name="paths">Chemins d'accès aux métadonnées de l'espace de travail.</param>
      <param name="assembliesToConsider">Noms des assemblys utilisés pour construire l'espace de travail.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>Construit un <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> avec des chargeurs pour toutes les collections d'éléments ( <see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" /> ) fournies avec le mappage EDMX traditionnel.Les collections de mappages o-space et o/c par défaut seront utilisées.Les délégués de la collection d'éléments sont exécutés de manière différée lorsqu'une collection donnée est utilisée pour la première fois.Il est acceptable de passer un délégué qui retourne une valeur null si la collection ne sera jamais utilisée, mais cela arrive rarement et toute tentative par Entity Framework d'utiliser la collection dans de pareils cas entraîne la levée d'une exception.</summary>
      <param name="cSpaceLoader">Délégué pour retourner la collection d'éléments de l'espace C (CSDL).</param>
      <param name="sSpaceLoader">Délégué pour retourner la collection d'éléments de l'espace S (SSDL).</param>
      <param name="csMappingLoader">Délégué pour retourner la collection d'éléments de l'espace C/S (MSL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>Construit un <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> avec des chargeurs pour toutes les collections d'éléments (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />) requises par Entity Framework, à l'exception du mappage o/c qui sera créé automatiquement en fonction des chargeurs o-space et c-space donnés.Les délégués de la collection d'éléments sont exécutés de manière différée lorsqu'une collection donnée est utilisée pour la première fois.Il est acceptable de passer un délégué qui retourne une valeur null si la collection ne sera jamais utilisée, mais cela arrive rarement et toute tentative par Entity Framework d'utiliser la collection dans de pareils cas entraîne la levée d'une exception.</summary>
      <param name="cSpaceLoader">Délégué pour retourner la collection d'éléments de l'espace C (CSDL).</param>
      <param name="sSpaceLoader">Délégué pour retourner la collection d'éléments de l'espace S (SSDL).</param>
      <param name="csMappingLoader">Délégué pour retourner la collection d'éléments de l'espace C/S (MSL).</param>
      <param name="oSpaceLoader">Délégué pour retourner la collection d'éléments de l'espace O.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>Efface toutes les entrées du cache de métadonnées.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" /> configuré pour utiliser l'espace de données <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" />.</summary>
      <returns>Objet analyseur créé.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crée un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> qui est lié à cet espace de travail des métadonnées en fonction de l'expression de requête spécifiée.</summary>
      <returns>Nouveau <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> avec l'expression spécifiée comme étant sa propriété <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" />.</returns>
      <param name="query">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> qui définit la requête.</param>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="query" /> a la valeur null</exception>
      <exception cref="T:System.ArgumentException">Si <paramref name="query" /> contient des métadonnées qui ne peuvent pas être résolues dans cet espace de travail des métadonnées</exception>
      <exception cref="T:System.ArgumentException">Si <paramref name="query" /> n'est pas valide d'un point de vue structurel car il contient des références de variables non résolues</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui correspond au type fourni par le paramètre objectSpaceType.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.S'il n'existe aucune correspondance de type, cette méthode retourne la valeur Null.</returns>
      <param name="objectSpaceType">Objet <see cref="T:System.Data.Metadata.Edm.EnumlType" /> qui fournit le type de l'espace d'objet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui correspond au type fourni par le paramètre objectSpaceType.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.S'il n'existe aucune correspondance de type, cette méthode retourne la valeur Null.</returns>
      <param name="objectSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui fournit le type de l'espace d'objet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités et le modèle de données spécifiés.</summary>
      <returns>S'il n'y a aucun conteneur d'entités, cette méthode retourne la valeur Null ; sinon, elle retourne le premier conteneur d'entités.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le conteneur d'entités fait l'objet d'une recherche.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités et le modèle de données spécifiés.</summary>
      <returns>S'il n'y a aucun conteneur d'entités, cette méthode retourne la valeur Null ; sinon, elle retourne le premier conteneur d'entités.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le conteneur d'entités fait l'objet d'une recherche.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne toutes les surcharges des fonctions en utilisant le nom, le nom d'espace de noms et le modèle de données spécifiés.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient toutes les fonctions qui correspondent au nom spécifié dans un espace de noms et un modèle de données donnés.</returns>
      <param name="name">Nom de la fonction.</param>
      <param name="namespaceName">Espace de noms de la fonction.</param>
      <param name="dataSpace">Modèle conceptuel dans lequel les fonctions font l'objet d'une recherche.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Retourne toutes les surcharges des fonctions en utilisant le nom, le nom d'espace de noms et le modèle de données spécifiés.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient toutes les fonctions qui correspondent au nom spécifié dans un espace de noms et un modèle de données donnés.</returns>
      <param name="name">Nom de la fonction.</param>
      <param name="namespaceName">Espace de noms de la fonction.</param>
      <param name="dataSpace">Modèle conceptuel dans lequel les fonctions font l'objet d'une recherche.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne un élément en utilisant l'identité et le modèle de données spécifiés.</summary>
      <returns>Élément qui correspond à l'identité donnée dans le modèle de données spécifié.</returns>
      <param name="identity">Identité de l'élément.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel l'élément fait l'objet d'une recherche.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne un élément en utilisant l'identité et le modèle de données spécifiés.</summary>
      <returns>Élément qui correspond à l'identité donnée dans le modèle de données spécifié.</returns>
      <param name="identity">Identité de l'élément.</param>
      <param name="dataSpace">Modèle conceptuel dans lequel l'élément fait l'objet d'une recherche.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Obtient les éléments <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>Éléments <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" /> d'où les éléments doivent être récupérés.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Obtient tous les éléments du modèle de données spécifié.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient tous les éléments du modèle de données spécifié.</returns>
      <param name="dataSpace">Modèle conceptuel pour lequel la liste d'éléments est requise.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Obtient tous les éléments du modèle de données spécifié.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient tous les éléments du modèle de données spécifié.</returns>
      <param name="dataSpace">Modèle conceptuel pour lequel la liste d'éléments est requise.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type d'espace d'objet correspondant au type fourni par le paramètre edmSpaceType.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type d'espace d'objet.S'il n'existe aucune correspondance de type, cette méthode retourne la valeur Null.</returns>
      <param name="edmSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type d'espace d'objet correspondant au type fourni par le paramètre edmSpaceType.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type d'espace d'objet.S'il n'existe aucune correspondance de type, cette méthode retourne la valeur Null.</returns>
      <param name="edmSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne la liste des types primitifs du modèle de données spécifié.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient tous les types primitifs du modèle de données spécifié.</returns>
      <param name="dataSpace">Modèle de données pour lequel vous avez besoin de la liste des types primitifs.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>Retourne les membres d'un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> / <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> donné pour lequel les valeurs d'origine sont nécessaires lors de la modification d'une entité.</summary>
      <returns>Membres <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> pour lesquels la valeur d'origine est requise.</returns>
      <param name="entitySet">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> qui appartient à l'espace C.</param>
      <param name="entityType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> qui participe au <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> donné.</param>
      <param name="partialUpdateSupported">true si les entités peuvent être partiellement mises à jour ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>Obtient les membres des valeurs d'origine à partir d'un jeu et d'un type d'entités.</summary>
      <returns>Membres des valeurs d'origine à partir d'un jeu et d'un type d'entités.</returns>
      <param name="entitySet">Jeu d'entités à partir duquel extraire les valeurs d'origine.</param>
      <param name="entityType">Type d'entité à partir duquel extraire les valeurs d'origine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type, le nom d'espace de noms et le modèle de données spécifiés.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le type fait l'objet d'une recherche.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type, le nom d'espace de noms et le modèle de données spécifiés.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui représente le type correspondant au nom de type donné et au nom d'espace de noms du modèle de données spécifié.S'il n'existe aucune correspondance de type, cette méthode retourne la valeur Null.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le type fait l'objet d'une recherche.</param>
      <exception cref="T:System.ArgumentException">Levé si l'espace n'est pas valide.L'espace valide est C, O, CS ou OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Charge les métadonnées à partir de l'assembly donné.</summary>
      <param name="assembly">Assembly à partir duquel les métadonnées seront chargées.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Charge les métadonnées à partir de l'assembly donné.</summary>
      <param name="assembly">Assembly à partir duquel les métadonnées seront chargées.</param>
      <param name="logLoadMessage">Délégué pour l'enregistrement des messages de charge.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>Version EDM maximale qui va être prise en charge par le runtime.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>Inscrit la collection d'éléments avec chaque modèle de données qui lui est associé.</summary>
      <param name="collection">Collection de paramètres de sortie qui doit être remplie.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> via le paramètre de sortie edmSpaceType qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> correspondant au type fourni par le paramètre objectSpaceType.</summary>
      <returns>retourne la valeur true en cas de réussite, false en cas d'échec.</returns>
      <param name="objectSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> qui représente le type d'espace d'objet.</param>
      <param name="edmSpaceType">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> via le paramètre de sortie edmSpaceType qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> correspondant au type fourni par le paramètre objectSpaceType.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="objectSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type d'espace d'objet.</param>
      <param name="edmSpaceType">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités et le modèle de données spécifiés.</summary>
      <returns>true si un conteneur d'entités correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le conteneur d'entités fait l'objet d'une recherche.</param>
      <param name="entityContainer">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.S'il n'y a aucun conteneur d'entités, ce paramètre de sortie contient la valeur Null ; sinon, il retourne le premier conteneur d'entités.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en utilisant le nom de conteneur d'entités et le modèle de données spécifiés.</summary>
      <returns>true si un conteneur d'entités correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du conteneur d'entités.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le conteneur d'entités fait l'objet d'une recherche.</param>
      <param name="entityContainer">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.S'il n'y a aucun conteneur d'entités, ce paramètre de sortie contient la valeur Null ; sinon, il retourne le premier conteneur d'entités.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Retourne un élément en utilisant l'identité et le modèle de données spécifiés.</summary>
      <returns>true si un élément correspond aux critères de recherche ; sinon, false.</returns>
      <param name="identity">Modèle conceptuel sur lequel l'élément fait l'objet d'une recherche.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel l'élément fait l'objet d'une recherche.</param>
      <param name="item">Cette méthode retourne un objet <see cref="T:System.Data.Metadata.Edm.GlobalIem" />.Ce paramètre est passé sans être initialisé.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Retourne un élément en utilisant l'identité et le modèle de données spécifiés.</summary>
      <returns>true si un élément correspond aux critères de recherche ; sinon, false.</returns>
      <param name="identity">Modèle conceptuel sur lequel l'élément fait l'objet d'une recherche.</param>
      <param name="space">Modèle conceptuel sur lequel l'élément fait l'objet d'une recherche.</param>
      <param name="item">Cette méthode retourne un objet <see cref="T:System.Data.Metadata.Edm.GlobalIem" />.Ce paramètre est passé sans être initialisé.</param>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>Teste la récupération de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>True si la récupération a réussi, sinon false.</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" /> à partir duquel tester la récupération de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</param>
      <param name="collection">Cette méthode retourne la collection d'éléments.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> via le paramètre de sortie objectSpaceType qui représente le type correspondant au <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> fourni par le paramètre edmSpaceType.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="edmSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />qui représente le type d'espace d'objet.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> via le paramètre de sortie objectSpaceType qui représente le type correspondant au <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> fourni par le paramètre edmSpaceType.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="edmSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />qui représente le type d'espace d'objet.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type, le nom d'espace de noms et le modèle de données spécifiés.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le type fait l'objet d'une recherche.</param>
      <param name="type">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> en utilisant le nom de type, le nom d'espace de noms et le modèle de données spécifiés.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="name">Nom du type.</param>
      <param name="namespaceName">Espace de noms du type.</param>
      <param name="dataSpace">Modèle conceptuel sur lequel le type fait l'objet d'une recherche.</param>
      <param name="type">Cette méthode retourne un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>Représente la classe de la propriété de navigation EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crée une instance de NavigationProperty à partir des paramètres spécifiés.</summary>
      <returns>Instance de NavigationProperty nouvellement créée.</returns>
      <param name="name">Nom de la propriété de navigation.</param>
      <param name="typeUsage">Spécifie le type de propriété de navigation et ses facettes.</param>
      <param name="relationshipType">Type de relation de navigation.</param>
      <param name="from">Membre de terminaison source de la navigation.</param>
      <param name="to">Membre de terminaison cible de la navigation.</param>
      <param name="metadataProperties">Propriétés de métadonnées de la propriété de navigation.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Obtient le membre de terminaison de relation « from » de cette navigation.</summary>
      <returns>Membre de terminaison de relation « from » de cette navigation.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Lorsque la propriété de navigation indiquée se trouve sur la terminaison dépendante d'une contrainte référentielle, retourne les propriétés de clé étrangère.Sinon, la fonction retourne un ensemble vide.Les membres sont retournés dans l'ordre des propriétés de clé de terminaison principale.</summary>
      <returns>Collection des propriétés de clé étrangère.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Obtient le type de relation sur lequel cette propriété de navigation opère.</summary>
      <returns>Type de relation sur lequel cette propriété de navigation opère.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Obtient le membre de terminaison de relation « to » de cette navigation.</summary>
      <returns>Membre de terminaison de relation « to » de cette navigation.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>Classe pour représenter une collection d'éléments de la couche objet.L'essentiel de l'implémentation de la maintenance réelle de la collection est effectué par ItemCollection.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>La méthode retourne le type CLR sous-jacent pour l'argument de type OSpace spécifié.Si le DataSpace du paramètre n'est pas OSpace, une exception ArgumentException est levée.</summary>
      <returns>Type CLR de l'argument OSpace.</returns>
      <param name="objectSpaceType">Type OSpace à rechercher.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Retourne le type CLR qui correspond à l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> fourni par le paramètre objectSpaceType.</summary>
      <returns>Type CLR de l'argument OSpace.</returns>
      <param name="objectSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type d'espace d'objet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Retourne tous les éléments du type spécifié dans cette collection d'éléments.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient tous les éléments du type spécifié.</returns>
      <typeparam name="T">Type retourné par la méthode.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Retourne une collection d'objets de type primitif.</summary>
      <returns>Collection d'objets de type primitif.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Charge les métadonnées à partir de l'assembly donné.</summary>
      <param name="assembly">Assembly à partir duquel les métadonnées seront chargées.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>Charge les métadonnées à partir de l'assembly spécifié.</summary>
      <param name="assembly">Assembly à partir duquel les métadonnées seront chargées.</param>
      <param name="edmItemCollection">Source des métadonnées EDM pour les métadonnées de l'espace O.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Charge les métadonnées à partir de l'assembly donné.</summary>
      <param name="assembly">Assembly à partir duquel les métadonnées seront chargées.</param>
      <param name="edmItemCollection">Source des métadonnées EDM pour les métadonnées de l'espace O.</param>
      <param name="logLoadMessage">Délégué auquel les messages de journal sont envoyés.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>Retourne le type CLR sous-jacent pour l'argument de type enum OSpace spécifié.Si le DataSpace du paramètre n'est pas OSpace, la méthode retourne false et affecte la valeur Null au paramètre de sortie.</summary>
      <returns>retourne la valeur true en cas de réussite, false en cas d'échec</returns>
      <param name="objectSpaceType">Type enum OSpace à rechercher</param>
      <param name="clrType">Type enum CLR de l'argument OSpace</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Retourne un type CLR correspondant à l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> fourni par le paramètre objectSpaceType.</summary>
      <returns>true si un type correspond aux critères de recherche ; sinon, false.</returns>
      <param name="objectSpaceType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> qui représente le type d'espace d'objet.</param>
      <param name="clrType">Type CLR.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>Représente la liste d'actions possibles pour l'opération de suppression</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>En cascade jusqu'aux autres terminaisons</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>aucune action</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>Énumération qui définit le mode d'un paramètre</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>Paramètre d'entrée</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>Paramètre d'entrée et de sortie</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>Paramètre de sortie</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>Paramètre de retour</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>Énumération définissant la sémantique de type utilisée pour résoudre les surcharges de fonction.Ces indicateurs sont définis dans le manifeste du fournisseur par définition de fonction.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>Autorise la conversion implicite entre les types d'arguments donnés et les types d'arguments formels (valeur par défaut).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>Autorise la promotion de type entre les types d'arguments donnés et les types d'arguments formels.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>Utilise l'équivalence stricte uniquement.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>Classe représentant un type primitif</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Retourne un type CLR (Common Language Runtime) équivalent de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.Notez que la propriété <see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> retourne toujours une valeur de type non-Nullable.</summary>
      <returns>Objet <see cref="T:System.Type" /> qui représente un type CLR (Common Language Runtime) équivalent de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Obtient la liste des descriptions de facettes pour cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient la liste des descriptions de facettes pour cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> équivalent de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui est un équivalent de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> équivalent d'un <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui est un équivalent d'un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> spécifié.</returns>
      <param name="primitiveTypeKind">Valeur de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Retourne la liste des types primitifs.</summary>
      <returns>Collection de type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient la liste des types primitifs.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Obtient une valeur d'énumération <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> qui indique un type primitif de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Valeur d'énumération <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> qui indique un type primitif de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>Types primitifs tels que définis par EDM</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Genre de type binaire</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Genre de type booléen</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Genre de type octet</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>Genre de type DateTime</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>Genre de type DateTimeOffset</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Genre de type décimal</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Genre de type double</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Genre de type Geography</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Genre de type collection géographique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Genre de type linestring géographique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Genre de type de géographie à plusieurs linestring</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Genre de type de géographie à plusieurs points</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Genre de type de géographie à plusieurs polygones</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Genre de type point géographique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Genre de type polygone géographique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Genre de type Geometry</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Genre de type collection géométrique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Genre de type géométrique linestring</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Genre de type de géométrie à plusieurs linestring</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Genre de type de géométrie à plusieurs points</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Genre de type de géométrie à plusieurs polygones</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Genre de type point géométrique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Genre de type polygone géométrique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Genre de type GUID</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Genre de type Int16</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Genre de type Int32</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Genre de type Int64</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>Genre de type SByte</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Genre de type unique</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>Genre de type de chaîne</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Genre de type Time</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>Spécifie les genres des attributs d'éléments du modèle conceptuel.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>Membre de l'énumération indiquant qu'un attribut d'élément est Extended.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>Membre de l'énumération indiquant qu'un attribut d'élément est System.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Classe pour représenter un wrapper en lecture seule autour de MetadataCollection</summary>
      <typeparam name="T">Type des éléments dans cette collection</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Détermine si la collection contient un élément ayant l'identité spécifiée.</summary>
      <returns>true si la collection contient l'élément à rechercher ; sinon, false.La valeur par défaut est false.</returns>
      <param name="identity">Identité de l'élément.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Retourne un énumérateur qui peut itérer au sein de cette collection.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> qui peut être utilisé pour itérer au sein de cet objet <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Récupère un élément de cette collection en utilisant l'identité spécifiée.</summary>
      <returns>Élément de cette collection.</returns>
      <param name="identity">Identité de l'élément à rechercher.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Retourne l'index de la valeur spécifiée dans cette collection.</summary>
      <returns>Index de la valeur spécifiée dans cette collection.</returns>
      <param name="value">Valeur à rechercher.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>true si cette collection est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Obtient un élément de cette collection en utilisant l'identité spécifiée.</summary>
      <returns>Élément de cette collection.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Récupère un élément de cette collection en utilisant l'identité spécifiée.</summary>
      <returns>true si un élément correspond aux critères de recherche ; sinon, false.</returns>
      <param name="identity">Identité de l'élément à rechercher.</param>
      <param name="ignoreCase">true pour effectuer une recherche ne respectant pas la casse ; sinon, false.</param>
      <param name="item">Lorsque cette méthode retourne une valeur, ce paramètre de sortie contient un élément de la collection.S'il n'existe aucune correspondance d'élément, ce paramètre de sortie contient la valeur Null.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Énumérateur pour MetadataCollection.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Obtient le membre situé à la position actuelle.</summary>
      <returns>Membre situé à la position actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Supprime cet énumérateur.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Se déplace vers le membre suivant de la collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />.</summary>
      <returns>true si l'énumérateur est déplacé dans la collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" /> ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Place l'énumérateur avant la première position de la collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient le membre situé à la position actuelle</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>Cette classe représente une contrainte référentielle entre deux entités spécifiant les terminaisons « to » et « from » de la relation.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Construit une nouvelle contrainte sur la relation</summary>
      <param name="fromRole">rôle dont provient la relation</param>
      <param name="toRole">rôle auquel la relation est liée, pour lequel elle est ciblée</param>
      <param name="fromProperties">propriétés du type d'entité de rôle cible qui participent à la contrainte</param>
      <param name="toProperties">propriétés du type d'entité de rôle source qui participent à la contrainte</param>
      <exception cref="T:System.ArgumentNullException">Exception d'argument Null si l'un des arguments a la valeur Null</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Obtient la liste des propriétés du « rôle à partir de » sur lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> est défini.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des propriétés du « rôle à partir de » sur lequel cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> est défini.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Obtient le « rôle source » qui participe à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> qui représente le « rôle source » qui participe à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Obtient la liste des propriétés du « rôle vers » sur lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> est défini.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des propriétés du « rôle vers » sur lequel cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> est défini.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Obtient le « rôle vers » qui participe à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> qui représente le « rôle cible » qui participe à cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Retourne la combinaison du nom de l'objet <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> et du nom de l'objet <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />.</summary>
      <returns>Combinaison du nom de l'objet <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> et du nom de l'objet <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>Représente une classe pour un type de référence.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>Obtient le type d'entité référencé par cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> qui représente le type d'entité référencé par cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié équivaut à l'instance actuelle.</summary>
      <returns>true si l'objet spécifié est égal à l'instance actuelle ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>Initialise une nouvelle instance de la classe RelationshipEndMember</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Obtient le comportement opérationnel de ce membre de terminaison de la relation.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" />.La valeur par défaut est <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Accédez à l'EntityType de l'EndMember dans une association.</summary>
      <returns>EntityType de l'EndMember dans une association.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Obtient la multiplicité de ce membre de terminaison de la relation.</summary>
      <returns>Une des valeurs de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>Représente les informations de multiplicité relatives à la terminaison d'un type de relation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>Une limite inférieure est zéro et une limite supérieure est nulle</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>Limite inférieure et limite supérieure sont un</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>Une limite inférieure est zéro et une limite supérieure est un</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>Classe pour représenter un jeu de relations</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Obtient le type de relation de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" /> qui représente le type de relation de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>Représente le type de relation</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Obtient la liste des terminaisons de ce type de relation.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des terminaisons de ce type de relation.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>Représente le type de ligne EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Méthode de fabrique pour créer l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Nouvelle instance en lecture seule de l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</returns>
      <param name="properties">Propriétés de l'objet de type de ligne.</param>
      <param name="metadataProperties">Propriétés de métadonnées qui sont ajoutées à la fonction.Peut être Null.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>Obtient une collection des propriétés définies par le type actuel.</summary>
      <returns>Collection des propriétés définies par le type actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>Obtient la liste des propriétés de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste des propriétés de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>Classe représentant un type simple</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>Fournit des méthodes pour la sérialisation de la section (de base de données) de stockage d'un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> en XML.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer" />.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>Se produit lorsqu'une erreur est rencontrée lors de la sérialisation du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Sérialise le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> dans <see cref="T:System.Xml.XmlWriter" /></summary>
      <returns>true si le modèle peut être sérialisé ; sinon, false.</returns>
      <param name="dbDatabase">EdmModel à sérialiser.</param>
      <param name="namespaceName">Nom de l'espace de noms sur l'élément de schéma.</param>
      <param name="provider">Informations sur le fournisseur sur l'élément de schéma.</param>
      <param name="providerManifestToken">Informations sur le ProviderManifestToken sur l'élément de schéma.</param>
      <param name="xmlWriter">XmlWriter pour la sérialisation.</param>
      <param name="serializeDefaultNullability">Valeur indiquant s'il faut sérialiser les attributs acceptant la valeur Null lorsqu'ils sont définis avec la valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Sérialise le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> dans <see cref="T:System.Xml.XmlWriter" /></summary>
      <returns>true si le modèle peut être sérialisé ; sinon, false.</returns>
      <param name="dbDatabase">EdmModel à sérialiser.</param>
      <param name="provider">Informations sur le fournisseur sur l'élément de schéma.</param>
      <param name="providerManifestToken">Informations sur le ProviderManifestToken sur l'élément de schéma.</param>
      <param name="xmlWriter">XmlWriter pour la sérialisation.</param>
      <param name="serializeDefaultNullability">Valeur indiquant s'il faut sérialiser les attributs acceptant la valeur Null lorsqu'ils sont définis avec la valeur par défaut.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>Modèle pour les propriétés générées par le serveur.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>Une valeur est générée aussi bien lors d'une insertion que lors d'une mise à jour.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>Une valeur est générée lors d'une insertion, mais reste inchangée lors d'une mise à jour.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>N'est pas une propriété générée par le serveur.Il s'agit de la valeur par défaut.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>Classe pour représenter une collection d'éléments dans l'espace du magasin.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> avec le XMLReader spécifié.</summary>
      <param name="xmlReaders">XMLReader utilisé pour créer les métadonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="model">Modèle de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> à l'aide des chemins d'accès aux fichiers spécifiés.</summary>
      <param name="filePaths">Chemins d'accès aux fichiers utilisés pour créer les métadonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Méthode de fabrique qui crée un <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> si aucune erreur n'est rencontrée.Sinon, null.</returns>
      <param name="xmlReaders">Artefacts SSDL à charger.Ne doit pas être null.</param>
      <param name="filePaths">Chemins d'accès aux artefacts SSDL.Utilisé dans les messages d'erreur.Peut être null, auquel cas l'URI de base du XmlReader sera utilisé comme chemin d'accès.</param>
      <param name="resolver">Programme de résolution personnalisé.Actuellement utilisé pour résoudre l'implémentation de DbProviderServices.Si la valeur est null, le résolveur par défaut est utilisé.</param>
      <param name="errors">Collection d'erreurs rencontrées lors du chargement.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Retourne une collection des objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Objet <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui représente la collection des objets <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>Obtient la fabrique de fournisseur du StoreItemCollection.</summary>
      <returns>Fabrique de fournisseur du StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>Obtient le nom invariant du StoreItemCollection.</summary>
      <returns>Nom invariant du StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>Obtient le manifeste du fournisseur du StoreItemCollection.</summary>
      <returns>Manifeste du fournisseur du StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>Obtient le jeton de manifeste du StoreItemCollection.</summary>
      <returns>Jeton de manifeste du StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>Obtient la version du schéma de magasin pour cette collection.</summary>
      <returns>Version du schéma de magasin pour cette collection.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>Représente le type structurel</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Ajoute un membre à ce type</summary>
      <param name="member">Membre à ajouter</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>Obtient la liste des membres sur ce type.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient un ensemble de membres sur ce type.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Supprime un membre de ce type.</summary>
      <param name="member">Membre à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>Classe représentant les informations de type d'un élément</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Obtient le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> qui représente le type intégré de cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>Méthode de fabrique pour créer un TypeUsage avec l'EdmType et les facettes spécifiés</summary>
      <returns>nouvelle instance de TypeUsage</returns>
      <param name="edmType">EdmType pour lequel l'utilisation de type doit être créée</param>
      <param name="facets">facettes à copier dans le nouveau TypeUsage</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> pour décrire un type binaire en utilisant les valeurs de facettes spécifiées.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> décrivant un type binaire en utilisant les valeurs de facettes spécifiées.</returns>
      <param name="primitiveType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> pour lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est créé.</param>
      <param name="isFixedLength">true pour définir une longueur fixe comme longueur du type binaire ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> pour décrire un type binaire en utilisant les valeurs de facettes spécifiées.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> décrivant un type binaire en utilisant les valeurs de facettes spécifiées.</returns>
      <param name="primitiveType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> pour lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est créé.</param>
      <param name="isFixedLength">true pour définir une longueur fixe comme longueur du type binaire ; sinon, false.</param>
      <param name="maxLength">Longueur maximale du type binaire.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Crée un objet <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> du type que les paramètres décrivent.</summary>
      <returns>Objet <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" />.</returns>
      <param name="primitiveType">Type simple qui définit les unités de mesure du décalage.</param>
      <param name="precision">Degré de granularité de DateTimeOffset <see cref="T:System." /> en fractions de seconde, basé sur le nombre de décimales prises en charge.Par exemple, une précision de 3 indique que la granularité prise en charge correspond aux millisecondes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Crée un objet <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> du type que les paramètres décrivent.</summary>
      <returns>Objet <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" />.</returns>
      <param name="primitiveType">Type simple qui définit les unités de mesure de l'objet DateTime <see cref="T:System." />.</param>
      <param name="precision">Degré de granularité de DateTimeOffset <see cref="T:System." /> en fractions de seconde, basé sur le nombre de décimales prises en charge.Par exemple, une précision de 3 indique que la granularité prise en charge correspond aux millisecondes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> pour décrire un type décimal avec des valeurs de précision et d'échelle illimitées pour les facettes.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> décrivant un type décimal avec des valeurs de précision et d'échelle illimitées pour les facettes.</returns>
      <param name="primitiveType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> pour lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est créé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> pour décrire un type décimal en utilisant les valeurs de facettes spécifiées.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> décrivant un type décimal en utilisant les valeurs de facettes spécifiées.</returns>
      <param name="primitiveType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> pour lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est créé.</param>
      <param name="precision">Précision du type décimal comme type <see cref="T:System.Byte" />.</param>
      <param name="scale">Échelle du type décimal comme type <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> avec le type de modèle conceptuel spécifié.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> présentant les deux valeurs de facettes par défaut pour l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> spécifié.</returns>
      <param name="edmType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> pour lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est créé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> pour décrire un type chaîne en utilisant les valeurs de facettes et la valeur MaxLength illimitée spécifiées.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> décrivant un type chaîne en utilisant les valeurs de facettes et la valeur MaxLength illimitée spécifiées.</returns>
      <param name="primitiveType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> pour lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est créé.</param>
      <param name="isUnicode">true pour définir Unicode comme norme d'encodage de caractères du type chaîne ; sinon, false.</param>
      <param name="isFixedLength">true pour définir une longueur fixe comme longueur du type chaîne ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> pour décrire un type chaîne en utilisant les valeurs de facettes spécifiées.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> décrivant un type chaîne en utilisant les valeurs de facettes spécifiées.</returns>
      <param name="primitiveType">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> pour lequel l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est créé.</param>
      <param name="isUnicode">true pour définir Unicode comme norme d'encodage de caractères du type chaîne ; sinon, false.</param>
      <param name="isFixedLength">true pour définir Unicode comme norme d'encodage de caractères du type chaîne ; sinon, false.</param>
      <param name="maxLength">true pour définir une longueur fixe comme longueur du type chaîne ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Crée un objet <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> du type que les paramètres décrivent.</summary>
      <returns>Objet <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" />.</returns>
      <param name="primitiveType">Type simple qui définit les unités de mesure de l'objet DateTime <see cref="T:System." />.</param>
      <param name="precision">Degré de granularité de DateTimeOffset <see cref="T:System." /> en fractions de seconde, basé sur le nombre de décimales prises en charge.Par exemple, une précision de 3 indique que la granularité prise en charge correspond aux millisecondes.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>Obtient les informations de type décrites par cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> qui représente les informations de type décrites par cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>Obtient la liste de facettes pour le type décrit par cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Collection de type <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> qui contient la liste de facettes pour le type qui est décrit par cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Vérifie si cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est un sous-type de l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> spécifié.</summary>
      <returns>true si cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> est un sous-type de l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />spécifié ; sinon, false.</returns>
      <param name="typeUsage">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> à vérifier.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>Retourne une utilisation du type de modèle pour un type de fournisseur</summary>
      <returns>Utilisation de type de modèle (CSpace)</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>Retourne le nom complet du type décrit par cet objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Nom complet du type décrit par cette chaîne <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>Met en cache une requête ELinq</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`10" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`11" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TArg9">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg9 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`12" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TArg9">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg9 doit être un type primitif.</typeparam>
      <typeparam name="TArg10">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg10 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`13" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TArg9">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg9 doit être un type primitif.</typeparam>
      <typeparam name="TArg10">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg10 doit être un type primitif.</typeparam>
      <typeparam name="TArg11">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg11 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`14" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TArg9">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg9 doit être un type primitif.</typeparam>
      <typeparam name="TArg10">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg10 doit être un type primitif.</typeparam>
      <typeparam name="TArg11">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg11 doit être un type primitif.</typeparam>
      <typeparam name="TArg12">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg12 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`15" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TArg9">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg9 doit être un type primitif.</typeparam>
      <typeparam name="TArg10">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg10 doit être un type primitif.</typeparam>
      <typeparam name="TArg11">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg11 doit être un type primitif.</typeparam>
      <typeparam name="TArg12">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg12 doit être un type primitif.</typeparam>
      <typeparam name="TArg13">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg13 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`16" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TArg9">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg9 doit être un type primitif.</typeparam>
      <typeparam name="TArg10">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg10 doit être un type primitif.</typeparam>
      <typeparam name="TArg11">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg11 doit être un type primitif.</typeparam>
      <typeparam name="TArg12">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg12 doit être un type primitif.</typeparam>
      <typeparam name="TArg13">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg13 doit être un type primitif.</typeparam>
      <typeparam name="TArg14">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg14 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`17" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TArg8">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg8 doit être un type primitif.</typeparam>
      <typeparam name="TArg9">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg9 doit être un type primitif.</typeparam>
      <typeparam name="TArg10">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg10 doit être un type primitif.</typeparam>
      <typeparam name="TArg11">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg11 doit être un type primitif.</typeparam>
      <typeparam name="TArg12">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg12 doit être un type primitif.</typeparam>
      <typeparam name="TArg13">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg13 doit être un type primitif.</typeparam>
      <typeparam name="TArg14">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg14 doit être un type primitif.</typeparam>
      <typeparam name="TArg15">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg15 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`2" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`3" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`4" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`5" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`6" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`7" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`8" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Crée un nouveau délégué qui représente la requête LINQ to Entities compilée.</summary>
      <returns>
        <see cref="T:System.Func`9" />, délégué générique qui représente la requête LINQ to Entities compilée.</returns>
      <param name="query">Expression lambda à compiler.</param>
      <typeparam name="TArg0">Type dérivé de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg1 doit être un type primitif.</typeparam>
      <typeparam name="TArg2">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg2 doit être un type primitif.</typeparam>
      <typeparam name="TArg3">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg3 doit être un type primitif.</typeparam>
      <typeparam name="TArg4">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg4 doit être un type primitif.</typeparam>
      <typeparam name="TArg5">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg5 doit être un type primitif.</typeparam>
      <typeparam name="TArg6">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg6 doit être un type primitif.</typeparam>
      <typeparam name="TArg7">Représente le type du paramètre qui doit être passé lors de l'exécution du délégué retourné par cette méthode.TArg7 doit être un type primitif.</typeparam>
      <typeparam name="TResult">Type T des résultats de la requête retournés en exécutant le délégué retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>Valeurs actuellement affectées aux propriétés d'une entité.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>Permet d'accéder aux valeurs d'origine des données d'objet.DbUpdatableDataRecord implémente des méthodes qui permettent de mettre à jour les valeurs d'origine d'un objet.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Obtient des informations sur les enregistrements de données.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Obtient le nombre de champs dans l'enregistrement.</summary>
      <returns>Valeur entière qui correspond au nombre de champs.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Récupère la valeur de champ en tant que valeur Boolean.</summary>
      <returns>Valeur de champ en tant que valeur Boolean.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Récupère la valeur de champ en tant qu'octet.</summary>
      <returns>Valeur du champ en tant qu'octet.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Récupère la valeur de champ en tant que tableau d'octets.</summary>
      <returns>Nombre d'octets copiés.</returns>
      <param name="i">Ordinal du champ.</param>
      <param name="dataIndex">Index où commencer la copie des données.</param>
      <param name="buffer">Mémoire tampon de destination où les données sont copiées.</param>
      <param name="bufferIndex">Index où la copie va commencer dans la mémoire tampon de destination.</param>
      <param name="length">Nombre d'octets à copier.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Récupère la valeur de champ en tant que valeur char.</summary>
      <returns>Valeur de champ en tant que valeur char.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Récupère la valeur de champ en tant que tableau de caractères.</summary>
      <returns>Nombre de caractères copiés.</returns>
      <param name="i">Ordinal du champ.</param>
      <param name="dataIndex">Index où commencer la copie des données.</param>
      <param name="buffer">Mémoire tampon de destination où les données sont copiées.</param>
      <param name="bufferIndex">Index où la copie va commencer dans la mémoire tampon de destination.</param>
      <param name="length">Nombre de caractères à copier.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Récupère une valeur de champ sous forme d'objet <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Récupère le nom du type de données de champ.</summary>
      <returns>Nom du type de données de champ.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.DateTime" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.DateTime" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Récupère la valeur de champ en tant que valeur décimale.</summary>
      <returns>Valeur de champ en tant que valeur décimale.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Récupère la valeur de champ en tant que valeur double.</summary>
      <returns>Valeur de champ en tant que valeur double.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Récupère le type d'un champ.</summary>
      <returns>Type de champ.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Récupère la valeur de champ en tant que valeur float.</summary>
      <returns>Valeur de champ en tant que valeur float.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.Guid" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Guid" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.Int16" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Int16" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.Int32" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Int32" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.Int64" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Int64" />.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Récupère le nom d'un champ.</summary>
      <returns>Nom du champ.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Récupère l'ordinal d'un champ en utilisant le nom du champ.</summary>
      <returns>Ordinal du champ.</returns>
      <param name="name">Nom du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Récupère la valeur d'un champ.</summary>
      <returns>Valeur du champ.</returns>
      <param name="ordinal">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Récupère la valeur de champ en tant que valeur chaîne.</summary>
      <returns>Valeur du champ.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Récupère la valeur d'un champ.</summary>
      <returns>Valeur du champ.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Remplit un tableau d'objets avec les valeurs de champ de l'enregistrement actif.</summary>
      <returns>Nombre de valeurs de champ retournées.</returns>
      <param name="values">Tableau d'objets dans lequel stocker les valeurs de champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Retourne une valeur indiquant si le champ spécifié a la valeur <see cref="T:System.DBNull" />.</summary>
      <returns>true si le champ a la valeur <see cref="T:System.DBNull" /> ; false dans le cas contraire.</returns>
      <param name="i">Ordinal du champ.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Retourne une valeur comportant l'ordinal de champ donné.</summary>
      <returns>Valeur comportant l'ordinal de champ donné.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Obtient une valeur comportant le nom de champ donné.</summary>
      <returns>Valeur du champ.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Affecte la valeur <see cref="T:System.DBNull" /> à un champ.</summary>
      <param name="ordinal">Ordinal du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Définit la valeur d'un champ dans un enregistrement.</summary>
      <param name="ordinal">Ordinal du champ.</param>
      <param name="value">Valeur du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Défini des valeurs de champ dans un enregistrement.</summary>
      <returns>Nombre de champs qui ont été définis.</returns>
      <param name="values">Valeurs du champ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Récupère la valeur de champ sous forme d'objet <see cref="T:System.Data.IDataReader" />.</summary>
      <returns>Valeur de champ sous forme d'objet <see cref="T:System.Data.IDataReader" />.</returns>
      <param name="ordinal">Ordinal du champ.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>Fournit les méthodes du common language runtime (CLR) qui exposent des fonctions canoniques EDM à utiliser dans les requêtes LINQ to Entities <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddDays pour ajouter le nombre de jours donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de jours à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddDays pour ajouter le nombre de jours donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de jours à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddHours pour ajouter le nombre d'heures donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'heures à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddHours pour ajouter le nombre d'heures donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'heures à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddHours pour ajouter le nombre d'heures donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'heures à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMicroseconds pour ajouter le nombre de microsecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de microsecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMicroseconds pour ajouter le nombre de microsecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de microsecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMicroseconds pour ajouter le nombre de microsecondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de microsecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMilliseconds pour ajouter le nombre de millisecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de millisecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMilliseconds pour ajouter le nombre de millisecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de millisecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMilliseconds pour ajouter le nombre de millisecondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de millisecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMinutes pour ajouter le nombre de minutes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de minutes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMinutes pour ajouter le nombre de minutes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de minutes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMinutes pour ajouter le nombre de minutes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de minutes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMonths pour ajouter le nombre de mois donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de mois à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddMonths pour ajouter le nombre de mois donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de mois à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddNanoseconds pour ajouter le nombre de nanosecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de nanosecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddNanoseconds pour ajouter le nombre de nanosecondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de nanosecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddNanoseconds pour ajouter le nombre de nanosecondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de nanosecondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddSeconds pour ajouter le nombre de secondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de secondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddSeconds pour ajouter le nombre de secondes donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de secondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddSeconds pour ajouter le nombre de secondes donné à un intervalle de temps.</summary>
      <returns>Intervalle de temps obtenu.</returns>
      <param name="timeValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre de secondes à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddYears pour ajouter le nombre d'années donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'années à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique AddYears pour ajouter le nombre d'années donné à une date/heure.</summary>
      <returns>Date/heure obtenue.</returns>
      <param name="dateValue">Date/heure d'entrée.</param>
      <param name="addValue">Nombre d'années à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode fait office d'opérateur qui garantit que l'entrée est traitée comme une chaîne non-Unicode.</summary>
      <returns>Chaîne d'entrée traitée comme une chaîne non-Unicode.</returns>
      <param name="value">Chaîne d'entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode fait office d'opérateur qui garantit que l'entrée est traitée comme une chaîne Unicode.</summary>
      <returns>Chaîne d'entrée traitée comme une chaîne Unicode.</returns>
      <param name="value">Chaîne d'entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique CreateDateTime pour créer un objet <see cref="T:System.DateTime" />.</summary>
      <returns>Nouvelle date/heure.</returns>
      <param name="year">Année.</param>
      <param name="month">Mois (de base 1).</param>
      <param name="day">Jour (de base 1).</param>
      <param name="hour">Heures.</param>
      <param name="minute">Minutes.</param>
      <param name="second">Secondes, y compris les parties fractionnaires des secondes si vous le souhaitez.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique CreateDateTimeOffset pour créer un objet <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Nouvelle date/heure.</returns>
      <param name="year">Année.</param>
      <param name="month">Mois (de base 1).</param>
      <param name="day">Jour (de base 1).</param>
      <param name="hour">Heures.</param>
      <param name="minute">Minutes.</param>
      <param name="second">Secondes, y compris les parties fractionnaires des secondes si vous le souhaitez.</param>
      <param name="timeZoneOffset">La partie décalage de fuseau horaire de la nouvelle date.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique CreateTime pour créer un objet <see cref="T:System.TimeSpan" />.</summary>
      <returns>Nouvel intervalle de temps.</returns>
      <param name="hour">Heures.</param>
      <param name="minute">Minutes.</param>
      <param name="second">Secondes, y compris les parties fractionnaires des secondes si vous le souhaitez.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffDays pour calculer le nombre de jours entre deux dates/heures.</summary>
      <returns>Nombre de jours entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffDays pour calculer le nombre de jours entre deux dates/heures.</summary>
      <returns>Nombre de jours entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffHours pour calculer le nombre d'heures entre deux dates/heures.</summary>
      <returns>Nombre d'heures entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffHours pour calculer le nombre d'heures entre deux dates/heures.</summary>
      <returns>Nombre d'heures entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffHours pour calculer le nombre d'heures entre deux intervalles de temps.</summary>
      <returns>Nombre d'heures entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMicroseconds pour calculer le nombre de microsecondes entre deux dates/heures.</summary>
      <returns>Nombre de microsecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMicroseconds pour calculer le nombre de microsecondes entre deux dates/heures.</summary>
      <returns>Nombre de microsecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMicroseconds pour calculer le nombre de microsecondes entre deux intervalles de temps.</summary>
      <returns>Nombre de microsecondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMilliseconds pour calculer le nombre de millisecondes entre deux dates/heures.</summary>
      <returns>Nombre de millisecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMilliseconds pour calculer le nombre de millisecondes entre deux dates/heures.</summary>
      <returns>Nombre de millisecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMilliseconds pour calculer le nombre de millisecondes entre deux intervalles de temps.</summary>
      <returns>Nombre de millisecondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMinutes pour calculer le nombre de minutes entre deux dates/heures.</summary>
      <returns>Nombre de minutes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMinutes pour calculer le nombre de minutes entre deux dates/heures.</summary>
      <returns>Nombre de minutes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMinutes pour calculer le nombre de minutes entre deux intervalles de temps.</summary>
      <returns>Nombre de minutes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMonths pour calculer le nombre de mois entre deux dates/heures.</summary>
      <returns>Nombre de mois entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffMonths pour calculer le nombre de mois entre deux dates/heures.</summary>
      <returns>Nombre de mois entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffNanoseconds pour calculer le nombre de nanosecondes entre deux dates/heures.</summary>
      <returns>Nombre de nanosecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffNanoseconds pour calculer le nombre de nanosecondes entre deux dates/heures.</summary>
      <returns>Nombre de nanosecondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffNanoseconds pour calculer le nombre de nanosecondes entre deux intervalles de temps.</summary>
      <returns>Nombre de nanosecondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffSeconds pour calculer le nombre de secondes entre deux dates/heures.</summary>
      <returns>Nombre de secondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffSeconds pour calculer le nombre de secondes entre deux dates/heures.</summary>
      <returns>Nombre de secondes entre la première et la deuxième date/heure.</returns>
      <param name="timeValue1">Première date/heure.</param>
      <param name="timeValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffSeconds pour calculer le nombre de secondes entre deux intervalles de temps.</summary>
      <returns>Nombre de secondes entre le premier et le deuxième intervalle de temps.</returns>
      <param name="timeValue1">Premier intervalle de temps.</param>
      <param name="timeValue2">Deuxième intervalle de temps.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffYears pour calculer le nombre d'années entre deux dates/heures.</summary>
      <returns>Nombre d'années entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique DiffYears pour calculer le nombre d'années entre deux dates/heures.</summary>
      <returns>Nombre d'années entre la première et la deuxième date/heure.</returns>
      <param name="dateValue1">Première date/heure.</param>
      <param name="dateValue2">Deuxième date/heure.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique GetTotalOffsetMinutes pour retourner le nombre de minutes de décalage la date/heure donnée par rapport à la date/heure UTC.Cette valeur est généralement comprise entre +780 et -780 (+ ou - 13 heures).</summary>
      <returns>Décalage de l'entrée par rapport à la date/heure UTC.</returns>
      <param name="dateTimeOffsetArgument">Valeur de date/heure à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Left pour retourner le nombre donné de caractères le plus à gauche dans une chaîne.</summary>
      <returns>Chaîne contenant le nombre de caractères demandés en partant de la gauche de la chaîne d'entrée.</returns>
      <param name="stringArgument">Chaîne d'entrée.</param>
      <param name="length">Nombre de caractères à retourner</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Reverse pour retourner une chaîne donnée avec l'ordre des caractères inversé.</summary>
      <returns>Chaîne d'entrée dont l'ordre des caractères est inversé.</returns>
      <param name="stringArgument">Chaîne d'entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Right pour retourner le nombre donné de caractères le plus à droite dans une chaîne.</summary>
      <returns>Chaîne contenant le nombre de caractères demandés en partant de la droite de la chaîne d'entrée.</returns>
      <param name="stringArgument">Chaîne d'entrée.</param>
      <param name="length">Nombre de caractères à retourner</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDev pour calculer l'écart type de la collection.</summary>
      <returns>Écart type.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique StDevP pour calculer l'écart type du remplissage.</summary>
      <returns>Écart type de remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Truncate pour tronquer la valeur donnée au nombre de chiffres spécifié.</summary>
      <returns>Valeur tronquée.</returns>
      <param name="value">Valeur à tronquer.</param>
      <param name="digits">Nombre de chiffres à conserver.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Truncate pour tronquer la valeur donnée au nombre de chiffres spécifié.</summary>
      <returns>Valeur tronquée.</returns>
      <param name="value">Valeur à tronquer.</param>
      <param name="digits">Nombre de chiffres à conserver.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique TruncateTime pour ajouter la date donnée sans heure.</summary>
      <returns>Date d'entrée avec la partie horaire effacée.</returns>
      <param name="dateValue">Valeur de date/heure à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique TruncateTime pour ajouter la date donnée sans heure.</summary>
      <returns>Date d'entrée avec la partie horaire effacée.</returns>
      <param name="dateValue">Valeur de date/heure à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique Var pour calculer la variance de la collection.</summary>
      <returns>Variance.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Lorsqu'elle est utilisée dans le cadre d'une requête LINQ to Entities, cette méthode appelle la fonction EDM canonique VarP pour calculer la variance du remplissage.</summary>
      <returns>Variance du remplissage.</returns>
      <param name="collection">Collection sur laquelle effectuer le calcul.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>Représente les options d'exécution de la requête.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Option de fusion à utiliser pour les résultats de l'entité.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Option de fusion à utiliser pour les résultats de l'entité.</param>
      <param name="streaming">true si la requête diffusée en continu ou mise en mémoire tampon ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage de l'objet actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>Obtient l'option de fusion à utiliser pour les résultats de l'entité.</summary>
      <returns>Option de fusion à utiliser pour les résultats de l'entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Détermine si les objets spécifiés sont égaux.</summary>
      <returns>true si les deux objets sont identiques ; sinon, false.</returns>
      <param name="left">Objet de gauche à comparer.</param>
      <param name="right">Objet de droite à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Détermine si les objets spécifiés ne sont pas égaux.</summary>
      <returns>true si les deux objets ne sont pas égaux ; sinon, false.</returns>
      <param name="left">Objet de gauche à comparer.</param>
      <param name="right">Objet de droite à comparer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>Obtient une valeur qui indique si la requête est diffusée en continu ou mise en mémoire tampon.</summary>
      <returns>true si la requête est diffusée en continu ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>Définit le comportement des implémentations d'IQueryable qui autorisent les modifications apportées à l'appartenance du jeu obtenu.</summary>
      <typeparam name="TEntity">Type des entités retournées à partir de la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Notifie le jeu qu'un objet qui représente une nouvelle entité doit être ajouté au jeu.</summary>
      <param name="entity">Nouvel objet à ajouter au jeu.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>Notifie le jeu qu'un objet qui représente une entité existante doit être ajouté au jeu.</summary>
      <param name="entity">Objet existant à ajouter au jeu.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Notifie au jeu qu'un objet qui représente une entité existante doit être supprimé du jeu.</summary>
      <param name="entity">Objet existant à supprimer du jeu.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>Notifie au jeu qu'un objet qui représente une entité existante doit être détaché du jeu.</summary>
      <param name="entity">Objet à détacher du jeu.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>Les différentes façons de fusionner les nouveaux objets chargés depuis la base de données avec des objets existants se trouvant déjà en mémoire.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>Ajoute uniquement des lignes (uniques au niveau supérieur).Il s'agit du comportement par défaut.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>Ne modifie pas le cache.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>Comportement identique à celui de LoadOption.OverwriteChanges.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>Comportement identique à celui de LoadOption.PreserveChanges.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext correspond à l'objet de niveau supérieur qui encapsule une connexion entre le CLR et la base de données, connexion faisant office de passerelle pour les opérations de création, de lecture, de mise à jour et de suppression.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> avec la connexion donnée.Pendant la construction, l'espace de travail des métadonnées est extrait de l'objet <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <param name="connection">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> qui contient des références au modèle et à la connexion à la source de données.</param>
      <exception cref="T:System.ArgumentNullException">Le connection a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">La connexion ou l'espace de travail des métadonnées n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>Crée un ObjectContext avec la connexion et l'espace de travail des métadonnées donnés.</summary>
      <param name="connection">connexion au magasin</param>
      <param name="contextOwnsConnection">Si défini sur true, la connexion est supprimée en même temps que le contexte, sinon, l'appelant doit supprimer la connexion.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> avec une connexion et un nom de conteneur d'entités donnés.</summary>
      <param name="connection">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> qui contient des références au modèle et à la connexion à la source de données.</param>
      <param name="defaultContainerName">Nom du conteneur d'entités par défaut.Lorsque le defaultContainerName est défini à l'aide de cette méthode, la propriété devient en lecture seule.</param>
      <exception cref="T:System.ArgumentNullException">Le connection a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">La connexion, defaultContainerName ou l'espace de travail des métadonnées n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> avec la chaîne de connexion donnée et le nom de conteneur d'entités par défaut.</summary>
      <param name="connectionString">Chaîne de connexion, qui procure également l'accès aux informations de métadonnées.</param>
      <exception cref="T:System.ArgumentNullException">Le connectionString a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Le connectionString ou l'espace de travail des métadonnées n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> avec une chaîne de connexion et un nom de conteneur d'entités donnés.</summary>
      <param name="connectionString">Chaîne de connexion, qui procure également l'accès aux informations de métadonnées.</param>
      <param name="defaultContainerName">Nom du conteneur d'entités par défaut.Lorsque le defaultContainerName est défini à l'aide de cette méthode, la propriété devient en lecture seule.</param>
      <exception cref="T:System.ArgumentNullException">Le connectionString a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Le connectionString, defaultContainerName ou l'espace de travail des métadonnées n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>Accepte toutes les modifications apportées aux objets dans le contexte de l'objet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Ajoute un objet au contexte de l'objet.</summary>
      <param name="entitySetName">Représente le nom du jeu d'entités, qui peut éventuellement être qualifié par le nom du conteneur d'entités.</param>
      <param name="entity">Le <see cref="T:System.Object" /> à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre d'entité a la valeur Null ou entitySetName n'est pas qualifié.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Copie les valeurs scalaires de l'objet fourni dans l'objet du <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> qui a la même clé.</summary>
      <returns>L'objet mis à jour.</returns>
      <param name="entitySetName">Nom du jeu d'entités auquel appartient l'objet.</param>
      <param name="currentEntity">Objet détaché ayant les mises à jour de propriétés à appliquer à l'objet d'origine.La clé d'entité de currentEntity doit correspondre à la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> d'une entrée dans le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
      <typeparam name="TEntity">Type d'entité de l'objet.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName ou la valeur actuelle est null.</exception>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> d'entitySetName ne correspond pas au <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> de l'objet <see cref="T:System.Data.Entity.Core.EntityKey" />, l'objet ne se trouve pas dans le <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, l'objet se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Detached" /> ou la clé d'entité de l'objet fourni n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">entitySetName est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Copie les valeurs scalaires de l'objet fourni dans le jeu de valeurs d'origine de l'objet dans le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> qui a la même clé.</summary>
      <returns>L'objet mis à jour.</returns>
      <param name="entitySetName">Nom du jeu d'entités auquel appartient l'objet.</param>
      <param name="originalEntity">Objet détaché comportant les valeurs d'origine à appliquer à l'objet.La clé d'entité d'originalEntity doit correspondre à la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> d'une entrée dans le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">Type de l'objet entité.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName ou l'objet d'origine a la valeur Null.</exception>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> d'entitySetName ne correspond pas au <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> du <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'objet, un <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour l'objet est introuvable dans le <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, l'objet se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Detached" />, ou la clé d'entité de l'objet fourni n'est pas valide ou a subi des modifications de propriétés.</exception>
      <exception cref="T:System.ArgumentException">entitySetName est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Applique les modifications de propriété d'un objet détaché à un objet déjà attaché au contexte de l'objet.</summary>
      <param name="entitySetName">Nom du jeu d'entités auquel appartient l'objet.</param>
      <param name="changed">Objet détaché ayant les mises à jour de propriétés à appliquer à l'objet d'origine.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque entitySetName a la valeur null ou est une chaîne vide ou lorsque la modification a la valeur Null.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> d'entitySetName ne correspond pas au <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> du <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'objet ou lorsque l'entité se trouve dans un état autre que <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Unchanged" />, ou que l'objet d'origine n'est pas attaché au contexte.</exception>
      <exception cref="T:System.ArgumentException">Lorsque le type de l'objet changed est différent de celui de l'objet d'origine.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>Attache un objet ou graphique d'objet au contexte de l'objet lorsque l'objet a une clé d'entité.</summary>
      <param name="entity">Objet à attacher.</param>
      <exception cref="T:System.ArgumentNullException">L'entity a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Clé d'entité non valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Attache un objet ou graphique d'objet au contexte de l'objet dans un jeu d'entités spécifique.</summary>
      <param name="entitySetName">Représente le nom du jeu d'entités, qui peut éventuellement être qualifié par le nom du conteneur d'entités.</param>
      <param name="entity">
        <see cref="T:System.Object" /> à attacher.</param>
      <exception cref="T:System.ArgumentNullException">L'entity a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Jeu d'entités non valide, l'objet a une clé temporaire ou l'objet a un <see cref="T:System.Data.Entity.Core.EntityKey" /> et le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> ne correspond pas au jeu d'entités passé comme argument de la méthode, l'objet n'a pas de <see cref="T:System.Data.Entity.Core.EntityKey" /> et aucun jeu d'entités n'est fourni, un objet du graphique d'objet a un objet <see cref="T:System.Data.Entity.Core.EntityKey" /> temporaire, un objet du graphique d'objet a un <see cref="T:System.Data.Entity.Core.EntityKey" /> non valide (par exemple, les valeurs dans la clé ne correspondent pas à celles dans l'objet), le jeu d'entités n'a pas pu être trouvé à partir d'un nom entitySetName et d'un nom de conteneur d'entités donnés ou un objet du graphique d'objet existe déjà dans un autre gestionnaire d'état.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>Obtient ou définit la valeur du délai d'attente, en secondes, pour toutes les opérations dans le contexte de l'objet.Une valeur Null indique que la valeur par défaut du fournisseur sous-jacent sera utilisée.</summary>
      <returns>Valeur <see cref="T:System.Int32" /> qui correspond au délai d'attente, en secondes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>Obtient la connexion utilisée par le contexte de l'objet.</summary>
      <returns>Objet <see cref="T:System.Data.Common.DbConnection" /> qui correspond à la connexion.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>Obtient l'instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> qui contient les options affectant le comportement de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
      <returns>Instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> qui contient les options affectant le comportement de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>Crée la base de données en utilisant la connexion à la source de données actuelle et les métadonnées de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Génère un script de langage de définition de données (DDL) qui crée des objets de schéma (tables, clés primaires, clés étrangères) pour les métadonnées de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.La classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> charge les métadonnées à partir de fichiers SSDL (Store Schema Definition Language).</summary>
      <returns>Script DDL qui crée des objets de schéma pour les métadonnées de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Crée la clé d'entité pour un objet spécifique ou retourne la clé d'entité si elle existe déjà.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'objet.</returns>
      <param name="entitySetName">Nom complet du jeu d'entités auquel appartient l'objet entité.</param>
      <param name="entity">Objet pour lequel la clé d'entité est récupérée.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque l'un ou l'autre paramètre a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Lorsque entitySetName est vide ou que le type d'un objet entité n'existe pas dans le jeu d'entités, ou encore lorsque l'entitySetName n'est pas entièrement qualifié.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque la clé d'entité ne peut pas être construite correctement avec les paramètres fournis.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>Crée et retourne une instance du type demandé.</summary>
      <returns>Instance du type T demandé ou d'un type dérivé qui permet d'utiliser T avec Entity Framework.L'objet retourné est une instance du type demandé ou une instance d'un type dérivé qui permet au type demandé d'être utilisé avec Entity Framework.</returns>
      <typeparam name="T">Type d'objet à retourner.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> qui est utilisée pour interroger, ajouter, modifier et supprimer des objets du type d'entité spécifié.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</returns>
      <typeparam name="TEntity">Type d'entité du <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> demandé.</typeparam>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> n'est pas définie sur le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> ou le type spécifié appartient à plusieurs jeux d'entités.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> qui est utilisée pour interroger, ajouter, modifier et supprimer des objets du type spécifié, portant le nom de jeu d'entités spécifié.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</returns>
      <param name="entitySetName">Nom du jeu d'entités du <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> retourné.La chaîne doit être qualifiée par le nom du conteneur par défaut si la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> n'est pas définie sur le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">Type d'entité du <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> demandé.</typeparam>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> d'entitySetName ne correspond pas au <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> du <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'objet, la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> n'est pas définie sur le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> et le nom n'est pas qualifié dans le cadre du paramètre entitySetName ou le type spécifié appartient à plusieurs jeux d'entités.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Génère un type équivalent qui peut être utilisé avec Entity Framework pour chaque type de l'énumération fournie.</summary>
      <param name="types">Énumération d'objets <see cref="T:System.Type" /> représentant des classes de données personnalisées qui sont mappées au modèle conceptuel.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> dans le contexte de l'objet actuel à l'aide de la chaîne de requête spécifiée.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> du type spécifié.</returns>
      <param name="queryString">Chaîne de requête à exécuter.</param>
      <param name="parameters">Paramètres à passer à la requête.</param>
      <typeparam name="T">Type d'entité du <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> retourné.</typeparam>
      <exception cref="T:System.ArgumentNullException">Le paramètre queryString ou le paramètre parameters a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>Vérifie si la base de données spécifiée comme base de données dans la connexion au magasin actuelle existe sur le magasin.L'essentiel du travail effectif est effectué par l'implémentation de DbProviderServices pour la connexion actuelle au magasin.</summary>
      <returns>true si la base de données existe ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>Obtient ou définit le nom de conteneur par défaut.</summary>
      <returns>Valeur <see cref="T:System.String" /> qui correspond au nom de conteneur par défaut.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>Supprime la base de données spécifiée comme base de données dans la connexion à la source de données actuelle.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Marque un objet pour la suppression.</summary>
      <param name="entity">Objet qui spécifie l'entité à supprimer.L'objet peut être dans tout état à l'exception de <see cref="F:System.Data.Entity.EntityState.Detached" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>Supprime l'objet du contexte de l'objet.</summary>
      <param name="entity">Objet à détacher.Seule l'entité est supprimée ; si des objets connexes sont suivis par le même <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, ils ne seront pas détachés automatiquement.</param>
      <exception cref="T:System.ArgumentNullException">L'entity a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">L'entité n'est pas associée à ce <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> (par exemple, elle a été créée récemment et n'a encore été associée à aucun contexte, elle a été obtenue au moyen d'un autre contexte ou elle a déjà été détachée).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>Garantit que les modifications de <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> sont synchronisées avec celles de tous les objets suivis par <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>Libère les ressources utilisées par le contexte de l'objet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Libère les ressources utilisées par le contexte de l'objet.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Exécute la fonction donnée sur le conteneur par défaut.</summary>
      <returns>Objet représentant le résultat de l'exécution de cette fonction.</returns>
      <param name="functionName">Nom de la fonction.Peut inclure un conteneur (par exempleContainerName.FunctionName) ou simplement le nom de la fonction lorsque DefaultContainerName est connu.</param>
      <param name="executionOptions">Options d'exécution cette fonction.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la fonction.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément pour les résultats de la fonction.</typeparam>
      <exception cref="T:System.ArgumentException">Si la function a la valeur null ou est vide</exception>
      <exception cref="T:System.InvalidOperationException">Si la fonction n'est pas valide (syntaxe, n'existe pas, fait référence à une fonction avec un type de retour incompatible avec T)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Exécute la fonction ou procédure stockée indiquée qui est définie dans la source de données et exprimée dans le modèle conceptuel, avec les paramètres et l'option de fusion spécifiés.Retourne un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> typé.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> pour les données retournées par la procédure stockée.</returns>
      <param name="functionName">Nom de la fonction ou procédure stockée.Le nom peut inclure le nom du conteneur, par exemple &lt;nom du conteneur&gt;.&lt;nom de la fonction&gt;.Lorsque le nom du conteneur par défaut est connu, seul le nom de la fonction est requis.</param>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'entité du <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> retourné lorsque la fonction est exécutée sur la source de données.Ce type doit implémenter <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">La fonction a la valeur Null, est vide ou est introuvable.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur d'entité ne prend pas en charge cette fonction ou il existe une incompatibilité de type entre le lecteur et la fonction.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Exécute une fonction ou procédure stockée qui est définie dans la source de données et mappée dans le modèle conceptuel, avec les paramètres spécifiés.Retourne un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> typé.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> pour les données retournées par la procédure stockée.</returns>
      <param name="functionName">Nom de la fonction ou procédure stockée.Le nom peut inclure le nom du conteneur, par exemple &lt;nom du conteneur&gt;.&lt;nom de la fonction&gt;.Lorsque le nom du conteneur par défaut est connu, seul le nom de la fonction est requis.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'entité du <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> retourné lorsque la fonction est exécutée sur la source de données.Ce type doit implémenter <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">La fonction a la valeur Null, est vide ou est introuvable.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur d'entité ne prend pas en charge cette fonction ou il existe une incompatibilité de type entre le lecteur et la fonction.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Exécute une fonction ou procédure stockée qui est définie dans la source de données et exprimée dans le modèle conceptuel, ignore les résultats retournés par la fonction et retourne le nombre de lignes affectées par l'exécution.</summary>
      <returns>Nombre de lignes affectées.</returns>
      <param name="functionName">Nom de la fonction ou procédure stockée.Le nom peut inclure le nom du conteneur, par exemple &lt;nom du conteneur&gt;.&lt;nom de la fonction&gt;.Lorsque le nom du conteneur par défaut est connu, seul le nom de la fonction est requis.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <exception cref="T:System.ArgumentException">La fonction a la valeur Null, est vide ou est introuvable.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur d'entité ne prend pas en charge cette fonction ou il existe une incompatibilité de type entre le lecteur et la fonction.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Exécute directement une commande arbitraire sur la source de données à l'aide de la connexion existante.La commande est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor). Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor)) ;</summary>
      <returns>Nombre de lignes affectées.</returns>
      <param name="transactionalBehavior">Contrôle la création d'une transaction pour cette commande.</param>
      <param name="commandText">La commande est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Exécute directement une commande arbitraire sur la source de données à l'aide de la connexion existante.La commande est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor). Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor)) ;</summary>
      <returns>Nombre de lignes affectées.</returns>
      <param name="commandText">La commande est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Exécute de façon asynchrone une commande arbitraire directement sur la source de données en utilisant la connexion existante.La commande est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor). Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor)) ;</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre de lignes affectées.</returns>
      <param name="transactionalBehavior">Contrôle la création d'une transaction pour cette commande.</param>
      <param name="commandText">La commande est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Exécute de façon asynchrone une commande arbitraire directement sur la source de données en utilisant la connexion existante.La commande est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor). Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor)) ;</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre de lignes affectées.</returns>
      <param name="transactionalBehavior">Contrôle la création d'une transaction pour cette commande.</param>
      <param name="commandText">La commande est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>Exécute de façon asynchrone une commande arbitraire directement sur la source de données en utilisant la connexion existante.La commande est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor). Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor)) ;</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre de lignes affectées.</returns>
      <param name="commandText">La commande est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Exécute de façon asynchrone une commande arbitraire directement sur la source de données en utilisant la connexion existante.La commande est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor). Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor)) ;</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre de lignes affectées.</returns>
      <param name="commandText">La commande est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Exécute une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Les résultats ne sont pas suivis par le contexte ; utilisez la surcharge qui spécifie un nom de jeu d'entités pour suivre les résultats.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Énumération d'objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="executionOptions">Options d'exécution cette requête.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Exécute une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Les résultats ne sont pas suivis par le contexte ; utilisez la surcharge qui spécifie un nom de jeu d'entités pour suivre les résultats.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Énumération d'objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Exécute une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Si un nom de jeu d'entités est spécifié, les résultats sont suivis par le contexte.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Énumération d'objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="entitySetName">Jeu d'entités du type TResult.Si aucun nom de jeu d'entités n'est fourni, les résultats ne seront pas suivis.</param>
      <param name="executionOptions">Options d'exécution cette requête.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>Exécute une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Si un nom de jeu d'entités est spécifié, les résultats sont suivis par le contexte.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Énumération d'objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="entitySetName">Jeu d'entités du type TResult.Si aucun nom de jeu d'entités n'est fourni, les résultats ne seront pas suivis.</param>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Exécute de façon asynchrone une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Les résultats ne sont pas suivis par le contexte ; utilisez la surcharge qui spécifie un nom de jeu d'entités pour suivre les résultats.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient une énumération des objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="executionOptions">Options d'exécution cette requête.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Exécute de façon asynchrone une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Les résultats ne sont pas suivis par le contexte ; utilisez la surcharge qui spécifie un nom de jeu d'entités pour suivre les résultats.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient une énumération des objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="executionOptions">Options d'exécution cette requête.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>Exécute de façon asynchrone une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Les résultats ne sont pas suivis par le contexte ; utilisez la surcharge qui spécifie un nom de jeu d'entités pour suivre les résultats.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient une énumération des objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Exécute de façon asynchrone une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Si un nom de jeu d'entités est spécifié, les résultats sont suivis par le contexte.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient une énumération des objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="entitySetName">Jeu d'entités du type TResult.Si aucun nom de jeu d'entités n'est fourni, les résultats ne seront pas suivis.</param>
      <param name="executionOptions">Options d'exécution cette requête.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Exécute de façon asynchrone une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Si un nom de jeu d'entités est spécifié, les résultats sont suivis par le contexte.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient une énumération des objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="entitySetName">Jeu d'entités du type TResult.Si aucun nom de jeu d'entités n'est fourni, les résultats ne seront pas suivis.</param>
      <param name="executionOptions">Options d'exécution cette requête.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Exécute de façon asynchrone une requête directement sur la source de données et retourne une séquence de résultats typés.La requête est spécifiée à l'aide du langage de requête natif du serveur, par exemple SQL.Les résultats ne sont pas suivis par le contexte ; utilisez la surcharge qui spécifie un nom de jeu d'entités pour suivre les résultats.Comme pour tout API qui accepte SQL, il est important de paramétrer toutes les entrées utilisateur afin de se prémunir contre une attaque d'injection SQL.Vous pouvez inclure des espaces de paramètre réservés dans la chaîne de requête SQL, puis fournir des valeurs de paramètre comme arguments supplémentaires.Toute valeur de paramètre fournie sera automatiquement convertie en un DbParameter.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Sinon, construisez un DbParameter et fournissez-le à SqlQuery.Cela vous permet d'utiliser des paramètres nommés dans la chaîne de requête SQL.context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient une énumération des objets de type <paramref name="TElement" />.</returns>
      <param name="commandText">La requête est spécifiée à l'aide du langage de requête natif du serveur.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <param name="parameters">Valeurs de paramètre à utiliser pour la requête.Si des paramètres de sortie sont utilisés, leurs valeurs ne seront disponibles qu'après lecture complète des résultats.Cela est dû au comportement sous-jacent de DbDataReader. Pour plus d'informations, consultez http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Type d'élément de la séquence de résultats.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
      <summary>Finalise une instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Retourne tous les types de proxy existants.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient tous les types de proxy existants.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>Retourne un objet qui a la clé d'entité spécifiée.</summary>
      <returns>Objet <see cref="T:System.Object" /> qui correspond à une instance d'un type d'entité.</returns>
      <param name="key">Clé de l'objet à rechercher.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre key a la valeur null.</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">L'objet est introuvable dans l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> ou dans la source de données.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Retourne le type d'entité de l'entité POCO associée à un objet proxy du type spécifié.</summary>
      <returns>
        <see cref="T:System.Type" /> de l'entité POCO associée.</returns>
      <param name="type">
        <see cref="T:System.Type" /> de l'objet proxy.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.InterceptionContext">
      <summary>Retourne le <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" /> utilisé pour ce contexte.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Charge explicitement, à l'aide de l'option de fusion par défaut, un objet lié à l'objet fourni par la propriété de navigation spécifiée.</summary>
      <param name="entity">Entité pour laquelle les objets connexes seront chargés.</param>
      <param name="navigationProperty">Nom de la propriété de navigation qui retourne les objets connexes à charger.</param>
      <exception cref="T:System.InvalidOperationException">L'entité se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" />, ou l'entité est attachée à une autre instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Charge explicitement, à l'aide de l'option de fusion spécifiée, un objet lié à l'objet fourni par la propriété de navigation indiquée.</summary>
      <param name="entity">Entité pour laquelle les objets connexes seront chargés.</param>
      <param name="navigationProperty">Nom de la propriété de navigation qui retourne les objets connexes à charger.</param>
      <param name="mergeOption">Valeur <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors du chargement des objets connexes.</param>
      <exception cref="T:System.InvalidOperationException">L'entité se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" />, ou l'entité est attachée à une autre instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Charge explicitement, à l'aide de l'option de fusion par défaut, un objet lié à l'objet fourni par la requête LINQ spécifiée.</summary>
      <param name="entity">Objet source pour lequel les objets connexes seront chargés.</param>
      <param name="selector">Expression LINQ qui définit les objets connexes à charger.</param>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
      <exception cref="T:System.ArgumentException">Le sélecteur ne fournit pas de paramètre d'entrée valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le sélecteur a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">L'entité se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" />, ou l'entité est attachée à une autre instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Charge explicitement, à l'aide de l'option de fusion spécifiée, un objet lié à l'objet fourni par la requête LINQ spécifiée.</summary>
      <param name="entity">Objet source pour lequel les objets connexes seront chargés.</param>
      <param name="selector">Expression LINQ qui définit les objets connexes à charger.</param>
      <param name="mergeOption">Valeur <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors du chargement des objets connexes.</param>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
      <exception cref="T:System.ArgumentException">Le sélecteur ne fournit pas de paramètre d'entrée valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le sélecteur a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">L'entité se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" />, ou l'entité est attachée à une autre instance de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>Obtient l'espace de travail des métadonnées utilisé par le contexte de l'objet.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associé à cet objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>Se produit lorsqu'un nouvel objet entité est créé à partir des données de la source de données dans le cadre d'une requête ou d'une opération de chargement.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>Obtient le gestionnaire d'état d'objet utilisé par le contexte de l'objet pour assurer le suivi des modifications d'objets.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> utilisé par cet objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>Obtient le fournisseur de requête LINQ associé à ce contexte d'objet.</summary>
      <returns>Instance de <see cref="T:System.Linq.IQueryProvider" /> utilisée par ce contexte d'objet.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Met à jour une collection d'objets dans le contexte de l'objet avec des données de la base de données.</summary>
      <param name="refreshMode">Valeur <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> qui indique si les modifications de propriétés dans le contexte de l'objet sont remplacées par les valeurs de propriété de la base de données.</param>
      <param name="collection">Collection <see cref="T:System.Collections.IEnumerable" /> d'objets à actualiser.</param>
      <exception cref="T:System.ArgumentNullException">collection a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">La collection est vide ou un objet n'est pas attaché au contexte.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Met à jour un objet dans le contexte de l'objet avec des données de la base de données.</summary>
      <param name="refreshMode">Valeur <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> qui indique si les modifications de propriétés dans le contexte de l'objet sont remplacées par les valeurs de propriété de la base de données.</param>
      <param name="entity">Objet à actualiser.</param>
      <exception cref="T:System.ArgumentNullException">entity a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">L'entité n'est pas attachée au contexte.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Met à jour de façon asynchrone une collection d'objets dans le contexte de l'objet avec des données de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="refreshMode">Valeur <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> qui indique si les modifications de propriétés dans le contexte de l'objet sont remplacées par les valeurs de propriété de la base de données.</param>
      <param name="collection">Collection <see cref="T:System.Collections.IEnumerable" /> d'objets à actualiser.</param>
      <exception cref="T:System.ArgumentNullException">collection a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">La collection est vide ou un objet n'est pas attaché au contexte.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>Met à jour de façon asynchrone une collection d'objets dans le contexte de l'objet avec des données de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="refreshMode">Valeur <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> qui indique si les modifications de propriétés dans le contexte de l'objet sont remplacées par les valeurs de propriété de la base de données.</param>
      <param name="collection">Collection <see cref="T:System.Collections.IEnumerable" /> d'objets à actualiser.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">collection a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">La collection est vide ou un objet n'est pas attaché au contexte.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Met à jour de façon asynchrone un objet dans le contexte de l'objet avec des données de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="refreshMode">Valeur <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> qui indique si les modifications de propriétés dans le contexte de l'objet sont remplacées par les valeurs de propriété de la base de données.</param>
      <param name="entity">Objet à actualiser.</param>
      <exception cref="T:System.ArgumentNullException">entity a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">L'entité n'est pas attachée au contexte.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>Met à jour de façon asynchrone un objet dans le contexte de l'objet avec des données de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="refreshMode">Valeur <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> qui indique si les modifications de propriétés dans le contexte de l'objet sont remplacées par les valeurs de propriété de la base de données.</param>
      <param name="entity">Objet à actualiser.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">entity a la valeur null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">L'entité n'est pas attachée au contexte.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>Rend toutes les mises à jour persistantes dans la base de données et réinitialise le suivi des modifications dans le contexte de l'objet.</summary>
      <returns>Nombre d'objets à l'état <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> lorsque la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> a été appelée.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Une violation d'accès simultané optimiste s'est produite lors de l'enregistrement des modifications.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Rend toutes les mises à jour persistantes dans la base de données et réinitialise éventuellement le suivi des modifications dans le contexte de l'objet.</summary>
      <returns>Nombre d'objets à l'état <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> lorsque la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> a été appelée.</returns>
      <param name="acceptChangesDuringSave">Ce paramètre est nécessaire pour la prise en charge des transactions côté client.S'il a la valeur true, le suivi des modifications sur tous les objets est réinitialisé une fois que la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> est terminée.S'il a la valeur false, vous devez appeler la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" /> après <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Une violation d'accès simultané optimiste s'est produite lors de l'enregistrement des modifications.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Rend toutes les mises à jour persistantes dans la base de données et réinitialise éventuellement le suivi des modifications dans le contexte de l'objet.</summary>
      <returns>Nombre d'objets à l'état <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> lorsque la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> a été appelée.</returns>
      <param name="options">Valeur <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> qui détermine le comportement de l'opération.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Une violation d'accès simultané optimiste s'est produite lors de l'enregistrement des modifications.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>Rend toutes les mises à jour persistantes de façon asynchrone dans la base de données et réinitialise le suivi des modifications dans le contexte de l'objet.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'objets à l'état <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> lorsque la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> a été appelée.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Une violation d'accès simultané optimiste s'est produite lors de l'enregistrement des modifications.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Rend toutes les mises à jour persistantes de façon asynchrone dans la base de données et réinitialise éventuellement le suivi des modifications dans le contexte de l'objet.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'objets à l'état <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> lorsque la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> a été appelée.</returns>
      <param name="options">Valeur <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> qui détermine le comportement de l'opération.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Une violation d'accès simultané optimiste s'est produite lors de l'enregistrement des modifications.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>Rend toutes les mises à jour persistantes de façon asynchrone dans la base de données et réinitialise éventuellement le suivi des modifications dans le contexte de l'objet.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'objets à l'état <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> lorsque la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> a été appelée.</returns>
      <param name="options">Valeur <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> qui détermine le comportement de l'opération.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Une violation d'accès simultané optimiste s'est produite lors de l'enregistrement des modifications.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Rend toutes les mises à jour persistantes de façon asynchrone dans la base de données et réinitialise le suivi des modifications dans le contexte de l'objet.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'objets à l'état <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> lorsque la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> a été appelée.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Une violation d'accès simultané optimiste s'est produite lors de l'enregistrement des modifications.</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>Se produit lorsque des modifications sont enregistrées dans la source de données.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Retourne elle-même.ObjectContext implémente <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" /> pour fournir une interface commune pour <see cref="T:System.Data.Entity.DbContext" /> et ObjectContext qui retournent l'ObjectContext sous-jacent.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
      <summary>Obtient le gestionnaire de transactions utilisé par ce contexte.Il peut s'agir de la valeur Null si aucune transaction n'a été démarrée.</summary>
      <returns>Gestionnaire de transactions.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Traduit un <see cref="T:System.Data.Common.DbDataReader" /> qui contient des lignes de données d'entité en objets du type d'entité demandé.</summary>
      <returns>Énumération d'objets de type TResult.</returns>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" /> qui contient les données d'entité à traduire en objets entités.</param>
      <typeparam name="TElement">Type d'entité.</typeparam>
      <exception cref="T:System.ArgumentNullException">Lorsque le lecteur a la valeur Null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Traduit un <see cref="T:System.Data.Common.DbDataReader" /> qui contient des lignes de données d'entité en objets du type d'entité demandé, dans un jeu d'entités spécifique et avec l'option de fusion indiquée.</summary>
      <returns>Énumération d'objets de type TResult.</returns>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" /> qui contient les données d'entité à traduire en objets entités.</param>
      <param name="entitySetName">Jeu d'entités du type TResult.</param>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'ajout des objets traduits au contexte de l'objet.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity">Type d'entité.</typeparam>
      <exception cref="T:System.ArgumentNullException">Lorsque le lecteur a la valeur Null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Lorsque le mergeOption fourni n'est pas une valeur <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> valide.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque l'entitySetName fourni n'est pas un jeu d'entités valide pour le type TResult.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>Retourne un objet qui a la clé d'entité spécifiée.</summary>
      <returns>true si l'objet a été récupéré avec succès.false si la clé est temporaire, la connexion a la valeur Null ou la valeur est Null.</returns>
      <param name="key">Clé de l'objet à rechercher.</param>
      <param name="value">Lorsque cette méthode retourne, contient l'objet.</param>
      <exception cref="T:System.ArgumentException">Métadonnées incompatibles pour la clé.</exception>
      <exception cref="T:System.ArgumentNullException">key a la valeur null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>Définit des options qui affectent le comportement de l'objet ObjectContext.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands">
      <summary>Obtient ou définit la valeur qui détermine si les fonctions et les commandes SQL doivent être toujours exécutées dans une transaction.</summary>
      <returns>Comportement transactionnel par défaut.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Obtient ou définit une valeur booléenne qui détermine si les objets connexes sont automatiquement chargés lorsqu'une propriété de navigation fait l'objet d'un accès.</summary>
      <returns>true si le chargement différé est activé ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Obtient ou définit une valeur booléenne qui détermine si des instances de proxy sont créées pour les classes de données personnalisées qui ignorent la persistance.</summary>
      <returns>true si des proxys sont créés ; sinon, false.La valeur par défaut est true.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>Obtient ou définit une valeur booléenne qui détermine s'il convient d'utiliser le comportement cohérent NullReference.</summary>
      <returns>true si le comportement cohérent NullReference doit être utilisé ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>Obtient ou définit une valeur booléenne qui détermine s'il convient d'utiliser le comportement C# NullComparison.</summary>
      <returns>True si le comportement C# NullComparison est utilisé ; sinon, False.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Obtient ou définit une valeur booléenne qui détermine s'il convient d'utiliser le comportement PreserveChanges hérité.</summary>
      <returns>true si le comportement de PreserveChanges hérité doit être utilisé ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>EventArgs pour l'événement ObjectMaterialized.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Obtient l'objet entité qui a été créé.</summary>
      <returns>Objet entité qui a été créé.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>Délégué de l'événement ObjectMaterialized.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>Cette classe représente un paramètre de requête au niveau de la couche objet, qui comprend un nom, un type et une valeur.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> avec la valeur et le nom spécifiés.</summary>
      <param name="name">Nom du paramètre.Ce nom ne doit pas inclure le marqueur de paramètre « @ » utilisé dans les instructions Entity SQL, mais uniquement le nom réel.Le premier caractère de l'expression doit être une lettre.Tous les caractères ultérieurs dans l'expression doivent être des lettres, des chiffres ou des traits de soulignement (_).</param>
      <param name="value">Valeur initiale (et, de manière inhérente, le type) du paramètre.</param>
      <exception cref="T:System.ArgumentNullException">Si la valeur de l'un des arguments est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Si la valeur de l'argument de nom n'est pas valide.Les noms des paramètres doivent commencer par une lettre et peuvent contenir uniquement des lettres, des chiffres et des traits de soulignement.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> avec le nom et le type spécifiés.</summary>
      <param name="name">Nom du paramètre.Ce nom ne doit pas inclure le marqueur de paramètre « @ » utilisé dans les instructions Entity SQL, mais uniquement le nom réel.Le premier caractère de l'expression doit être une lettre.Tous les caractères ultérieurs dans l'expression doivent être des lettres, des chiffres ou des traits de soulignement (_).</param>
      <param name="type">Type du Common Language Runtime (CLR) du paramètre.</param>
      <exception cref="T:System.ArgumentNullException">Si la valeur de l'un des arguments est null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Si la valeur de l'argument de nom n'est pas valide.Les noms des paramètres doivent commencer par une lettre et peuvent contenir uniquement des lettres, des chiffres et des traits de soulignement.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>Obtient le nom du paramètre, qui peut être défini uniquement par le biais d'un constructeur.</summary>
      <returns>Nom du paramètre, qui peut être défini uniquement par le biais d'un constructeur.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>Obtient le type de paramètre.</summary>
      <returns>
        <see cref="T:System.Type" /> du paramètre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>Obtient ou définit la valeur du paramètre.</summary>
      <returns>Valeur du paramètre.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>Représente une collection de paramètres de requête au niveau de la couche objet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Ajoute l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> spécifié à la collection.</summary>
      <param name="item">Paramètre à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">L' argument parameter a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">L'argument parameter existe déjà dans la collection.Ce comportement diffère de celui de la plupart des collections qui autorisent les entrées dupliquées.- ou- Un autre paramètre avec le même nom que l'argument parameter existe déjà dans la collection.Notez que la recherche ne respecte pas la casse.Ce comportement diffère de celui de la plupart des collections et ressemble davantage à celui d'un objet <see cref="T:System.Collections.Generic.Dictionary" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le type du parameter n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>Supprime toutes les instances <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> de la collection.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Vérifie l'existence d'un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> spécifié dans la collection par référence.</summary>
      <returns>Retourne true si l'objet de paramètre est trouvé dans la collection ; sinon, false.</returns>
      <param name="item">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> à rechercher dans la collection.</param>
      <exception cref="T:System.ArgumentNullException">L' argument parameter a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Détermine si un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> avec le nom spécifié est dans la collection.</summary>
      <returns>Retourne true si un paramètre avec le nom spécifié est trouvé dans la collection ; sinon, false.</returns>
      <param name="name">Nom du paramètre à rechercher dans la collection.Ce nom ne doit pas inclure le marqueur de paramètre « @ » utilisé dans les instructions Entity SQL, mais uniquement le nom réel.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre name a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>Autorise la copie des paramètres de la collection dans un tableau fourni, en commençant par l'objet à l'index spécifié.</summary>
      <param name="array">Tableau dans lequel copier les paramètres.</param>
      <param name="arrayIndex">Index à partir duquel commencer la copie des paramètres dans le tableau.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>Obtient le nombre de paramètres actuellement présents dans la collection.</summary>
      <returns>Nombre d'objets <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> actuellement présents dans la collection.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>Retourne les instances d'énumérateur, qui permettent la traversée et l'itération au sein de la collection.</summary>
      <returns>Objet <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui permet d'itérer au sein de la collection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Obtient un indexeur qui permet aux appelants de récupérer des paramètres par nom.</summary>
      <returns>Indexeur qui permet aux appelants de récupérer des paramètres par nom.</returns>
      <param name="name">Nom de l'élément.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Supprime une instance d'un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> de la collection par référence s'il existe dans la collection.</summary>
      <returns>Retourne true si l'objet de paramètre a été trouvé et supprimé de la collection ; sinon, false.</returns>
      <param name="item">Objet à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentNullException">L' argument parameter a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> est en lecture seule.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> est en lecture seule ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur non typé sur la collection.</summary>
      <returns>Instance <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>Cette classe implémente des requêtes non typées au niveau de la couche objet.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>Retourne le texte de commande de la requête.</summary>
      <returns>Valeur de type chaîne.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>Obtient l'objet de contexte associé à cette requête d'objet.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> associé à cette instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Obtient ou définit une valeur qui indique si le plan de requête doit être mis en cache.</summary>
      <returns>Valeur qui indique si le plan de requête doit être mis en cache.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Exécute la requête d'objet non typé avec l'option de fusion spécifiée.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> qui contient une collection d'objets entité retournés par la requête.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Exécute la requête d'objet non typé de manière asynchrone avec l'option de fusion spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> qui contient à son tour une collection d'objets entités retournés par la requête.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Exécute la requête d'objet non typé de manière asynchrone avec l'option de fusion spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> qui contient à son tour une collection d'objets entités retournés par la requête.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>Retourne des informations sur le type de résultat de la requête.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> qui contient des informations sur le type de résultat de la requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>Obtient ou définit la manière dont les objets retournés par une requête sont ajoutés au contexte de l'objet.</summary>
      <returns>Requête <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>Obtient la collection de paramètres pour cette requête d'objet.</summary>
      <returns>Collection de paramètres pour cet objet <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>Détermine si la requête est diffusée en continu ou mise en mémoire tampon.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d'une collection.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> qui permet d'itérer au sein de la collection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Obtient une valeur qui indique si la requête contient une collection d'objets de requête.</summary>
      <returns>true si cette requête contient une collection d'objets requête ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Retourne la collection sous la forme d'un objet <see cref="T:System.Collections.IList" /> utilisé pour la liaison de données.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> d'objets entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Retourne un <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> qui lorsqu'il est énuméré exécute la requête SQL spécifiée sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Obtient le type d'élément de résultat pour cette instance de requête.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Obtient l'expression décrivant cette requête.Pour les requêtes générées à l'aide de modèles de générateurs LINQ, cela retourne une arborescence d'expressions LINQ complète ; sinon, retourne une expression constante qui encapsule cette requête.Notez que l'expression par défaut n'est pas mise en cache.Cela permet de différencier les requêtes LINQ et Entity SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Obtient l'objet <see cref="T:System.Linq.IQueryProvider" /> associé à cette instance de requête.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>Retourne les commandes à exécuter sur la source de données.</summary>
      <returns>Objet string qui représente les commandes exécutées par la requête sur la source de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>ObjectQuery implémente des requêtes fortement typées au niveau de la couche objet.Les requêtes sont spécifiées à l'aide de chaînes Entity SQL et peuvent être créées en appelant les méthodes du générateur de requêtes Entity SQL déclarées par ObjectQuery.</summary>
      <typeparam name="T">Type de résultat de cet objet ObjectQuery.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Crée une instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> avec la commande Entity SQL spécifiée comme requête initiale.</summary>
      <param name="commandText">Requête Entity SQL.</param>
      <param name="context">Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> sur lequel exécuter la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Crée une instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> avec la commande Entity SQL spécifiée comme requête initiale et l'option de fusion spécifiée.</summary>
      <param name="commandText">Requête Entity SQL.</param>
      <param name="context">Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> sur lequel exécuter la requête.</param>
      <param name="mergeOption">Spécifie comment les entités récupérées au moyen de cette requête doivent être fusionnées avec les entités retournées à partir des requêtes précédentes contre le même objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>Limite la requête aux résultats uniques.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui est équivalente à l'instance d'origine avec application de SELECT DISTINCT.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Cette méthode du générateur de requêtes crée une requête dont les résultats sont tous les résultats de cette requête, à l'exception de ceux qui font également partie de l'autre requête spécifiée.</summary>
      <returns>nouvelle instance ObjectQuery.</returns>
      <param name="query">Requête représentant les résultats à exclure.</param>
      <exception cref="T:System.ArgumentNullException">Si paramètre query a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Exécute la requête d'objet avec l'option de fusion spécifiée.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> qui contient une collection d'objets entité retournés par la requête.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Exécute la requête d'objet de façon asynchrone avec l'option de fusion spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> qui contient à son tour une collection des objets entités retournés par la requête.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Exécute la requête d'objet de façon asynchrone avec l'option de fusion spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> qui contient à son tour une collection des objets entités retournés par la requête.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de l'exécution de la requête.La valeur par défaut est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Groupe les résultats de la requête en fonction des critères spécifiés.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> de type <see cref="T:System.Data.Common.DbDataRecord" /> qui est équivalente à l'instance d'origine avec application de GROUP BY.</returns>
      <param name="keys">Colonnes clés par lesquelles grouper les résultats.</param>
      <param name="projection">Liste des propriétés sélectionnées qui définit la projection.</param>
      <param name="parameters">Zéro ou plusieurs paramètres utilisés dans cette méthode.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre de requête a la valeur Null ou correspond à une chaîne vide, ou le paramètre de projection a la valeur Null ou correspond à une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouvel objet <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> avec le chemin d'accès de requête défini.</returns>
      <param name="path">Liste d'objets connexes, séparés par des points, à retourner dans les résultats de la requête.</param>
      <exception cref="T:System.ArgumentNullException">path a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">path est empty.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Cette méthode du générateur de requêtes crée une requête dont les résultats sont ceux de cette requête et de l'autre requête spécifiée.</summary>
      <returns>nouvelle instance ObjectQuery.</returns>
      <param name="query">Requête représentant les résultats à croiser.</param>
      <exception cref="T:System.ArgumentNullException">Si paramètre query a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>Obtient ou définit le nom de la requête d'objet.</summary>
      <returns>Valeur de chaîne qui correspond au nom de ce <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>Limite la requête uniquement aux résultats d'un type spécifique.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui est équivalente à l'instance d'origine avec application d'OFTYPE.</returns>
      <typeparam name="TResultType">Type du <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> retourné lorsque la requête est exécutée avec le filtre appliqué.</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">Le type spécifié n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ordonne les résultats de la requête en fonction des critères spécifiés.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui est équivalente à l'instance d'origine avec application d'ORDER BY.</returns>
      <param name="keys">Colonnes clés par lesquelles ordonner les résultats.</param>
      <param name="parameters">Zéro ou plusieurs paramètres utilisés dans cette méthode.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre keys ou parameters a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Le key est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limite les résultats de la requête uniquement aux propriétés définies dans la projection spécifiée.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> de type <see cref="T:System.Data.Common.DbDataRecord" /> qui est équivalente à l'instance d'origine avec application de SELECT.</returns>
      <param name="projection">Liste des propriétés sélectionnées qui définit la projection.</param>
      <param name="parameters">Zéro ou plusieurs paramètres utilisés dans cette méthode.</param>
      <exception cref="T:System.ArgumentNullException">La projection a la valeur Null ou les paramètres ont la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">Le projection est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limite les résultats de la requête uniquement à la propriété spécifiée dans la projection.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> d'un type compatible avec la projection spécifique.Le <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> retourné est équivalent à l'instance d'origine avec application de SELECT VALUE.</returns>
      <param name="projection">Liste de projections.</param>
      <param name="parameters">Jeu facultatif de paramètres de requête qui doivent être dans l'étendue lors de l'analyse.</param>
      <typeparam name="TResultType">Type de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> retourné par la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">La projection a la valeur Null ou les paramètres ont la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">Le projection est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Classe les résultats de la requête selon les critères spécifiés et ignore un nombre spécifié de résultats.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui est équivalente à l'instance d'origine avec application d'ORDER BY et de SKIP.</returns>
      <param name="keys">Colonnes clés par lesquelles ordonner les résultats.</param>
      <param name="count">Nombre de résultats à ignorer.Ce nombre doit être une constante ou une référence de paramètre.</param>
      <param name="parameters">Jeu facultatif de paramètres de requête qui doivent être dans l'étendue lors de l'analyse.</param>
      <exception cref="T:System.ArgumentNullException">Un argument a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Les clés correspondent à une chaîne vide ou le compte (nombre) est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui lorsqu'il est énuméré exécute la requête SQL spécifiée sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Retourne un <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> qui lorsqu'il est énuméré exécute la requête SQL spécifiée sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limite les résultats de la requête à un nombre d'éléments spécifié.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui est équivalente à l'instance d'origine avec application de TOP.</returns>
      <param name="count">Nombre d'éléments du résultat sous la forme d'une chaîne.</param>
      <param name="parameters">Jeu facultatif de paramètres de requête qui doivent être dans l'étendue lors de l'analyse.</param>
      <exception cref="T:System.ArgumentNullException">count a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">count est une chaîne vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Cette méthode du générateur de requêtes crée une requête dont les résultats sont les résultats de cette requête, ainsi que tous les résultats d'une autre requête, sans doublons. (c.- à-d., les résultats sont uniques).</summary>
      <returns>nouvelle instance ObjectQuery.</returns>
      <param name="query">Requête représentant les résultats à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">Si paramètre query a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Cette méthode du générateur de requêtes crée une requête dont les résultats sont les résultats de cette requête, ainsi que tous les résultats d'une autre requête, avec les doublons. (c.- à-d., les résultats ne sont pas obligatoirement uniques).</summary>
      <returns>nouvelle instance ObjectQuery.</returns>
      <param name="query">Requête représentant les résultats à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">Si paramètre query a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limite la requête aux résultats qui correspondent aux critères de filtrage spécifiés.</summary>
      <returns>Nouvelle instance <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui est équivalente à l'instance d'origine avec application de WHERE.</returns>
      <param name="predicate">Prédicat de filtrage.</param>
      <param name="parameters">Zéro ou plusieurs paramètres utilisés dans cette méthode.</param>
      <exception cref="T:System.ArgumentNullException">Le prédicat a la valeur Null ou les paramètres ont la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">Le prédicat est une chaîne vide.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>Cette classe implémente les interfaces IEnumerable et IDisposable.Une instance de cette classe est retournée par la méthode ObjectQuery.Execute.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.#ctor">
      <summary>Ce constructeur est destiné à être utilisé uniquement durant la création de doubles tests qui substituent les membres avec un comportement fictif ou factice.L'utilisation de ce constructeur à d'autres fins peut entraîner un comportement inattendu, y compris mais pas seulement la levée de <see cref="T:System.NullReferenceException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>Exécute les tâches associées à la libération ou à la redéfinition des ressources.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>Libère les ressources utilisées par le résultat de l'objet.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>En cas de substitution dans une classe dérivée, obtient le type du <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> générique.</summary>
      <returns>Type du <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> générique.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>Obtient le jeu de résultats suivant d'une procédure stockée.</summary>
      <returns>ObjectResult qui énumère les valeurs du prochain jeu de résultats.Null, en l'absence de résultats supplémentaires, ou si ObjectResult n'est pas le résultat d'un appel de procédure stockée.</returns>
      <typeparam name="TElement">Type de l'élément.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein des résultats de la requête.</summary>
      <returns>Énumérateur qui itère au sein des résultats de la requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Implémentation d'IListSource.ContainsListCollection.Retourne toujours la valeur False.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Retourne les résultats dans un format utile pour la liaison de données.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> d'objets entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Retourne un énumérateur asynchrone qui itère au sein des résultats de la requête.</summary>
      <returns>Énumérateur asynchrone qui itère au sein des résultats de la requête.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>Cette classe représente le résultat de la méthode <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" />.</summary>
      <typeparam name="T">Type du résultat.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor">
      <summary>Ce constructeur est destiné à être utilisé uniquement durant la création de doubles tests qui substituent les membres avec un comportement fictif ou factice.L'utilisation de ce constructeur à d'autres fins peut entraîner un comportement inattendu, y compris mais pas seulement la levée de <see cref="T:System.NullReferenceException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false, pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>Obtient le type de l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>
        <see cref="T:System.Type" /> qui correspond au type de l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein des résultats de la requête.</summary>
      <returns>Énumérateur qui itère au sein des résultats de la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Obtient de façon asynchrone l'énumérateur qui itère au sein de <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>Énumérateur qui itère au sein de <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>Représente un jeu d'entités typées utilisé pour exécuter des opérations de création, de lecture, de mise à jour et de suppression.</summary>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Ajoute un objet au contexte de l'objet dans le jeu d'entités actuel.</summary>
      <param name="entity">Objet à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Copie les valeurs scalaires de l'objet fourni dans l'objet du <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> qui a la même clé.</summary>
      <returns>L'objet mis à jour.</returns>
      <param name="currentEntity">Objet détaché ayant les mises à jour de propriétés à appliquer à l'objet d'origine.La clé d'entité de currentEntity doit correspondre à la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> d'une entrée dans le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Définit la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> d'un <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> de manière à ce qu'elle corresponde aux valeurs de propriété d'un objet fourni.</summary>
      <returns>L'objet mis à jour.</returns>
      <param name="originalEntity">Objet détaché ayant les mises à jour de propriétés à appliquer à l'objet d'origine.La clé d'entité d'originalEntity doit correspondre à la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> d'une entrée dans le <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>Attache un objet ou graphique d'objet au contexte de l'objet dans le jeu d'entités actuel.</summary>
      <param name="entity">Objet à attacher.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>Crée une instance du type spécifié.</summary>
      <returns>Instance du type T demandé, ou instance d'un type de proxy qui correspond au type T.</returns>
      <typeparam name="T">Type d'objet à retourner.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>Crée un nouvel objet de type d'entité.</summary>
      <returns>Le nouvel objet de type d'entité, ou une instance d'un type de proxy qui correspond au type d'entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Marque un objet pour la suppression.</summary>
      <param name="entity">Objet qui représente l'entité à supprimer.L'objet peut être dans tout état à l'exception de <see cref="F:System.Data.Entity.EntityState.Detached" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>Supprime l'objet du contexte de l'objet.</summary>
      <param name="entity">Objet à détacher.Seule l'entité est supprimée ; si des objets connexes sont suivis par le même <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, ils ne seront pas détachés automatiquement.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>Obtient les métadonnées du jeu d'entités représentées par cette instance <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>Représente une entité, un stub d'entité ou une relation</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Accepte les valeurs actuelles comme valeurs d'origine.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Fait correspondre les valeurs actuelles de l'entrée avec les valeurs de propriété d'un objet fourni.</summary>
      <param name="currentEntity">Objet détaché comportant les valeurs mises à jour à appliquer à l'objet.currentEntity peut également être la clé d'entité de l'objet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Fait correspondre les valeurs d'origine de l'entrée avec les valeurs de propriété d'un objet fourni.</summary>
      <param name="originalEntity">Objet détaché comportant les valeurs d'origine à appliquer à l'objet.originalEntity peut également être la clé d'entité de l'objet.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>Remplace l'état de l'entrée par la valeur <see cref="T:System.Data.Entity.EntityState" /> spécifiée.</summary>
      <param name="state">Valeur <see cref="T:System.Data.Entity.EntityState" /> à affecter à la propriété <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" /> de l'entrée.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>Obtient les valeurs de propriétés actuelles de l'objet ou de la relation associé à cet objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" /> qui contient les valeurs actuelles de l'objet ou de la relation associé à cet objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>Marque une entité comme supprimée.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>Obtient l'objet entité.</summary>
      <returns>Objet entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>Obtient la clé d'entité.</summary>
      <returns>Clé d'entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>Obtient le <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> pour l'objet ou la relation.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> pour l'objet ou la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Retourne les noms des propriétés d'un objet qui ont changé depuis le dernier appel à <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</summary>
      <returns>Collection <see cref="T:System.Collections.Generic.IEnumerable`1" /> de noms en tant que chaîne.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Obtient la version modifiable des valeurs d'origine de l'objet associé à ce <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>Valeurs d'origine modifiables des données d'objet.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>Utilise DetectChanges pour déterminer si la valeur actuelle de la propriété avec le nom donné est différente de la valeur d'origine.Notez qu'elle peut être différente de celle de la propriété marquée comme étant modifiée, car une propriété qui n'a pas été modifiée peut encore être marquée comme étant modifiée.</summary>
      <returns>true si la propriété a été modifiée ; sinon, false.</returns>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>Obtient une valeur qui indique si la <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> représente une relation.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> représente une relation ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Obtient le <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> pour <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> du <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>Obtient la version en lecture seule des valeurs d'origine de l'objet ou de la relation.</summary>
      <returns>Version en lecture seule des valeurs d'origine de l'entité ou de l'entrée du jeu de relations.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>Refuse les modifications apportées à la propriété avec le nom donné, car la propriété a été chargée, attachée, enregistrée pour la dernière fois ou les modifications ont été acceptées.La valeur d'origine de la propriété est stockée et la propriété ne sera plus marquée comme étant modifiée.</summary>
      <param name="propertyName">Nom de la propriété à modifier.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Obtient l'instance <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> pour l'objet représenté par l'entrée.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>Affecte la valeur de modification à l'état de l'objet ou de la relation.</summary>
      <exception cref="T:System.InvalidOperationException">Si l'état n'est pas modifié ou inchangé</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Marque la propriété spécifiée comme modifiée.</summary>
      <param name="propertyName">Nom de la propriété.</param>
      <exception cref="T:System.InvalidOperationException">Si l'état n'est pas modifié ou inchangé</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>Obtient l'état de <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>État de <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Méthode utilisée pour signaler qu'une propriété complexe a été modifiée. La valeur de propriété mise en cache lors de l'exécution de la méthode EntityMemberChanging est désormais ajoutée à OriginalValues</summary>
      <param name="entityMemberName">Nom de la propriété d'entité de niveau supérieur qui a été modifiée</param>
      <param name="complexObject">Objet complexe qui contient la propriété ayant changé</param>
      <param name="complexObjectMemberName">Nom de la propriété ayant changé sur complexObject</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Méthode utilisée pour signaler qu'une propriété complexe est sur le point d'être modifiée. La valeur actuelle de la propriété spécifiée est mise en cache lorsque cette méthode est appelée.</summary>
      <param name="entityMemberName">Nom de la propriété d'entité de niveau supérieur en cours de modification</param>
      <param name="complexObject">Objet complexe qui contient la propriété en cours de modification</param>
      <param name="complexObjectMemberName">Nom de la propriété en cours de modification sur complexObject</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Méthode utilisée pour signaler qu'une propriété d'entité scalaire a été modifiée. La valeur de propriété mise en cache lors de l'exécution de la méthode EntityMemberChanging est désormais ajoutée à OriginalValues</summary>
      <param name="entityMemberName">Nom de la propriété d'entité qui a changé</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Méthode utilisée pour signaler qu'une propriété d'entité scalaire est sur le point d'être modifiée. La valeur actuelle de la propriété spécifiée est mise en cache lorsque cette méthode est appelée.</summary>
      <param name="entityMemberName">Nom de la propriété d'entité en cours de modification</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Retourne l'EntityState de l'ObjectStateEntry</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>Maintient la gestion de l'identité et de l'état d'objet pour les instances de type d'entité et les instances de relation.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</summary>
      <param name="metadataWorkspace">Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> qui fournit des informations de mappage et de métadonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>Remplace l'état de <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour un objet spécifique par l'entityState spécifié.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour l'entité fournie.</returns>
      <param name="entity">Objet pour lequel l'état doit être modifié.</param>
      <param name="entityState">Nouvel état de l'objet.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque l'entité a la valeur Null.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque l'objet n'est pas détaché et n'a pas d'entrée dans le gestionnaire d'état, lorsque vous essayez de changer l'état en <see cref="F:System.Data.Entity.EntityState.Detached" /> à partir d'un autre <see cref="T:System.Data.Entity.EntityState." /> ou lorsque l'état ne correspond pas à une valeur <see cref="T:System.Data.Entity.EntityState" /> valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>Modifie l'état de la relation entre deux objets entités spécifiée selon les deux objets connexes et le nom de la propriété de navigation.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour la relation ayant changé.</returns>
      <param name="sourceEntity">Instance d'objet ou <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'entité source en terminaison de la relation.</param>
      <param name="targetEntity">Instance d'objet ou <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'entité cible à l'autre extrémité de la relation.</param>
      <param name="navigationProperty">Nom de la propriété de navigation sur la source qui retourne la cible spécifiée.</param>
      <param name="relationshipState">Le <see cref="T:System.Data.Entity.EntityState" /> demandé de la relation spécifiée.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque la source ou la cible a la valeur Null.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque vous essayez de modifier l'état de la relation vers un état autre que vers un état autre que <see cref="F:System.Data.Entity.EntityState.Deleted" /> ou <see cref="F:System.Data.Entity.EntityState.Detached" />, que la source ou la cible se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Deleted" />, que vous essayez de modifier l'état de la relation vers un état autre que <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Detached" />, que la source ou la cible se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Added" /> ou que l'état n'est pas une valeur <see cref="T:System.Data.Entity.EntityState" /> valide</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>Modifie l'état de la relation entre deux objets entités spécifiée selon les deux objets connexes et les propriétés de la relation.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour la relation ayant changé.</returns>
      <param name="sourceEntity">Instance d'objet ou <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'entité source en terminaison de la relation.</param>
      <param name="targetEntity">Instance d'objet ou <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'entité cible à l'autre extrémité de la relation.</param>
      <param name="relationshipName">Nom de la relation.</param>
      <param name="targetRoleName">Nom du rôle à la terminaison cible de la relation.</param>
      <param name="relationshipState">Le <see cref="T:System.Data.Entity.EntityState" /> demandé de la relation spécifiée.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque la source ou la cible a la valeur Null.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque vous essayez de modifier l'état de la relation vers un état autre que <see cref="F:System.Data.Entity.EntityState.Deleted" /> ou <see cref="F:System.Data.Entity.EntityState.Detached" />, que la source ou la cible se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Deleted" />, que vous essayez de modifier l'état de la relation vers un état autre que <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Detached" />, que la source ou la cible se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Added" /> ou que l'état n'est pas une valeur <see cref="T:System.Data.Entity.EntityState" /> valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>Modifie l'état de la relation entre deux objets entités spécifiée selon les deux objets connexes et une expression LINQ qui définit la propriété de navigation.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour la relation ayant changé.</returns>
      <param name="sourceEntity">Instance d'objet ou <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'entité source en terminaison de la relation.</param>
      <param name="targetEntity">Instance d'objet ou <see cref="T:System.Data.Entity.Core.EntityKey" /> de l'entité cible à l'autre extrémité de la relation.</param>
      <param name="navigationPropertySelector">Expression LINQ qui sélectionne la propriété de navigation sur la source qui retourne la cible spécifiée.</param>
      <param name="relationshipState">Le <see cref="T:System.Data.Entity.EntityState" /> demandé de la relation spécifiée.</param>
      <typeparam name="TEntity">Type d'entité de l'objet source.</typeparam>
      <exception cref="T:System.ArgumentNullException">Lorsque la source, la cible ou le sélecteur a la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">le sélecteur est incorrect ou ne peut pas retourner de propriété de navigation.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque vous essayez de modifier l'état de la relation vers un état autre que <see cref="F:System.Data.Entity.EntityState.Deleted" /> ou <see cref="F:System.Data.Entity.EntityState.Detached" />, que la source ou la cible se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Deleted" />, que vous essayez de modifier l'état de la relation vers un état autre que <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Detached" />, que la source ou la cible se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Added" /> ou que l'état n'est pas une valeur <see cref="T:System.Data.Entity.EntityState" /> valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>Retourne une collection d'objets <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour les objets ou les relations avec l'état donné.</summary>
      <returns>Collection d'objets <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> dans l'objet <see cref="T:System.Data.Entity.EntityState" /> donné.</returns>
      <param name="state">Objet <see cref="T:System.Data.Entity.EntityState" /> utilisé pour filtrer les objets <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> retournés.</param>
      <exception cref="T:System.ArgumentException">Lorsque l'état est <see cref="F:System.Data.Entity.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour l'entrée d'objet ou de relation avec la clé spécifiée.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondant pour le <see cref="T:System.Data.Entity.Core.EntityKey" /> donné.</returns>
      <param name="key">
        <see cref="T:System.Data.Entity.Core.EntityKey" />.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque la clé a la valeur Null.</exception>
      <exception cref="T:System.ArgumentException">Lorsque la clé spécifiée est introuvable dans le gestionnaire d'état.</exception>
      <exception cref="T:System.InvalidOperationException">Il n'existe aucune entité avec l'objet <see cref="T:System.Data.Entity.Core.EntityKey" /> spécifié dans l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour l'objet spécifié.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondant pour le <see cref="T:System.Object" /> donné.</returns>
      <param name="entity">Objet <see cref="T:System.Object" /> auquel appartient l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> récupéré.</param>
      <exception cref="T:System.InvalidOperationException">Il n'existe aucune entité pour l'objet <see cref="T:System.Object" /> dans l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Retourne le <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> utilisé par l'objet spécifié.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> pour l'objet spécifié.</returns>
      <param name="entity">Objet pour lequel retourner le <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</param>
      <exception cref="T:System.InvalidOperationException">L'entité n'implémente pas IEntityWithRelationships et n'est pas suivie par cet ObjectStateManager</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Obtient l'objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associé à ce gestionnaire d'état.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> associé à ce <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Se produit lorsque des entités sont ajoutées ou supprimées du gestionnaire d'état.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Essaie de récupérer l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondant pour l'objet ou la relation avec l'objet <see cref="T:System.Data.Entity.Core.EntityKey" /> spécifié.</summary>
      <returns>Une valeur booléenne qui est true s'il y a un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondant pour l'objet <see cref="T:System.Data.Entity.Core.EntityKey" /> donné ; sinon, false.</returns>
      <param name="key">Objet <see cref="T:System.Data.Entity.Core.EntityKey" /> donné.</param>
      <param name="entry">Lorsque cette méthode est retournée, contient un objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour l'objet <see cref="T:System.Data.Entity.Core.EntityKey" /> donné. Ce paramètre est passé sans être initialisé.</param>
      <exception cref="T:System.ArgumentNullException">Une valeur null (Nothing en Visual Basic) est fournie pour la clé.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Essaie de récupérer l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondant pour l'objet <see cref="T:System.Object" /> spécifié.</summary>
      <returns>Une valeur booléenne qui est true s'il y a un <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondant pour l'objet donné ; sinon, false.</returns>
      <param name="entity">Objet <see cref="T:System.Object" /> auquel appartient l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> récupéré.</param>
      <param name="entry">Lorsque cette méthode est retournée, contient l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> pour l'objet <see cref="T:System.Data.Entity.Core.EntityKey" /> donné. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>Retourne le <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> utilisé par l'objet spécifié.</summary>
      <returns>true si une instance <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> a été retournée pour l'entité fournie ; sinon, false.</returns>
      <param name="entity">Objet pour lequel retourner le <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">Lorsque cette méthode est retournée, elle contient le <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> pour l'entité.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>Les valeurs d'origine des propriétés d'une entité lors de leur récupération à partir de la base de données.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>DataContractResolver qui sait résoudre les types de proxy créés pour les classes ignorant la persistance dans leurs types de base.Utilisé avec le DataContractSerializer.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>Lors de la désérialisation, mappe toutes les informations xsi:type sur le type réel de l'objet ignorant la persistance.</summary>
      <returns>Retourne le type auquel xsi:type est mappé.Retourne null si aucun type connu qui correspond à xsi:type n'est trouvé.</returns>
      <param name="typeName">Informations xsi:type à mapper.</param>
      <param name="typeNamespace">Espace de noms du xsi:type.</param>
      <param name="declaredType">Type déclaré.</param>
      <param name="knownTypeResolver">Instance de <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>Lors de la sérialisation, mappe les types réels sur les informations xsi:type.</summary>
      <returns>true si le type a été résolu, sinon false.</returns>
      <param name="type">Type réel de l'objet ignorant la persistance.</param>
      <param name="declaredType">Type déclaré.</param>
      <param name="knownTypeResolver">Instance de <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">Lorsque cette méthode est retournée, elle contient une liste de déclarations xsi:type.</param>
      <param name="typeNamespace">Cette méthode retourne une liste d'espaces de noms utilisés.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>Définit les différentes façons de traiter les propriétés modifiées lors de l'actualisation des données en mémoire depuis la base de données.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>Pour les objets clients non modifiés, comportement identique à celui de StoreWins.Pour les objets clients modifiés, actualise les valeurs d'origine avec la valeur du magasin, en conservant toutes les valeurs sur l'objet client.Lors de la prochaine mise à jour, toutes les unités de modification client seront considérées comme étant modifiées et nécessiteront une mise à jour.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>Ignore les modifications sur le client et actualise les valeurs avec des valeurs du magasin.Les valeurs d'origine du client sont mises à jour de façon à correspondre à celles du magasin.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>Indicateurs utilisés pour modifier le comportement d'ObjectContext.SaveChanges()</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>Après avoir enregistré les modifications, la méthode AcceptAllChangesAfterSave est appelée, ce qui réinitialise le suivi des modifications dans ObjectStateManager.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>Avant l'enregistrement des modifications, la méthode DetectChanges est appelée pour synchroniser les valeurs de propriété des objets attachés au contexte de l'objet avec les données dans ObjectStateManager.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>Les modifications sont enregistrées sans appeler les méthodes DetectChanges ou AcceptAllChangesAfterSave.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>Interface qui représente l'interface minimale requise pour une entité dans ADO.NET.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Signale au traceur de modifications qu'une propriété d'un objet complexe a changé.</summary>
      <param name="property">Nom de la propriété modifiée.</param>
      <exception cref="T:System.ArgumentNullException">property a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Signale au traceur de modifications qu'une modification de propriété est en attente sur un objet complexe.</summary>
      <param name="property">Nom de la propriété en cours de modification.</param>
      <exception cref="T:System.ArgumentNullException">property a la valeur null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Attribut pour les propriétés complexes Propriétés AttributeUsage par défaut implicites Inherited=True, AllowMultiple=False. Le système de métadonnées prévoit ce comportement et examine uniquement le premier de chacun de ces attributs, même s'il en existe plus.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>attribut des types complexes</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Attribut qui identifie la classe de base EDM</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>Attribut qui identifie un type enum.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>Indique que la méthode donnée est un proxy pour une fonction EDM.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Crée une nouvelle instance DbFunctionAttribute.</summary>
      <param name="namespaceName">Nom de l'espace de noms de la fonction EDM représentée par la méthode attribuée.</param>
      <param name="functionName">Nom de fonction de la fonction EDM représentée par la méthode attribuée.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Attribut de base des propriétés mappées aux éléments de magasin.Propriétés AttributeUsage par défaut implicites Inherited=True, AllowMultiple=False. Le système de métadonnées prévoit ce comportement et examine uniquement le premier de chacun de ces attributs, même s'il en existe plus.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Définit une relation entre deux types d'entité selon une association dans le modèle conceptuel.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Crée une instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Nom de l'espace de noms pour l'association à laquelle cette entité participe.</param>
      <param name="relationshipName">Nom de la relation à laquelle cette entité participe.</param>
      <param name="role1Name">Nom du rôle pour le type à une terminaison de l'association.</param>
      <param name="role1Multiplicity">Valeur de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> qui indique la multiplicité à une terminaison de l'association, par exemple un ou plusieurs.</param>
      <param name="role1Type">Type de l'entité à une terminaison de l'association.</param>
      <param name="role2Name">Nom du rôle pour le type à l'autre terminaison de l'association.</param>
      <param name="role2Multiplicity">Valeur de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> qui indique la multiplicité à l'autre terminaison de l'association, par exemple un ou plusieurs.</param>
      <param name="role2Type">Type de l'entité à l'autre terminaison de l'association.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Nom de l'espace de noms pour l'association à laquelle cette entité participe.</param>
      <param name="relationshipName">Nom de la relation à laquelle cette entité participe.</param>
      <param name="role1Name">Nom du rôle pour le type à une terminaison de l'association.</param>
      <param name="role1Multiplicity">Valeur de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> qui indique la multiplicité à une terminaison de l'association, par exemple un ou plusieurs.</param>
      <param name="role1Type">Type de l'entité à une terminaison de l'association.</param>
      <param name="role2Name">Nom du rôle pour le type à l'autre terminaison de l'association.</param>
      <param name="role2Multiplicity">Valeur de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> qui indique la multiplicité à l'autre terminaison de l'association, par exemple un ou plusieurs.</param>
      <param name="role2Type">Type de l'entité à l'autre terminaison de l'association.</param>
      <param name="isForeignKey">Valeur qui indique si la relation est basée sur la valeur de clé étrangère.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Obtient une valeur booléenne qui indique si la relation est basée sur la valeur de clé étrangère.</summary>
      <returns>true si la relation est basée sur la valeur de clé étrangère ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Nom de la relation.</summary>
      <returns>Objet <see cref="T:System.String" /> qui correspond au nom d'une relation définie par cet objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>Espace de noms pour la relation.</summary>
      <returns>Objet <see cref="T:System.String" /> qui correspond à l'espace de noms pour la relation.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Multiplicité à une terminaison de la relation.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> qui indique la multiplicité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Nom du rôle à une terminaison de la relation.</summary>
      <returns>Objet <see cref="T:System.String" /> qui correspond au nom du rôle.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Type de l'entité à une terminaison de la relation.</summary>
      <returns>Objet <see cref="T:System.Type" /> qui correspond au type de l'objet à cette terminaison de l'association.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Multiplicité à l'autre terminaison de la relation.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> qui indique la multiplicité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Nom du rôle à l'autre terminaison de la relation.</summary>
      <returns>Objet <see cref="T:System.String" /> qui correspond au nom du rôle.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Type de l'entité à l'autre terminaison de la relation.</summary>
      <returns>Objet <see cref="T:System.Type" /> qui correspond au type de l'objet à l'autre terminaison de l'association.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Attribut identifiant les terminaisons définies pour un RelationSet Propriétés AttributeUsage par défaut implicites Inherited=True, AllowMultiple=False. Le système de métadonnées prévoit ce comportement et examine uniquement le premier de chacun de ces attributs, même s'il en existe plus.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" />.</summary>
      <param name="relationshipNamespaceName">Nom de l'espace de noms de la propriété de relation.</param>
      <param name="relationshipName">Nom de la relation.Le nom de la relation n'est pas qualifié par un espace de noms.</param>
      <param name="targetRoleName">Nom du rôle à l'autre terminaison de la relation.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Obtient le nom de relation non qualifié.</summary>
      <returns>Nom de la relation.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>Nom de l'espace de noms de la propriété de navigation.</summary>
      <returns>
        <see cref="T:System.String" /> qui correspond au nom de l'espace de noms.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Obtient le nom du rôle à l'autre terminaison de la relation.</summary>
      <returns>Le nom de rôle cible est spécifié par l'attribut Role de l'autre élément End dans l'association qui définit cette relation dans le modèle conceptuel.Pour plus d'informations, consultez Association (EDM).</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Attribut pour les propriétés scalaires dans un IEntity.Propriétés AttributeUsage par défaut implicites Inherited=True, AllowMultiple=False. Le système de métadonnées prévoit ce comportement et examine uniquement le premier de chacun de ces attributs, même s'il en existe plus.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Obtient ou définit la valeur qui indique si la propriété fait partie de la clé d'entité.</summary>
      <returns>Valeur qui indique si la propriété fait partie de la clé d'entité.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Obtient ou définit la valeur qui indique si la propriété peut avoir une valeur null.</summary>
      <returns>Valeur qui indique si la propriété peut avoir une valeur null.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Attribut des types statiques</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> avec une valeur unique pour chaque modèle référencé par l'assembly.</summary>
      <param name="assemblyGuid">Chaîne représentant une valeur de GUID unique pour le modèle dans l'assembly.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>Attribut de base pour les types schématisés</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>Nom du type dans le schéma conceptuel qui est mappé à la classe à laquelle cet attribut est appliqué.</summary>
      <returns>
        <see cref="T:System.String" /> qui correspond au nom.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>Nom de l'espace de noms du type d'objet de l'entité ou du type complexe dans le schéma conceptuel qui est mappé à ce type.</summary>
      <returns>
        <see cref="T:System.String" /> qui correspond au nom de l'espace de noms.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>Collection d'entités modélisant une construction EDM spécifique, qui peut être toutes les entités d'un type particulier ou les entités qui participent à une relation spécifique.</summary>
      <typeparam name="TEntity">Type des entités dans cette collection.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Ajoute un objet à la collection.</summary>
      <param name="item">Objet à ajouter à la collection.L'entité doit implémenter <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <exception cref="T:System.ArgumentNullException">entity a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Définit les relations entre un objet et une collection d'objets connexes dans un contexte d'objet.</summary>
      <param name="entities">Collection d'objets dans le contexte de l'objet qui sont associés à l'objet source.</param>
      <exception cref="T:System.ArgumentNullException">La collection entities a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">L'objet source ou un objet de la collection d'entités a la valeur null ou ne se trouve pas dans l'état <see cref="F:System.Data.Entity.EntityState.Unchanged" /> ou <see cref="F:System.Data.Entity.EntityState.Modified" />. -ou -La relation ne peut pas être définie en fonction des métadonnées EDM.Cela peut se produire lorsque l'association dans le schéma conceptuel ne prend pas en charge une relation entre les deux types.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Définit une relation entre deux objets attachés dans un contexte d'objet.</summary>
      <param name="entity">Objet qui est attaché.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque entity a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque entity ne peut pas être mis en rapport avec l'objet source.Cela peut se produire lorsque l'association dans le schéma conceptuel ne prend pas en charge une relation entre les deux types - ou - Lorsque l'un ou l'autre objet a la valeur null ou ne se trouve pas dans l'état <see cref="F:System.Data.Entity.EntityState.Unchanged" /> ou <see cref="F:System.Data.Entity.EntityState.Modified" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Supprime toutes les entités de la collection.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Détermine si un objet spécifique existe dans la collection.</summary>
      <returns>true si l'objet est trouvé dans <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ; sinon, false.</returns>
      <param name="item">Objet à rechercher dans <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copie tout le contenu de la collection dans un tableau, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array">Tableau dans lequel effectuer la copie.</param>
      <param name="arrayIndex">Index de base zéro dans le tableau dans lequel la copie doit commencer.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Obtient le nombre d'objets qui sont contenus dans la collection.</summary>
      <returns>Nombre d'éléments contenus dans l'objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Retourne une requête d'objet qui, lorsqu'elle est exécutée, retourne le même jeu d'objets que celui qui existe dans la collection actuelle.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui représente la collection d'entités.</returns>
      <exception cref="T:System.InvalidOperationException">Lorsque l'objet se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Added" /> ou que l'objet se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Detached" /> avec un <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> autre que <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Retourne un énumérateur utilisé pour itérer au sein des objets de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui itère au sein du jeu de valeurs mis en cache par <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> est en lecture seule.</summary>
      <returns>Retourne toujours la valeur False.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Charge les objets connexes dans la collection, à l'aide de l'option de fusion spécifiée.</summary>
      <param name="mergeOption">Spécifie comment les objets de cette collection doivent être fusionnés avec les objets qui ont pu être retournés à partir de requêtes précédentes contre le même objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Charge de façon asynchrone l'entité ou les entités associées dans la terminaison connexe locale à l'aide de l'option de fusion par défaut.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="mergeOption">Option de fusion.</param>
      <param name="cancellationToken">CancellationToken à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Utilisé en interne pour désérialiser des objets entité.</summary>
      <param name="context">Contexte de diffusion en continu.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Utilisé en interne pour sérialiser des objets entité.</summary>
      <param name="context">Contexte de diffusion en continu.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Supprime un objet de la collection et marque la relation pour la suppression.</summary>
      <returns>true si l'élément a pu être supprimé, sinon false.</returns>
      <param name="item">Objet à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentNullException">L'objet entity a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">L'objet entité n'est pas attaché au même contexte d'objet. -ou- L'objet entité n'a pas de gestionnaire de relations valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur utilisé pour itérer au sein du jeu de valeurs mis en cache par <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui itère au sein du jeu de valeurs mis en cache par <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Implémentation d'IListSource.ContainsListCollection.Retourne toujours la valeur False.Cela signifie que l'IList retourné est celui qui contient les données réelles, il ne s'agit pas d'une liste de collections.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Retourne la collection sous la forme d'un objet <see cref="T:System.Collections.IList" /> utilisé pour la liaison de données.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> d'objets entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>Classe de base pour toutes les classes EntityObject prescrites.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Obtient ou définit la clé pour cet objet.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> pour cet objet.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>Obtient l'état d'entité de l'objet.</summary>
      <returns>
        <see cref="T:System.Data.Entity.EntityState" /> de cet objet.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Notifie le dispositif de suivi des modifications qu'une propriété a changé.</summary>
      <param name="property">Nom de la propriété modifiée.</param>
      <exception cref="T:System.ArgumentNullException">property a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Notifie le dispositif de suivi des modifications qu'une modification de propriété est en cours.</summary>
      <param name="property">Nom de la propriété en cours de modification.</param>
      <exception cref="T:System.ArgumentNullException">property a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Utilisée par ObjectStateManager pour attacher ou détacher cet EntityObject dans le cache.</summary>
      <param name="changeTracker">Référence à l'ObjectStateEntry qui contient cette entité</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Retourne le conteneur des objets, des collections et des références de la propriété de navigation créés de manière différée.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>Modélise une terminaison de relation avec multiplicité 1.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Retourne la clé de l'objet connexe.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.EntityKey" /> qui est la clé de l'objet connexe.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>Modélise une terminaison de relation avec multiplicité 1.</summary>
      <typeparam name="TEntity">Type de l'entité référencée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Crée une relation plusieurs-à-un ou un-à-un entre deux objets dans le contexte de l'objet.</summary>
      <param name="entity">Objet qui est attaché.</param>
      <exception cref="T:System.ArgumentNullException">Lorsque entity a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Lorsque entity ne peut pas être mis en rapport avec la terminaison connexe actuelle.Cela peut se produire lorsque l'association dans le schéma conceptuel ne prend pas en charge une relation entre les deux types.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Crée une requête d'objet équivalente qui retourne l'objet connexe.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui retourne l'objet connexe.</returns>
      <exception cref="T:System.InvalidOperationException">Lorsque l'objet se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Added" /> ou que l'objet se trouve dans un état <see cref="F:System.Data.Entity.EntityState.Detached" /> avec un <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" /> autre que <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Charge l'objet connexe pour cet objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> avec l'option de fusion spécifiée.</summary>
      <param name="mergeOption">Spécifie la manière dont l'objet doit être retourné s'il existe déjà dans l'objet <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
      <exception cref="T:System.InvalidOperationException">La source du <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> a la valeur Null, une requête a retourné plusieurs terminaisons connexes ou une requête n'a retourné aucune terminaison connexe alors qu'une terminaison connexe était attendue.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Charge de façon asynchrone l'entité ou les entités associées dans la terminaison connexe locale à l'aide de l'option de fusion par défaut.</summary>
      <returns>Entité ou entités chargées associées dans la terminaison connexe.</returns>
      <param name="mergeOption">Options de fusion.</param>
      <param name="cancellationToken">CancellationToken à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Cette méthode est utilisée en interne pour sérialiser des objets entité associés.</summary>
      <param name="context">Flux sérialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Cette méthode est utilisée en interne pour sérialiser des objets entité associés.</summary>
      <param name="context">Flux sérialisé.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>Obtient ou définit l'objet connexe retourné par cet objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</summary>
      <returns>Objet retourné par cet objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>Cette interface est implémentée par un dispositif de suivi des modifications et est utilisée par les classes de données pour signaler les modifications.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Signale au traceur de modifications qu'une propriété d'un type complexe a changé.</summary>
      <param name="entityMemberName">Nom de la propriété complexe du type d'entité qui a changé.</param>
      <param name="complexObject">Type complexe qui contient la propriété ayant changé.</param>
      <param name="complexObjectMemberName">Nom de la propriété ayant changé sur le type complexe.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Signale au dispositif de suivi des modifications qu'une modification de propriété complexe est en cours.</summary>
      <param name="entityMemberName">Nom de la propriété d'entité de niveau supérieur en cours de modification.</param>
      <param name="complexObject">Type complexe qui contient la propriété en cours de modification.</param>
      <param name="complexObjectMemberName">Nom de la propriété en cours de modification sur le type complexe.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Signale au traceur de modifications qu'une propriété d'un type d'entité a changé.</summary>
      <param name="entityMemberName">Nom de la propriété qui a été modifiée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Signale au traceur de modifications une modification en attente d'une propriété d'un type d'entité.</summary>
      <param name="entityMemberName">Nom de la propriété modifiée.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Obtient l'état actuel d'un objet suivi.</summary>
      <returns>
        <see cref="T:System.Data.Entity.EntityState" /> qui correspond à l'état de l'objet suivi. Pour plus d'informations, consultez Résolution d'identité, Gestion des états et Suivi des modifications dans les entités POCO.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Interface minimale qu'une classe de données doit implémenter pour pouvoir être gérée par un dispositif de suivi des modifications.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Obtient ou définit l'objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> utilisé pour signaler les modifications.</summary>
      <param name="changeTracker">Objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> utilisé pour signaler les modifications.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>Interface qui définit une entité contenant une clé.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Obtient ou définit l'objet <see cref="T:System.Data.Entity.Core.EntityKey" /> pour les instances des types d'entités qui implémentent cette interface.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> pour les instances des types d'entités qui implémentent cette interface.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>Interface qu'une classe de données doit implémenter si elle expose des relations</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Retourne le gestionnaire de relations qui gère les relations pour une instance d'un type d'entité.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> pour cette entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>Représente une terminaison d'une relation.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Ajoute un objet à la terminaison connexe.</summary>
      <param name="entity">Objet à ajouter à la collection.L'entité doit implémenter <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Ajoute un objet à la terminaison connexe.</summary>
      <param name="entity">Objet à ajouter à la collection.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Définit une relation entre deux objets attachés.</summary>
      <param name="entity">Objet qui est attaché.L'entité doit implémenter <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Définit une relation entre deux objets attachés.</summary>
      <param name="entity">Objet qui est attaché.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Retourne un objet <see cref="T:System.Collections.IEnumerable" /> qui représente les objets appartenant à la terminaison connexe.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerable" /> qui représente les objets appartenant à la terminaison connexe.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Retourne un objet <see cref="T:System.Collections.IEnumerator" /> qui itère au sein de la collection d'objets connexes.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui itère au sein de la collection d'objets connexes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Obtient ou définit une valeur qui indique si l'entité (pour un <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" />) ou si toutes les entités dans la collection (pour un <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />) ont été chargées à partir de la base de données.</summary>
      <returns>True si toutes les entités associées ont été chargées ou si la valeur true a été explicitement affectée à l'indicateur IsLoaded ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Charge les objets connexes dans cette terminaison connexe avec l'option de fusion par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Charge les objets connexes dans la terminaison connexe avec l'option de fusion spécifiée.</summary>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de la fusion d'objets en un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existant.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Charge les objets connexes de manière asynchrone dans la terminaison connexe avec l'option de fusion spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de la fusion d'objets en un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existant.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Charge les objets connexes de manière asynchrone dans cette terminaison connexe avec l'option de fusion par défaut.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Obtient le nom de la relation à laquelle cette terminaison connexe participe.</summary>
      <returns>Nom de la relation à laquelle cet objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> participe.Le nom de la relation n'est pas qualifié par un espace de noms.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Retourne une référence aux métadonnées de la terminaison connexe.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> qui contient les métadonnées de la terminaison d'une relation.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Supprime un objet de la collection d'objets à la terminaison connexe.</summary>
      <returns>true si l'entité a été supprimée avec succès ; false si l'entité ne fait pas partie de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">Objet à supprimer de la collection.L'entité doit implémenter <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Supprime un objet de la collection d'objets à la terminaison connexe.</summary>
      <returns>true si l'entité a été supprimée avec succès ; false si l'entité ne fait pas partie de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">Objet à supprimer de la collection.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Obtient le nom du rôle à la terminaison source de la relation.</summary>
      <returns>Nom du rôle à la terminaison source de la relation.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Obtient le nom du rôle à la terminaison cible de la relation.</summary>
      <returns>Nom du rôle à la terminaison cible de la relation.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>Classe de base pour EntityCollection et EntityReference</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Se produit lorsqu'une modification est apportée à une terminaison connexe.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Retourne un objet <see cref="T:System.Collections.IEnumerator" /> qui itère au sein de la collection d'objets connexes.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui itère au sein de la collection d'objets connexes.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Obtient une valeur qui indique si tous les objets connexes ont été chargés.</summary>
      <returns>true si la terminaison connexe contient tous les objets connexes de la base de données ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>Charge les objets connexes dans la terminaison connexe avec l'option de fusion par défaut.</summary>
      <exception cref="T:System.InvalidOperationException">Lorsque l'objet source a été récupéré à l'aide d'une requête <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> et que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> n'est pas <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, que les objets connexes sont déjà chargés, que l'objet source n'est pas attaché au <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, que l'objet source est suivi mais qu'il se trouve dans l'état <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> ou que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> utilisé pour <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Charge un ou des objets connexes depuis la terminaison connexe avec l'option de fusion spécifiée.</summary>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de la fusion d'objets en un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existant.</param>
      <exception cref="T:System.InvalidOperationException">Lorsque l'objet source a été récupéré à l'aide d'une requête <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> et que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> n'est pas <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, que les objets connexes sont déjà chargés, que l'objet source n'est pas attaché au <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, que l'objet source est suivi mais qu'il se trouve dans l'état <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> ou que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> utilisé pour <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Charge les objets de manière asynchrone à partir de la terminaison connexe avec l'option de fusion spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="mergeOption">Objet <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> à utiliser lors de la fusion d'objets en un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existant.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Lorsque l'objet source a été récupéré à l'aide d'une requête <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> et que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> n'est pas <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, que les objets connexes sont déjà chargés, que l'objet source n'est pas attaché au <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, que l'objet source est suivi mais qu'il se trouve dans l'état <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> ou que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> utilisé pour <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Charge les objets connexes de manière asynchrone dans la terminaison connexe avec l'option de fusion par défaut.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Lorsque l'objet source a été récupéré à l'aide d'une requête <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> et que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> n'est pas <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, que les objets connexes sont déjà chargés, que l'objet source n'est pas attaché au <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, que l'objet source est suivi mais qu'il se trouve dans l'état <see cref="F:System.Data.Entity.EntityState.Added" /> ou <see cref="F:System.Data.Entity.EntityState.Deleted" /> ou que le <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> utilisé pour <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> est <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Utilisé en interne pour désérialiser des objets entités avec les instances <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Flux sérialisé.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Obtient le nom de la relation à laquelle cette terminaison connexe participe.</summary>
      <returns>Nom de la relation à laquelle cet objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" /> participe.Le nom de la relation n'est pas qualifié par un espace de noms.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Obtient une référence aux métadonnées de la terminaison connexe.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> qui contient les métadonnées de la terminaison d'une relation.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Obtient le nom du rôle à la terminaison source de la relation.</summary>
      <returns>
        <see cref="T:System.String" /> qui correspond au nom de rôle.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Ajoute une entité à la terminaison connexe.Cette méthode fonctionne de la même façon que la méthode Add(object).Elle est conservée à des fins de compatibilité descendante avec les versions antérieures de IRelatedEnd.</summary>
      <param name="entity">Instance d'entité à ajouter à la terminaison associée</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Ajoute une entité à la terminaison connexe.Si le propriétaire est attaché à un cache, toutes les terminaisons connectées sont ajoutées au cache d'objets et leurs relations correspondantes sont également ajoutées à l'objet ObjectStateManager.Le RelatedEnd de la relation est également fixe.</summary>
      <param name="entity">Instance d'entité à ajouter à la terminaison associée</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Attache une entité à la terminaison connexe.Cette méthode fonctionne de la même façon que la méthode Attach(object).Elle est conservée à des fins de compatibilité descendante avec les versions antérieures de IRelatedEnd.</summary>
      <param name="entity">Entité à attacher à la terminaison connexe</param>
      <exception cref="T:System.ArgumentNullException">Levée lorsque <paramref name="entity" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">Levée lorsque l'entité ne peut pas être associée via la terminaison connexe actuelle.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Attache une entité à la terminaison connexe.Si la terminaison connexe est déjà remplie ou partiellement remplie, la méthode fusionne les entités existantes avec l'entité donnée.Il n'est pas supposé que l'entité donnée est le jeu complet d'entités associées.Le propriétaire et toutes les entités passées doivent être à l'état Unchanged ou Modified.Les éléments supprimés sont autorisés uniquement lorsque le gestionnaire d'état effectue déjà le suivi de l'instance de relation.</summary>
      <param name="entity">Entité à attacher à la terminaison connexe</param>
      <exception cref="T:System.ArgumentNullException">Levée lorsque <paramref name="entity" /> est null.</exception>
      <exception cref="T:System.InvalidOperationException">Levée lorsque l'entité ne peut pas être associée via la terminaison connexe actuelle.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Retourne un objet <see cref="T:System.Collections.IEnumerable" /> qui représente les objets appartenant à la terminaison connexe.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerable" /> qui représente les objets appartenant à la terminaison connexe.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Supprime une entité de la terminaison connexe.Cette méthode fonctionne de la même façon que la méthode Remove(object).Elle est conservée à des fins de compatibilité descendante avec les versions antérieures de IRelatedEnd.</summary>
      <returns>Retourne true si l'entité a été supprimée avec succès, false si l'entité ne fait pas partie du RelatedEnd.</returns>
      <param name="entity">Instance d'entité à supprimer de la terminaison associée</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Supprime une entité de la terminaison connexe.Si le propriétaire est attaché à un cache, marque la relation pour la suppression et si la relation est une relation de composition marque également l'entité pour la suppression.</summary>
      <returns>Retourne true si l'entité a été supprimée avec succès, false si l'entité ne fait pas partie du RelatedEnd.</returns>
      <param name="entity">Instance d'entité à supprimer de la terminaison associée</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Obtient le nom du rôle à la terminaison cible de la relation.</summary>
      <returns>
        <see cref="T:System.String" /> qui correspond au nom de rôle.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>Identifie le type d'une relation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>La relation est une association</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>Conteneur des objets de la propriété de navigation créés de manière différée (collections et références).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Crée un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> demandé.</returns>
      <param name="owner">Référence à l'entité qui appelle cette méthode.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Retourne une énumération de toutes les terminaisons connexes gérées par le gestionnaire de relations.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> des objets qui implémentent <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.Une énumération vide est retournée lorsque les relations n'ont pas encore été remplies.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> des objets connexes avec le nom de relation et le nom de rôle cible spécifiés.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> des objets connexes.</returns>
      <param name="relationshipName">Nom de la relation vers laquelle naviguer.Le nom de la relation n'est pas qualifié par un espace de noms.</param>
      <param name="targetRoleName">Nom du rôle cible pour la navigation.Indique le sens de navigation au sein de la relation.</param>
      <typeparam name="TTargetEntity">Type du <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> retourné.</typeparam>
      <exception cref="T:System.InvalidOperationException">Le rôle spécifié a retourné un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> au lieu d'un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Retourne un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ou <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> du type correct pour le rôle cible spécifié dans une relation.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> représentant l'objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ou <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> qui a été récupéré.</returns>
      <param name="relationshipName">Nom de la relation dans laquelle targetRoleName est défini.Le nom de la relation n'est pas qualifié par un espace de noms.</param>
      <param name="targetRoleName">Rôle cible à utiliser pour récupérer l'autre terminaison de relationshipName.</param>
      <exception cref="T:System.ArgumentNullException">relationshipName ou targetRoleName a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Le type source ne correspond pas au type du propriétaire.</exception>
      <exception cref="T:System.ArgumentException">targetRoleName n'est pas valide ou impossible de trouver le type de relation dans les métadonnées.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Obtient l'objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> pour un objet connexe à l'aide de la combinaison de nom de relation et de nom de rôle cible spécifiée.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> d'un objet connexe.</returns>
      <param name="relationshipName">Nom de la relation vers laquelle naviguer.Le nom de la relation n'est pas qualifié par un espace de noms.</param>
      <param name="targetRoleName">Nom du rôle cible pour la navigation.Indique le sens de navigation au sein de la relation.</param>
      <typeparam name="TTargetEntity">Type du <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> retourné.</typeparam>
      <exception cref="T:System.InvalidOperationException">Le rôle spécifié a retourné un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> au lieu d'un objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>Accepte un EntityCollection existant qui a été créé avec le constructeur par défaut et l'initialise à l'aide des noms de rôle cible et de relation spécifiés.Cette méthode est conçue pour être utilisée lors de la désérialisation uniquement, et lève une exception si l'EntityCollection fourni a déjà été initialisé, ou si le gestionnaire de relations est déjà attaché à un ObjectContext.</summary>
      <param name="relationshipName">Nom de la relation.</param>
      <param name="targetRoleName">Nom du rôle cible.</param>
      <param name="entityCollection">EntityCollection existant.</param>
      <typeparam name="TTargetEntity">Type de l'entité représentée par targetRoleName</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>Accepte un EntityReference existant qui a été créé avec le constructeur par défaut et l'initialise à l'aide des noms de rôle cible et de relation spécifiés.Cette méthode est conçue pour être utilisée lors de la désérialisation uniquement, et lève une exception si l'EntityReference spécifié a déjà été initialisé, si le gestionnaire de relations contient déjà une relation avec ce nom et ce rôle cible, ou si le gestionnaire de relations est déjà attaché à un ObjectContext.W</summary>
      <param name="relationshipName">Nom de la relation.</param>
      <param name="targetRoleName">Nom de rôle de la terminaison connexe.</param>
      <param name="entityReference">Objet <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> à initialiser.</param>
      <typeparam name="TTargetEntity">Type du <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> en cours d'initialisation.</typeparam>
      <exception cref="T:System.InvalidOperationException">Lorsque le <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> fourni a déjà été initialisé. -ou- Lorsque le gestionnaire de relations est déjà attaché à un <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> ou lorsque le gestionnaire de relations contient déjà une relation avec ce nom et ce rôle cible.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Utilisé en interne pour désérialiser des objets entités avec les instances <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Flux sérialisé.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Appelée par Object Services pour préparer un objet <see cref="T:System.Data.Entity.Core.EntityKey" /> pour la sérialisation binaire avec une relation sérialisée.</summary>
      <param name="context">Décrit la source et la destination d'un flux sérialisé donné et fournit un contexte supplémentaire défini par l'appelant.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>Cette classe contient les méthodes courantes nécessaires pour un objet de date.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Détermine si les tableaux d'octets spécifiés contiennent des valeurs identiques.</summary>
      <returns>true si les deux tableaux ont la même longueur et qu'ils contiennent les mêmes valeurs d'octets ou si les deux tableaux ont la valeur Null ; sinon, false.</returns>
      <param name="first">Valeur du premier tableau d'octets à comparer.</param>
      <param name="second">Deuxième tableau d'octets à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Retourne la valeur de date et d'heure minimale prise en charge par la source de données.</summary>
      <returns>Valeur <see cref="T:System.DateTime" /> qui correspond à l'heure et date minimales prises en charge par la source de données.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>Nom de constante public utilisé pour le suivi des modifications. Cette définition permet aux utilisateurs d'utiliser cette constante plutôt que le codage irréversible de la chaîne.Cela permet de s'assurer que le nom de la propriété est correct et autorise des comparaisons plus rapides lors de la recherche de cette chaîne.Les utilisateurs peuvent toujours utiliser la chaîne sensible à la casse directement au lieu de la constante ; la comparaison sera alors légèrement plus lente.Le fait d'inclure le nom entre tirets (-) garantit qu'il ne sera pas en conflit avec une propriété de données réelle, car -EntityKey- n'est pas un nom d'identificateur valide.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Retourne une copie de la valeur d'octet actuelle.</summary>
      <returns>Copie de la valeur de <see cref="T:System.Byte" /> actuelle.</returns>
      <param name="currentValue">Valeur de tableau d'octets actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Retourne un type complexe pour la propriété spécifiée.</summary>
      <returns>Objet de type complexe pour la propriété.</returns>
      <param name="currentValue">Objet complexe qui hérite d'un objet complexe.</param>
      <param name="property">Nom de la propriété complexe qui est l'objet complexe.</param>
      <param name="isNullable">Indique si le type prend en charge les valeurs nulles.</param>
      <param name="isInitialized">Indique si le type est initialisé.</param>
      <typeparam name="T">Type de l'objet complexe demandé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Déclenche l'événement <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" />.</summary>
      <param name="property">Nom de la propriété modifiée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Déclenche l'événement <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" />.</summary>
      <param name="property">Nom de la propriété en cours de modification.</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Notification indiquant que la propriété a été modifiée.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Notification indiquant que la propriété va être modifiée.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>Déclenche un événement qui est utilisé pour signaler qu'une modification de propriété a eu lieu.</summary>
      <param name="property">Nom de la propriété modifiée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>Déclenche un événement qui est utilisé pour signaler qu'une modification de propriété est en attente.</summary>
      <param name="property">Nom de la propriété en cours de modification.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Boolean" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> en cours de définition.</returns>
      <param name="value">Valeur booléenne.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Boolean" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Boolean" /> en cours de définition.</returns>
      <param name="value">Valeur booléenne.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Byte" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Byte" /> définie.</returns>
      <param name="value">Valeur en cours de validation.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Byte" /> définie pour une propriété est valide.</summary>
      <returns>
        <see cref="T:System.Byte" /> définie.</returns>
      <param name="value">Valeur <see cref="T:System.Byte" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Byte[]" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Byte" /> en cours de définition.</returns>
      <param name="value">Valeur en cours de définition.</param>
      <param name="isNullable">Indique si la propriété est Nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Byte[]" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Byte" /> en cours de validation.</returns>
      <param name="value">Valeur passée dans l'accesseur SET de propriété.</param>
      <param name="isNullable">Indicateur spécifiant si cette propriété peut être de type null.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
      <exception cref="T:System.Data.ConstraintException">Si la valeur est null pour une valeur non-nullable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>Confirme que la propriété n'est pas null, sinon lève une exception.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à vérifier.</param>
      <param name="isNullable">Indicateur spécifiant si cette propriété peut être de type null.</param>
      <exception cref="T:System.Data.ConstraintException">La valeur est null pour une propriété non-nullable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>Confirme que la propriété n'est pas null, sinon lève une exception.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à vérifier.</param>
      <param name="isNullable">Indicateur spécifiant si cette propriété peut être de type null.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
      <exception cref="T:System.Data.ConstraintException">La valeur est null pour une propriété non-nullable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>Confirme que la propriété n'est pas null, sinon lève une exception.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à vérifier.</param>
      <param name="isNullable">Indicateur spécifiant si cette propriété peut être de type null.</param>
      <exception cref="T:System.Data.ConstraintException">La valeur est null pour une propriété non-nullable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>Confirme que la propriété n'est pas null, sinon lève une exception.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à vérifier.</param>
      <param name="isNullable">Indicateur spécifiant si cette propriété peut être de type null.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
      <exception cref="T:System.Data.ConstraintException">La valeur est null pour une propriété non-nullable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTime" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.DateTime" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTime" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.DateTime" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.DateTime" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTimeOffset" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.DateTimeOffset" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.DateTimeOffset" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTimeOffset" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.DateTimeOffset" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Decimal" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Decimal" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Decimal" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Decimal" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Decimal" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Double" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Double" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Double" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Double" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Double" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Guid" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Guid" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Guid" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Guid" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Guid" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Guid" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int16" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Int16" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Int16" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int16" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Int16" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Int16" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int32" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Int32" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int32" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Int32" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Int32" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Int64" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Int64" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Int64" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Int64" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Boolean" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Boolean" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Boolean" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Boolean" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Boolean" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Boolean" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Byte" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Byte" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Byte" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Byte" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Byte" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Byte" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTime" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.DateTime" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.DateTime" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTime" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.DateTime" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.DateTime" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTimeOffset" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.DateTimeOffset" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.DateTimeOffset" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.DateTimeOffset" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.DateTimeOffset" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Decimal" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Decimal" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Decimal" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Decimal" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Decimal" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Decimal" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Double" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Double" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Double" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Double" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Double" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Double" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Guid" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Guid" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Guid" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Guid" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Guid" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Guid" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int16" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Int16" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Int16" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int16" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Int16" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Int16" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int32" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Int32" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Int32" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int32" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Int32" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Int32" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Int64" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Int64" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Int64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Int64" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Int64" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.SByte" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.SByte" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.SByte" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.SByte" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.SByte" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.SByte" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Single" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Single" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Single" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.Single" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.Single" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.Single" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.TimeSpan" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.TimeSpan" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.TimeSpan" /> nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.TimeSpan" /> définie pour une propriété est valide.</summary>
      <returns>Valeur nullable <see cref="T:System.TimeSpan" /> en cours de définition.</returns>
      <param name="value">Valeur de type <see cref="T:System.TimeSpan" /> nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>Permet de s'assurer que la valeur UInt16 définie pour une propriété est valide.</summary>
      <returns>Valeur UInt16 nullable en cours de définition.</returns>
      <param name="value">Valeur UInt16 nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>Permet de s'assurer que la valeur UInt16 définie pour une propriété est valide.</summary>
      <returns>Valeur UInt16 nullable en cours de définition.</returns>
      <param name="value">Valeur UInt16 nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>Permet de s'assurer que la valeur UInt32 définie pour une propriété est valide.</summary>
      <returns>Valeur UInt32 nullable en cours de définition.</returns>
      <param name="value">Valeur UInt32 nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>Permet de s'assurer que la valeur UInt32 définie pour une propriété est valide.</summary>
      <returns>Valeur UInt32 nullable en cours de définition.</returns>
      <param name="value">Valeur UInt32 nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur UInt64 nullable en cours de définition.</returns>
      <param name="value">Valeur UInt64 nullable.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur UInt64 nullable en cours de définition.</returns>
      <param name="value">Valeur UInt64 nullable.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.SByte" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.SByte" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.SByte" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.SByte" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.SByte" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.SByte" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>Permet de s'assurer que la valeur Single définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Single" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Single" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>Permet de s'assurer que la valeur Single définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.Single" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.Single" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Confirme que la propriété n'est pas null, sinon lève une exception.</summary>
      <returns>Valeur <see cref="T:System.String" /> validée.</returns>
      <param name="value">Valeur de chaîne à vérifier.</param>
      <param name="isNullable">Indicateur spécifiant si cette propriété peut être de type null.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>Confirme que la propriété n'est pas null, sinon lève une exception.</summary>
      <returns>Propriété validée.</returns>
      <param name="value">Valeur de chaîne à vérifier.</param>
      <param name="isNullable">Indicateur spécifiant si cette propriété peut être de type null.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
      <exception cref="T:System.Data.ConstraintException">La valeur de chaîne est null pour une chaîne non-nullable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.TimeSpan" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.TimeSpan" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.TimeSpan" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.TimeSpan" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.TimeSpan" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt16" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.UInt16" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.UInt16" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt16" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.UInt16" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.UInt16" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt32" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.UInt32" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.UInt32" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt32" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.UInt32" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.UInt32" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.UInt64" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.UInt64" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>Permet de s'assurer que la valeur <see cref="T:System.UInt64" /> définie pour une propriété est valide.</summary>
      <returns>Valeur <see cref="T:System.UInt64" /> en cours de définition.</returns>
      <param name="value">Valeur <see cref="T:System.UInt64" />.</param>
      <param name="propertyName">Nom de la propriété validée.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Définit un objet complexe pour la propriété spécifiée.</summary>
      <returns>Type complexe qui est dérivé d'un objet complexe.</returns>
      <param name="oldValue">Objet complexe d'origine pour la propriété, le cas échéant.</param>
      <param name="newValue">Objet complexe en cours de définition.</param>
      <param name="property">Propriété complexe définie sur l'objet complexe.</param>
      <typeparam name="T">Type de l'objet remplacé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Vérifie qu'un objet complexe n'a pas la valeur null.</summary>
      <returns>Objet complexe validé.</returns>
      <param name="complexObject">Objet complexe validé.</param>
      <param name="propertyName">Propriété complexe sur l'objet parent associé à complexObject.</param>
      <typeparam name="TComplex">Type de l'objet complexe vérifié.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>Exception levée lorsqu'une erreur se produit lors de la validation d'un <see cref="T:System.Data.Common.DbTransaction" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> avec les valeurs par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> avec des données sérialisées.</summary>
      <param name="info">Données nécessaires à la sérialisation ou à la désérialisation d'un objet.</param>
      <param name="context">Description de la source et de la destination du flux sérialisé spécifié.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> avec un message d'erreur.</summary>
      <param name="message">Message d'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> avec un message d'erreur et une exception interne.</summary>
      <param name="message">Message d'exception.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
      <summary>Représente un gestionnaire de transactions qui permet une récupération appropriée après des échecs de connexion pendant la validation de transaction en stockant des informations de suivi de transaction dans la base de données.Il doit être inscrit à l'aide de <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> en utilisant le <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext" /> par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />.</summary>
      <param name="transactionContextFactory">Fabrique de contexte de transaction.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Stocke les informations de suivi pour la nouvelle transaction dans la même transaction de la base de données.</summary>
      <param name="connection">Connexion qui a démarré la transaction.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
      <summary>Génère le script d'initialisation de la base de données.</summary>
      <returns>Script d'initialisation de la base de données.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
      <summary>Supprime tout l'historique des transactions.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
      <summary>Supprime de façon asynchrone tout l'historique des transactions.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Supprime de façon asynchrone tout l'historique des transactions.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Si une exception a été levée, recherche dans la base de données la présence de cette transaction et lève à nouveau une exception si elle reste introuvable.Sinon, marque la validation comme réussie et met en file d'attente les informations de transaction à supprimer.</summary>
      <param name="transaction">Transaction qui a été validée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
      <summary>Libère les ressources utilisées par cet objet de transaction.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Cesse le suivi de la transaction qui a été supprimée.</summary>
      <param name="transaction">Transaction qui a été supprimée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Obtient le <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> associé au <paramref name="context" />, le cas échéant ; sinon, retourne null.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> associé.</returns>
      <param name="context">Contexte.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
      <summary>Obtient le <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> associé au <paramref name="context" />, le cas échéant ; sinon, retourne null.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> associé.</returns>
      <param name="context">Contexte.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Initialise les propriétés de l'instance.</summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>Initialise les propriétés de l'instance.</summary>
      <param name="context">Contexte.</param>
      <param name="connection">Connexion.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
      <summary>Ajoute la transaction spécifiée à la liste des transactions qui peuvent être supprimées de la base de données</summary>
      <param name="transaction">Transaction à supprimer de la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
      <summary>Supprime les transactions marquées en vue de leur suppression.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
      <summary>Supprime les transactions marquées en vue de leur suppression si leur nombre dépasse <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</summary>
      <param name="force">true pour supprimer toutes les anciennes transactions même si leur nombre ne dépasse pas <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> ; sinon, false.</param>
      <param name="useExecutionStrategy">true pour exécuter l'opération à l'aide de la stratégie d'exécution associée ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
      <summary>Supprime de façon asynchrone les transactions marquées en vue de leur suppression.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>Supprime les transactions marquées en vue de leur suppression si leur nombre dépasse <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="force">true pour supprimer toutes les anciennes transactions même si leur nombre ne dépasse pas <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> ; sinon, false.</param>
      <param name="useExecutionStrategy">true pour exécuter l'opération à l'aide de la stratégie d'exécution associée ; sinon, false.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Supprime de façon asynchrone les transactions marquées en vue de leur suppression.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">Jeton d'annulation.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
      <summary>Obtient le nombre de transactions à exécuter sur le contexte préalablement au nettoyage du journal des transactions.La valeur par défaut est 20.</summary>
      <returns>Nombre de transactions à exécuter sur le contexte préalablement au nettoyage du journal des transactions.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Cesse le suivi de la transaction qui a été annulée.</summary>
      <param name="transaction">Transaction qui a été annulée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
      <summary>Obtient le contexte de transaction.</summary>
      <returns>Contexte de transaction.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Retourné par la méthode ChangeTracker de <see cref="T:System.Data.Entity.DbContext" /> pour fournir l'accès aux fonctionnalités du contexte mises en rapport avec le suivi des modifications d'entités.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Détecte les modifications effectuées sur les propriétés et les relations d'entités POCO.Notez que certains types d'entités (telles que les proxys de suivi des modifications et les entités qui dérivent de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />) consignent automatiquement les modifications, par conséquent, il n'est généralement pas nécessaire d'appeler la méthode DetectChanges pour ces types d'entités.Par ailleurs, notez que, généralement, cette méthode est appelée automatiquement par beaucoup de méthodes de <see cref="T:System.Data.Entity.DbContext" /> et ses classes connexes, de sorte qu'il est rare qu'elle doive être appelée explicitement.Toutefois, il peut être souhaitable, généralement pour des questions de performances, de désactiver l'appel automatique de cette méthode à l'aide de l'indicateur AutoDetectChangesEnabled à partir de <see cref="P:System.Data.Entity.DbContext.Configuration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Obtient des objets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> pour toutes les entités suivies par ce contexte.</summary>
      <returns>Entrées.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Obtient des objets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> pour toutes les entités du type donné suivies par ce contexte.</summary>
      <returns>Entrées.</returns>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Spécifie si <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> est identique à l'objet spécifié.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> est identique à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Obtient le code de hachage associé à <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</summary>
      <returns>Code de hachage associé à <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>Vérifie si le <see cref="T:System.Data.Entity.DbContext" /> effectue le suivi des relations ou entités nouvelles, modifiées ou supprimées qui seront envoyées à la base de données si <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> est appelé.</summary>
      <returns>True si le <see cref="T:System.Data.Entity.DbContext" /> sous-jacent comporte des modifications ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</summary>
      <returns>Représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Représente une version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> générique équivalent.</summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TElement">Type de l'élément de la collection.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.La valeur actuelle est l'entité que la propriété de navigation référence.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>Obtient le <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel cette propriété de navigation appartient.</summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Obtient ou définit une valeur qui indique si toutes les entités de cette collection ont été chargées à partir de la base de données.</summary>
      <returns>true si toutes les entités associées sont chargées ou la valeur true a été explicitement affectée à l'indicateur IsLoaded ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Charge la collection d'entités à partir de la base de données.Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>Charge de façon asynchrone la collection d'entités à partir de la base de données.Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Charge de façon asynchrone la collection d'entités à partir de la base de données.Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette collection à partir de la base de données.La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données, comme compter le nombre d'entités dans la collection de la base de données sans les charger réellement.</summary>
      <returns>Requête pour la collection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode Collection de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent des opérations telles que le chargement sur les propriétés de navigation de collection d'une entité.</summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TElement">Type de l'élément de la collection d'entités.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.La valeur actuelle est l'entité que la propriété de navigation référence.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel cette propriété de navigation appartient.</summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Obtient ou définit une valeur qui indique si toutes les entités de cette collection ont été chargées à partir de la base de données.</summary>
      <returns>true si toutes les entités associées sont chargées ou la valeur true a été explicitement affectée à l'indicateur IsLoaded ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Charge la collection d'entités à partir de la base de données.Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>Charge de façon asynchrone la collection d'entités à partir de la base de données.Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Charge de façon asynchrone la collection d'entités à partir de la base de données.Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> non générique pour la propriété de navigation représentée par cet objet.</summary>
      <returns>Version non générique.</returns>
      <param name="entry">Objet représentant la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette collection à partir de la base de données.La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données, comme compter le nombre d'entités dans la collection de la base de données sans les charger réellement.</summary>
      <returns>Requête pour la collection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Représentation immuable d'un modèle Entity Data Model (EDM) qui peut être utilisé pour créer un <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> ou peut être passé au constructeur d'un <see cref="T:System.Data.Entity.DbContext" />.Pour de meilleures performances, les instances de ce type doivent être mises en cache et réutilisées pour construire des contextes.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Crée une instance d'ObjectContext ou une classe dérivée d'ObjectContext.Notez qu'une instance de DbContext peut être créée à la place à l'aide du constructeur DbContext approprié.Si un ObjectContext dérivé est utilisé, il doit avoir un constructeur public avec un paramètre EntityConnection unique.La connexion passée est utilisée par l'ObjectContext créé, mais n'est pas possédée par le contexte.L'appelant doit supprimer la connexion une fois le contexte supprimé.</summary>
      <returns>Contexte.</returns>
      <param name="existingConnection">Connexion existante à une base de données à utiliser par le contexte.</param>
      <typeparam name="TContext">Type de contexte à créer.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> générique équivalent.</summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TComplexProperty">Type de la propriété complexe.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe imbriquée de cette propriété.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété.Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode ComplexProperty de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent l'accès à l'état d'une propriété complexe.</summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TComplexProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtient un objet qui représente une propriété complexe imbriquée de cette propriété.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="property">Expression qui représente la propriété imbriquée.</param>
      <typeparam name="TNestedComplexProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe imbriquée de cette propriété.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe imbriquée de cette propriété.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
      <typeparam name="TNestedComplexProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> non générique pour la propriété représentée par cet objet.</summary>
      <returns>Version non générique.</returns>
      <param name="entry">Objet représentant la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété.Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="property">Expression qui représente la propriété imbriquée.</param>
      <typeparam name="TNestedProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété.Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
      <typeparam name="TNestedProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété.Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes.</summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Représente les informations relatives à une connexion de base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> représentant une connexion qui est spécifiée dans le fichier de configuration de l'application.</summary>
      <param name="connectionName">Nom de la chaîne de connexion dans la configuration de l'application.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> en fonction d'une chaîne de connexion.</summary>
      <param name="connectionString">Chaîne de connexion à utiliser pour la connexion.</param>
      <param name="providerInvariantName">Nom du fournisseur à utiliser pour la connexion.Utilisez System.Data.SqlClient pour SQL Server.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Détermine si le type <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> actuel est égal au type d'objet fourni.</summary>
      <returns>true si le type <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> actuel est égal au type d'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet auquel l'objet <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> actuel est comparé.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Génère une valeur qui représente la connexion actuelle.</summary>
      <returns>Valeur qui représente la connexion actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Convertit l'objet <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> en chaîne.</summary>
      <returns>Lecteur actif.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Décrit l'origine de la chaîne de connexion de base de données associée à un objet <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>La chaîne de connexion a été lue à partir de la configuration externe.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>La chaîne de connexion a été créée par convention.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>La chaîne de connexion a été remplacée par les informations de connexion fournies à DbContextInfo.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>La chaîne de connexion a été spécifiée explicitement au moment de l'exécution.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Retourné par la méthode de configuration de <see cref="T:System.Data.Entity.DbContext" /> pour fournir l'accès aux options de configuration pour le contexte.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Obtient ou définit une valeur qui indique si la méthode <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" /> est appelée automatiquement par les méthodes de <see cref="T:System.Data.Entity.DbContext" /> et des classes associées.La valeur par défaut est true.</summary>
      <returns>true si elle être appelée automatiquement ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.EnsureTransactionsForFunctionsAndCommands">
      <summary>Obtient ou définit la valeur qui détermine si les fonctions et les commandes SQL doivent être toujours exécutées dans une transaction.</summary>
      <returns>Comportement transactionnel par défaut.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Spécifie si la configuration est identique à l'objet spécifié.</summary>
      <returns>true si la configuration est identique à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Obtient le code de hachage associé à la configuration.</summary>
      <returns>Code de hachage associé à la configuration.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Obtient ou définit une valeur qui indique si le chargement différé des relations exposées comme propriétés de navigation est activé.Le chargement différé est activé par défaut.</summary>
      <returns>true si le chargement différé est activé ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Obtient ou définit une valeur qui indique si l'infrastructure créera des instances de classes proxy générées dynamiquement lors de la création d'une instance d'un type d'entité.Notez que même si la création de proxy est permise par cet indicateur, les instances de proxy seront créées seulement pour les types d'entité qui satisfont les spécifications proxy.La création de proxy est autorisée par défaut.</summary>
      <returns>true si la création de proxy est activée ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</summary>
      <returns>Représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>Obtient ou définit une valeur indiquant si les sémantiques Null de base de données sont exposées lors de la comparaison de deux opérandes, les deux pouvant éventuellement présenter une valeur Null.La valeur par défaut est false.Par exemple, (operand1 == operand2) sera interprété comme suit : (operand1 = operand2) si UseDatabaseNullSemantics a la valeur true, respectivement (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL))) si UseDatabaseNullSemantics a la valeur false.</summary>
      <returns>true si le comportement de comparaison de valeurs Null de base de données est activé ; sinon, false .</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Obtient ou définit une valeur qui indique si les entités suivies doivent être validées automatiquement lorsque <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> est appelé.La valeur par défaut est true.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Fournit les informations d'exécution concernant un type de <see cref="T:System.Data.Entity.DbContext" /> spécifique.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> avec le type de contexte spécifié.</summary>
      <param name="contextType">Type de <see cref="T:System.Data.Entity.DbContext" /> concret.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> avec le type de contexte et le fichier de configuration spécifiés.</summary>
      <param name="contextType">Type de <see cref="T:System.Data.Entity.DbContext" /> concret.</param>
      <param name="config">Objet représentant le fichier de configuration.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> avec les informations de connexion, le type de contexte et le fichier de configuration spécifiés.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objet représentant le fichier de configuration.</param>
      <param name="connectionInfo">Informations de connexion pour la base de données à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> avec le type de contexte, le fichier de configuration et les informations sur le fournisseur spécifiés.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objet représentant le fichier de configuration.</param>
      <param name="modelProviderInfo">Objet <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> spécifiant le fournisseur ADO.NET sous-jacent à cibler.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> avec le type de contexte et le paramètre de la chaîne de connexion spécifiés.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionStringSettings">Collection de chaînes de connexion.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> avec le type de contexte et les informations de connexion spécifiés.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionInfo">Informations de connexion pour la base de données à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> avec le type de contexte et les informations sur le fournisseur spécifiés.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="modelProviderInfo">Objet <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> spécifiant le fournisseur ADO.NET sous-jacent à cibler.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Obtient le nom du fournisseur ADO.NET de la connexion utilisée par le type <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Nom du fournisseur ADO.NET de la connexion utilisée par le type <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Obtient la chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Obtient le nom de la chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Nom de chaîne de connexion utilisé par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Obtient l'origine de la chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Origine de la chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Obtient le type de <see cref="T:System.Data.Entity.DbContext" /> concret.</summary>
      <returns>Type de <see cref="T:System.Data.Entity.DbContext" /> concret.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Crée une instance de l'objet <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />.</summary>
      <returns>Instance créée.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Détermine si le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent peut être créé.</summary>
      <returns>true si le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent peut être créé ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Obtient ou définit une action à exécuter sur le DbModelBuilder après que OnModelCreating a été exécuté sur le contexte.</summary>
      <returns>Action à exécuter sur le DbModelBuilder après que OnModelCreating a été exécuté sur le contexte.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> générique du type générique donné pour l'entité suivie représentée par cet objet.Notez que le type de l'entité suivie doit être compatible avec le type générique ou une exception sera levée.</summary>
      <returns>Version générique.</returns>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité.</summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="propertyName">Nom de la propriété complexe.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Obtient les valeurs de propriétés actuelles de l'entité suivie représentée par cet objet.</summary>
      <returns>Valeurs actuelles.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Obtient l'entité.</summary>
      <returns>Entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Détermine si le <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> spécifié est égal à cette instance.Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si l'<see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> spécifié est égal à cette instance ; sinon, false.</returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Détermine si le <see cref="T:System.Object" /> spécifié est égal à cette instance.Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si l'<see cref="T:System.Object" /> spécifié est égal à cette instance ; sinon, false.</returns>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Interroge la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données.Notez que la modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données.Si l'entité est introuvable dans la base de données, la valeur null est retournée.</summary>
      <returns>Valeurs de magasin.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>Interroge de façon asynchrone la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données.Notez que la modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données.Si l'entité est introuvable dans la base de données, la valeur null est retournée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient les valeurs du magasin.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Interroge de façon asynchrone la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données.Notez que la modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données.Si l'entité est introuvable dans la base de données, la valeur null est retournée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient les valeurs du magasin.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Retourne un code de hachage pour cette instance.</summary>
      <returns>Code de hachage pour cette instance, convient à une utilisation dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Valide cette instance de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> et retourne le résultat de la validation.</summary>
      <returns>Résultat de la validation d'entité.Peut-être null si la méthode <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> est substituée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Obtient un objet qui représente un membre de l'entité.Le type d'exécution de l'objet retourné variera selon le membre qui est demandé.Les types de membres actuellement pris en charge et leurs types de retours sont : Propriété de navigation de référence : <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Propriété de navigation de collection : <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Propriété primitive/scalaire : <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Propriété complexe : <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Objet représentant le membre.</returns>
      <param name="propertyName">Nom du membre.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Obtient les valeurs de propriétés d'origine de l'entité suivie représentée par cet objet.Les valeurs d'origine sont habituellement les valeurs de propriétés de l'entité telles qu'elles étaient lors de la dernière requête à partir de la base de données.</summary>
      <returns>Valeurs d'origine.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité.</summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de référence (à savoirqui n'est pas une collection) de cette entité vers une autre entité.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Recharge l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données.L'entité aura un état non modifié après l'appel de cette méthode.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>Recharge de façon asynchrone l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données.L'entité aura un état non modifié après l'appel de cette méthode.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Recharge de façon asynchrone l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données.L'entité aura un état non modifié après l'appel de cette méthode.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Obtient ou définit l'état de l'entité.</summary>
      <returns>État.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</summary>
      <returns>Représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Les instances de cette classe donnent accès aux informations relatives aux entités suivies par le <see cref="T:System.Data.Entity.DbContext" /> et au contrôle de celles-ci.Utilisez les méthodes Entity ou Entities du contexte pour obtenir des objets de ce type.</summary>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Expression qui représente la propriété de navigation.</param>
      <typeparam name="TElement">Type des éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
      <typeparam name="TElement">Type des éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité.</summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="property">Expression qui représente la propriété complexe.</param>
      <typeparam name="TComplexProperty">Type de la propriété complexe.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité.</summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="propertyName">Nom de la propriété complexe.</param>
      <typeparam name="TComplexProperty">Type de la propriété complexe.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité.</summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="propertyName">Nom de la propriété complexe.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Obtient les valeurs de propriétés actuelles de l'entité suivie représentée par cet objet.</summary>
      <returns>Valeurs actuelles.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Obtient l'entité.</summary>
      <returns>Entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Détermine si le <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> spécifié est égal à cette instance.Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si l'<see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> spécifié est égal à cette instance ; sinon, false.</returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Détermine si le <see cref="T:System.Object" /> spécifié est égal à cette instance.Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si l'<see cref="T:System.Object" /> spécifié est égal à cette instance ; sinon, false.</returns>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Interroge la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données.Notez que la modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données.Si l'entité est introuvable dans la base de données, la valeur null est retournée.</summary>
      <returns>Valeurs de magasin.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>Interroge de façon asynchrone la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données.Notez que la modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données.Si l'entité est introuvable dans la base de données, la valeur null est retournée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient les valeurs du magasin.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Interroge de façon asynchrone la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données.Notez que la modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données.Si l'entité est introuvable dans la base de données, la valeur null est retournée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient les valeurs du magasin.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Retourne un code de hachage pour cette instance.</summary>
      <returns>Code de hachage pour cette instance, convient à une utilisation dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Valide cette instance de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et retourne le résultat de la validation.</summary>
      <returns>Résultat de la validation d'entité.Peut-être null si la méthode <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> est substituée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Obtient un objet qui représente un membre de l'entité.Le type d'exécution de l'objet retourné variera selon le membre qui est demandé.Les types de membres actuellement pris en charge et leurs types de retours sont : Propriété de navigation de référence : <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.Propriété de navigation de collection : <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.Propriété primitive/scalaire : <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.Propriété complexe : <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
      <returns>Objet représentant le membre.</returns>
      <param name="propertyName">Nom du membre.</param>
      <typeparam name="TMember">Type du membre.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Obtient un objet qui représente un membre de l'entité.Le type d'exécution de l'objet retourné variera selon le membre qui est demandé.Les types de membres actuellement pris en charge et leurs types de retours sont : Propriété de navigation de référence : <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Propriété de navigation de collection : <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Propriété primitive/scalaire : <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Propriété complexe : <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Objet représentant le membre.</returns>
      <param name="propertyName">Nom du membre.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> non générique pour l'entité suivie représentée par cet objet.</summary>
      <returns>Version non générique.</returns>
      <param name="entry">Objet représentant l'entité suivie.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Obtient les valeurs de propriétés d'origine de l'entité suivie représentée par cet objet.Les valeurs d'origine sont habituellement les valeurs de propriétés de l'entité telles qu'elles étaient lors de la dernière requête à partir de la base de données.</summary>
      <returns>Valeurs d'origine.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité.</summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="property">Expression qui représente la propriété.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité.</summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité.</summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="propertyName">Nom de la propriété.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtient un objet qui représente la propriété de navigation de référence (à savoirqui n'est pas une collection) de cette entité vers une autre entité.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Expression qui représente la propriété de navigation.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de référence (à savoirqui n'est pas une collection) de cette entité vers une autre entité.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de référence (à savoirqui n'est pas une collection) de cette entité vers une autre entité.</summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Recharge l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données.L'entité aura un état non modifié après l'appel de cette méthode.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>Recharge de façon asynchrone l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données.L'entité aura un état non modifié après l'appel de cette méthode.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Recharge de façon asynchrone l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données.L'entité aura un état non modifié après l'appel de cette méthode.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Obtient ou définit l'état de l'entité.</summary>
      <returns>État.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Retourne une chaîne représentant les valeurs d'entité de la base de données.</summary>
      <returns>Représentation sous forme de chaîne des valeurs d'entité de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>Fournit l'implémentation de base du mécanisme de nouvelle tentative pour les opérations non fiables et les conditions temporaires avec un délai augmentant de façon exponentielle entre les tentatives consécutives.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> avec les limites spécifiées pour le nombre de nouvelles tentatives et le délai entre deux tentatives.</summary>
      <param name="maxRetryCount">Nombre maximal de nouvelles tentatives.</param>
      <param name="maxDelay">Délai maximal en millisecondes entre les tentatives.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>Exécute de façon répétitive l'opération spécifiée lorsqu'elle satisfait la stratégie actuelle de nouvelle tentative.</summary>
      <param name="operation">Délégué représentant une opération exécutable qui ne retourne aucun résultat.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Si la stratégie de délai entre deux tentatives détermine que l'opération ne doit plus faire l'objet d'une nouvelle tentative.</exception>
      <exception cref="T:System.InvalidOperationException">Si une transaction existante est détectée et que la stratégie d'exécution ne la prend pas en charge.</exception>
      <exception cref="T:System.InvalidOperationException">Si cette instance a déjà été utilisée pour exécuter une opération.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Exécute de façon répétitive l'opération spécifiée lorsqu'elle satisfait la stratégie actuelle de nouvelle tentative.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="operation">Délégué représentant une opération exécutable qui retourne un résultat de type <paramref name="TResult" />.</param>
      <typeparam name="TResult">Type de résultat attendu de l'opération exécutable.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Si la stratégie de délai entre deux tentatives détermine que l'opération ne doit plus faire l'objet d'une nouvelle tentative.</exception>
      <exception cref="T:System.InvalidOperationException">Si une transaction existante est détectée et que la stratégie d'exécution ne la prend pas en charge.</exception>
      <exception cref="T:System.InvalidOperationException">Si cette instance a déjà été utilisée pour exécuter une opération.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Exécute à plusieurs reprises l'opération asynchrone spécifiée lorsqu'elle satisfait la stratégie actuelle de nouvelle tentative.</summary>
      <returns>Tâche qui s'exécute jusqu'à achèvement si la tâche d'origine se termine correctement (soit la première fois ou après plusieurs échecs temporaires).En cas de échec de la tâche avec une erreur non temporaires ou de nombre maximal de tentatives atteint, la tâche retournée génère une erreur et l'exception doit être observée.</returns>
      <param name="operation">Fonction qui retourne une tâche démarrée de type <paramref name="TResult" />.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour annuler la nouvelle tentative, mais pas les opérations qui sont déjà en cours ou terminées.</param>
      <typeparam name="TResult">Type de résultat du <see cref="T:System.Threading.Tasks.Task`1" /> retourné par <paramref name="operation" />.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Si la stratégie de délai entre deux tentatives détermine que l'opération ne doit plus faire l'objet d'une nouvelle tentative.</exception>
      <exception cref="T:System.InvalidOperationException">Si une transaction existante est détectée et que la stratégie d'exécution ne la prend pas en charge.</exception>
      <exception cref="T:System.InvalidOperationException">Si cette instance a déjà été utilisée pour exécuter une opération.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Exécute de façon répétitive l'opération asynchrone spécifiée lorsqu'elle satisfait la stratégie actuelle de nouvelle tentative.</summary>
      <returns>Tâche qui s'exécute jusqu'à achèvement si la tâche d'origine se termine correctement (soit la première fois ou après plusieurs échecs temporaires).En cas de échec de la tâche avec une erreur non temporaires ou de nombre maximal de tentatives atteint, la tâche retournée génère une erreur et l'exception doit être observée.</returns>
      <param name="operation">Fonction qui retourne une tâche démarrée.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour annuler la nouvelle tentative, mais pas les opérations qui sont déjà en cours ou terminées.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Si la stratégie de délai entre deux tentatives détermine que l'opération ne doit plus faire l'objet d'une nouvelle tentative.</exception>
      <exception cref="T:System.InvalidOperationException">Si une transaction existante est détectée et que la stratégie d'exécution ne la prend pas en charge.</exception>
      <exception cref="T:System.InvalidOperationException">Si cette instance a déjà été utilisée pour exécuter une opération.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>Détermine si l'opération doit faire l'objet d'une nouvelle tentative, ainsi que le délai avant la tentative suivante.</summary>
      <returns>Délai qui indique combien de temps il faut attendre avant la tentative d'exécution suivante si l'opération doit faire l'objet d'une nouvelle tentative ; sinon, null.</returns>
      <param name="lastException">Exception levée lors de la dernière tentative d'exécution.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> peut effectuer une nouvelle tentative d'exécution après une défaillance.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> peut effectuer une nouvelle tentative d'exécution après une défaillance ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>Détermine si l'exception spécifiée indique un problème temporaire qui peut être compensé par une nouvelle tentative.</summary>
      <returns>true si l'exception spécifiée est considérée comme étant temporaire ; sinon, false.</returns>
      <param name="exception">L'objet exception à vérifier.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>Obtient un InnerException de manière récursive à partir d'un <paramref name="exception" /> tant qu'il s'agit d'un <see cref="T:System.Data.Entity.Core.EntityException" />, <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> ou <see cref="T:System.Data.Entity.Core.UpdateException" />, et le passe à <paramref name="exceptionHandler" />.</summary>
      <returns>Résultat du <paramref name="exceptionHandler" />.</returns>
      <param name="exception">Exception à désencapsuler.</param>
      <param name="exceptionHandler">Délégué qui est appelé avec l'exception désencapsulée.</param>
      <typeparam name="T">Type de l'exception désencapsulée.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Classe de base abstraite utilisée pour représenter une propriété scalaire ou complexe, ou une propriété de navigation d'une entité.Les propriétés scalaires et complexes utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, les propriétés de navigation de référence utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> et les propriétés de navigation de collection utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> générique équivalent.</summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel ce membre appartient.</summary>
      <returns>Entrée pour l'entité qui possède ce membre.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Détermine si l'entrée spécifiée est égale à l'entrée actuelle.</summary>
      <returns>true si l'entrée spécifiée est égale à l'entrée actuelle ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'entrée actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Retourne la fonction de hachage pour cette entrée.</summary>
      <returns>Fonction de hachage pour cette entrée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Valide cette propriété.</summary>
      <returns>Collection d'objets <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Jamais Null.Si l'entité est valide la collection sera vide.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Retourne une chaîne représentant les valeurs de propriété de la base de données.</summary>
      <returns>Représentation sous forme de chaîne des valeurs de propriété de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Classe de base abstraite utilisée pour représenter une propriété scalaire ou complexe, ou une propriété de navigation d'une entité.Les propriétés scalaires et complexes utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, les propriétés de navigation de référence utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> et les propriétés de navigation de collection utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel ce membre appartient.</summary>
      <returns>Entrée pour l'entité qui possède ce membre.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Spécifie si l'objet est égal à l'objet spécifié.</summary>
      <returns>true si l'objet est égal à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Obtient le code de hachage associé à l'objet.</summary>
      <returns>Code de hachage associé à l'objet.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Valide cette propriété.</summary>
      <returns>Collection d'objets <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Jamais Null.Si l'entité est valide la collection sera vide.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> non générique pour la propriété représentée par cet objet.</summary>
      <returns>Version non générique.</returns>
      <param name="entry">Objet représentant la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
      <returns>Représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Représente un Entity Data Model (EDM) créé par le <see cref="T:System.Data.Entity.DbModelBuilder" />.La méthode Compile peut être utilisée pour la conversion de cette représentation EDM vers un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> qui est un instantané compilé du modèle approprié pour la mise en cache et la création d'instances <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Crée un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> pour ce mode, soit un instantané compilé approprié pour la mise en cache et la création d'instances <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Modèle compilé.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
      <summary>Obtient le modèle conceptuel.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
      <summary>Obtient le modèle de mappage.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>Obtient les informations sur le fournisseur.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>Obtient le manifeste du fournisseur.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
      <summary>Obtient le modèle de magasin.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> générique équivalent.</summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel cette propriété appartient.</summary>
      <returns>Entrée pour l'entité qui possède cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Obtient ou définit une valeur qui indique si la valeur de cette propriété a été modifiée depuis qu'elle a été chargée à partir de la base de données.</summary>
      <returns>true si cette instance est modifiée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Obtient ou définit la valeur d'origine de cette propriété.</summary>
      <returns>Valeur d'origine.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propriété pour laquelle c'est une propriété imbriquée.Cette méthode retournera seulement une entrée non null pour les propriétés d'objets complexes et retournera null pour les propriétés de l'entité elle-même.</summary>
      <returns>Entrée de la propriété complexe parente, ou null si c'est une propriété d'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode Property de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent l'accès à l'état d'une propriété scalaire.</summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel cette propriété appartient.</summary>
      <returns>Entrée pour l'entité qui possède cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Obtient ou définit une valeur qui indique si la valeur de cette propriété a été modifiée depuis qu'elle a été chargée à partir de la base de données.</summary>
      <returns>true si cette instance est modifiée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> non générique pour la propriété représentée par cet objet.</summary>
      <returns>Version non générique.</returns>
      <param name="entry">Objet représentant la propriété.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Obtient ou définit la valeur d'origine de cette propriété.</summary>
      <returns>Valeur d'origine.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propriété pour laquelle c'est une propriété imbriquée.Cette méthode retournera seulement une entrée non null pour les propriétés d'objets complexes et retournera null pour les propriétés de l'entité elle-même.</summary>
      <returns>Entrée de la propriété complexe parente, ou null si c'est une propriété d'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Collection de toutes les propriétés pour une entité sous-jacente ou un objet complexe.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Crée un nouveau dictionnaire qui contient des copies de toutes les propriétés dans ce dictionnaire.Les modifications apportées au nouveau dictionnaire ne seront pas répercutées dans ce dictionnaire et vice versa.</summary>
      <returns>Clone de ce dictionnaire.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Spécifie si <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> est égal à un objet spécifié.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> est égal à un objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Obtient le code de hachage associé à la valeur de la propriété.</summary>
      <returns>Code de hachage associé à la valeur de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Obtient la valeur de la propriété comme si vous utilisiez l'accesseur Get de la propriété indexée mais typée au type du paramètre générique.C'est surtout utile avec les dictionnaires imbriqués, afin d'éviter d'écrire des expressions avec beaucoup de transtypages.</summary>
      <returns>Valeur de la propriété.</returns>
      <param name="propertyName">Nom de la propriété.</param>
      <typeparam name="TValue">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Obtient ou définit la valeur de la propriété avec le nom de propriété spécifié.La valeur peut être une instance imbriquée de cette classe.</summary>
      <returns>Valeur de la propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Obtient l'ensemble de noms de toutes les propriétés dans ce dictionnaire sous la forme d'un ensemble en lecture seule.</summary>
      <returns>Noms de propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Définit les valeurs de ce dictionnaire en lisant les valeurs à partir d'un autre dictionnaire.L'autre dictionnaire doit être basé sur le même type que ce dictionnaire, ou un type a dérivé du type pour ce dictionnaire.</summary>
      <param name="propertyValues">Dictionnaire à partir duquel les valeurs sont lues.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Définit les valeurs de ce dictionnaire en lisant les valeurs de l'objet donné.L'objet donné peut être de tout type.Toute propriété sur l'objet ayant un nom qui correspond à un nom de propriété dans le dictionnaire et pouvant être lue, sera lue.Les autres propriétés seront ignorées.Cela inclut, notamment, la copie des propriétés à partir d'objets DTO (Data Transfer Objects).</summary>
      <param name="obj">Objet à partir duquel les valeurs sont lues.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Crée un objet de type sous-jacent pour ce dictionnaire et l'alimente avec les valeurs de propriété de ce dictionnaire.</summary>
      <returns>Propriétés de ce dictionnaire copiées dans un nouvel objet.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</summary>
      <returns>Représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Groupes de paires de chaînes qui identifient un fournisseur et une version de serveur dans un objet unique.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Crée un objet pour le nom invariant et le jeton du manifeste d'un fournisseur donné.</summary>
      <param name="providerInvariantName">Chaîne qui identifie ce fournisseur.Par exemple, le fournisseur SQL Server utilise la chaîne « System.Data.SqlCient ».</param>
      <param name="providerManifestToken">Chaîne qui identifie la version du serveur de base de données utilisée.Par exemple, le fournisseur SQL Server utilise la chaîne « 2008 » pour SQL Server 2008.Cette valeur ne peut pas être null, mais elle peut être vide.Le jeton de manifeste est parfois désigné sous le nom d'indicateur de version.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à cet objet actif.</summary>
      <returns>true si l'objet spécifié est égal à cet objet actif ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>Obtient la fonction de hachage de cet objet actif.</summary>
      <returns>Fonction de hachage de cet objet actif.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Chaîne qui identifie ce fournisseur.Par exemple, le fournisseur SQL Server utilise la chaîne « System.Data.SqlCient ».</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Chaîne qui identifie la version du serveur de base de données utilisée.Par exemple, le fournisseur SQL Server utilise la chaîne « 2008 » pour SQL Server 2008.Cette valeur ne peut pas être null, mais elle peut être vide.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Représente une requête LINQ to Entities non générique sur un DbContext.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.</summary>
      <returns>Nouvelle requête avec AsStreaming appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> générique équivalent.</summary>
      <returns>Objet défini générique.</returns>
      <typeparam name="TElement">Type d'élément pour lequel la requête a été créée.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>Type de l'élément IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Spécifie si la requête est égale à l'objet spécifié.</summary>
      <returns>true si la requête est égale à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Obtient le code de hachage associé à la requête.</summary>
      <returns>Code de hachage associé à la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Obtient le type associé à la requête.</summary>
      <returns>Type associé à la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouveau DbQuery&amp;lt;T&amp;gt; avec le chemin d'accès de requête défini.</returns>
      <param name="path">Liste d'objets connexes, séparés par des points, à retourner dans les résultats de la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.IEnumerator" /> qui lorsqu'il est énuméré exécute la requête sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge.À la place, renseignez un DbSet avec les données, par exemple en utilisant la méthode d'extension Load, puis créez une liaison avec les données locales.Pour la liaison de WPF à DbSet.Local.Pour Windows Forms, créez une liaison avec DbSet.Local.ToBindingList().</summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Retourne un <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> qui lorsqu'il est énuméré exécute la requête sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>Expression LINQ IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Fournisseur IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Retourne une représentation <see cref="T:System.String" /> de la requête sous-jacente.</summary>
      <returns>Chaîne de requête.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Représente une requête LINQ to Entities sur un DbContext.</summary>
      <typeparam name="TResult">Type d'entité auquel s'applique la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.</summary>
      <returns>Nouvelle requête avec AsStreaming appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Détermine si la requête actuelle est égale à la requête spécifiée.</summary>
      <returns>true si la requête actuelle est égale à la requête spécifiée ; sinon, false.</returns>
      <param name="obj">Objet à comparer à la requête actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Retourne la fonction de hachage pour cette requête.</summary>
      <returns>Fonction de hachage pour cette requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Obtient le type de la requête actuelle.</summary>
      <returns>Type de la requête actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouvel objet <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> avec le chemin d'accès de requête défini.</returns>
      <param name="path">Liste d'objets connexes, séparés par des points, à retourner dans les résultats de la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> non générique pour cette requête.</summary>
      <returns>Version non générique.</returns>
      <param name="entry">Requête.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Obtient l'énumération de cette requête et entraîne son exécution sur le magasin.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> pour la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui lorsqu'il est énuméré exécute la requête sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge.À la place, renseignez un DbSet avec les données, par exemple en utilisant la méthode d'extension Load, puis créez une liaison avec les données locales.Pour la liaison de WPF à DbSet.Local.Pour Windows Forms, créez une liaison avec DbSet.Local.ToBindingList().</summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Retourne un <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> qui lorsqu'il est énuméré exécute la requête sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Retourne un <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> qui lorsqu'il est énuméré exécute la requête sur la base de données.</summary>
      <returns>Résultats de requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Type de l'élément IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>Expression LINQ IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Fournisseur IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Retourne une représentation <see cref="T:System.String" /> de la requête sous-jacente.</summary>
      <returns>Chaîne de requête.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>Représente une requête SQL pour les non-entités créées à partir d'un <see cref="T:System.Data.Entity.DbContext" /> qui est exécuté à l'aide de la connexion de ce contexte.Les instances de cette classe sont obtenues de l'instance <see cref="P:System.Data.Entity.DbContext.Database" />.La requête n'est pas exécutée lorsque cet objet est créé ; elle est exécutée chaque fois qu'elle est énumérée, par exemple en utilisant l'instruction « foreach ».Les requêtes SQL pour les entités sont créées à l'aide de <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />.Consultez <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> pour une version générique de cette classe.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.</summary>
      <returns>Nouvelle requête avec AsStreaming appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>Spécifie si la requête est égale à l'objet spécifié.</summary>
      <returns>true si la requête est égale à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="action">Action à exécuter sur chaque élément.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="action">Action à exécuter sur chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.IEnumerator" /> qui lorsqu'il est énuméré exécute la requête SQL sur la base de données.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein des éléments.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>Obtient le code de hachage associé à la requête.</summary>
      <returns>Code de hachage associé à la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>Obtient le type associé à la requête.</summary>
      <returns>Type associé à la requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge.</summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Retourne un <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> qui lorsqu'il est énuméré exécute la requête SQL sur la base de données.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> qui peut être utilisé pour itérer au sein des éléments.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> de la requête par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> de la requête par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>Retourne un <see cref="T:System.String" /> qui contient la chaîne SQL définie lorsque la requête a été créée.Les paramètres ne sont pas inclus.</summary>
      <returns>
        <see cref="T:System.String" /> représentant cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>Représente une requête SQL pour les non-entités créées à partir d'un <see cref="T:System.Data.Entity.DbContext" /> qui est exécuté à l'aide de la connexion de ce contexte.Les instances de cette classe sont obtenues de l'instance <see cref="P:System.Data.Entity.DbContext.Database" />.La requête n'est pas exécutée lorsque cet objet est créé ; elle est exécutée chaque fois qu'elle est énumérée, par exemple en utilisant l'instruction « foreach ».Les requêtes SQL pour les entités sont créées à l'aide de <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />.Consultez <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> pour une version non générique de cette classe.</summary>
      <typeparam name="TElement">Type des éléments retournés par la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>Détermine de façon asynchrone si tous les éléments de la requête remplissent une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si chaque élément du résultat de la requête passe le test de l'attribut spécifié ; sinon, false.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si tous les éléments de la requête remplissent une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si chaque élément du résultat de la requête passe le test de l'attribut spécifié ; sinon, false.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>Détermine de façon asynchrone si la requête contient des éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si le résultat de la requête contient des éléments ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>Détermine de façon asynchrone si un élément de la requête remplit une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si un élément du résultat de la requête passe le test de l'attribut spécifié ; sinon, false.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si un élément de la requête remplit une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si un élément du résultat de la requête passe le test de l'attribut spécifié ; sinon, false.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si la requête contient des éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si le résultat de la requête contient des éléments ; sinon, false.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.</summary>
      <returns>Nouvelle requête avec AsStreaming appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>Détermine de façon asynchrone si la requête contient un élément spécifié à l'aide du comparateur d'égalité par défaut.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si le résultat de la requête contient la valeur spécifiée ; sinon, false.</returns>
      <param name="value">Objet à localiser dans le résultat de la requête.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>Détermine de façon asynchrone si la requête contient un élément spécifié à l'aide du comparateur d'égalité par défaut.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient true si le résultat de la requête contient la valeur spécifiée ; sinon, false.</returns>
      <param name="value">Objet à localiser dans le résultat de la requête.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>Retourne de façon asynchrone le nombre d'éléments dans la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments du résultat de la requête.</returns>
      <exception cref="T:System.OverflowException">Le nombre d'éléments du résultat de la requête est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>Retourne de façon asynchrone le nombre d'éléments dans la requête qui répondent à une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le nombre d'éléments dans la requête qui répondent à une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le nombre d'éléments dans la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments du résultat de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.OverflowException">Le nombre d'éléments du résultat de la requête est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>Détermine si la requête actuelle est égale à la requête spécifiée.</summary>
      <returns>true si la requête actuelle est égale à la requête spécifiée ; sinon, false.</returns>
      <param name="obj">Requête à comparer à la requête actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>Retourne de façon asynchrone le premier élément de la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément du résultat de la requête.</returns>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>Retourne de façon asynchrone le premier élément de la requête qui remplit la condition spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément du résultat de la requête qui remplit la condition spécifiée.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément de la requête qui remplit la condition spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément du résultat de la requête qui remplit la condition spécifiée.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément de la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le premier élément du résultat de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>Retourne de façon asynchrone le premier élément de la requête, ou une valeur par défaut si le résultat de la requête ne contient aucun élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default ( <paramref name="TElement" /> ) si le résultat de la requête est vide ; sinon, le premier élément du résultat de la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Retourne de façon asynchrone le premier élément de la requête qui satisfait une condition spécifiée ou une valeur par défaut si aucun élément ne correspond.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default ( <paramref name="TElement" /> ) si le résultat de la requête est vide ou si aucun élément ne passe le test spécifié par <paramref name="predicate" /> ; sinon, le premier élément du résultat de la requête qui passe le test spécifié par <paramref name="predicate" />.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément de la requête qui satisfait une condition spécifiée ou une valeur par défaut si aucun élément ne correspond.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default ( <paramref name="TElement" /> ) si le résultat de la requête est vide ou si aucun élément ne passe le test spécifié par <paramref name="predicate" /> ; sinon, le premier élément du résultat de la requête qui passe le test spécifié par <paramref name="predicate" />.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le premier élément de la requête, ou une valeur par défaut si le résultat de la requête ne contient aucun élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient default ( <paramref name="TElement" /> ) si le résultat de la requête est vide ; sinon, le premier élément du résultat de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="action">Action à exécuter.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>Énumère de façon asynchrone les résultats de la requête et effectue l'action spécifiée sur chaque élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="action">Action à exécuter.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui lorsqu'il est énuméré exécute la requête SQL sur la base de données.</summary>
      <returns>Objet <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui peut être utilisé pour itérer au sein des éléments.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>Retourne la fonction de hachage pour cette requête.</summary>
      <returns>Fonction de hachage pour cette requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>Obtient le type de la requête actuelle.</summary>
      <returns>Type de la requête actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre total d'éléments dans la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments du résultat de la requête.</returns>
      <exception cref="T:System.OverflowException">Le nombre d'éléments du résultat de la requête est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre d'éléments dans la requête qui répondent à une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre d'éléments dans la requête qui répondent à une condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.OverflowException">Le nombre d'éléments dans le résultat de la requête satisfaisant la condition stipulée dans la fonction de prédicat est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone un <see cref="T:System.Int64" /> qui représente le nombre total d'éléments dans la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le nombre d'éléments du résultat de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.OverflowException">Le nombre d'éléments du résultat de la requête est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>Retourne de façon asynchrone la valeur maximale de la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur maximale du résultat de la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone la valeur maximale de la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur maximale du résultat de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>Retourne de façon asynchrone la valeur minimale de la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur minimale du résultat de la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone la valeur minimale de la requête.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur minimale du résultat de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>Retourne de façon asynchrone l'élément unique de la requête et lève une exception, si cette séquence ne contient pas exactement un élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient l'élément unique du résultat de la requête.</returns>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête contient plusieurs éléments.</exception>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>Retourne de façon asynchrone le seul élément de la requête qui satisfait une condition spécifiée ou lève une exception, s'il existe plusieurs éléments de ce type.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément du résultat de la requête qui remplit la condition dans <paramref name="predicate" />.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Plusieurs éléments satisfont la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone le seul élément de la requête qui satisfait une condition spécifiée ou lève une exception, s'il existe plusieurs éléments de ce type.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément du résultat de la requête qui remplit la condition dans <paramref name="predicate" />.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Plusieurs éléments satisfont la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone l'élément unique de la requête et lève une exception, si cette séquence ne contient pas exactement un élément.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient l'élément unique du résultat de la requête.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête contient plusieurs éléments.</exception>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête est vide.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>Retourne de façon asynchrone l'élément unique d'une séquence ou une valeur par défaut si la séquence est vide. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un seul élément du résultat de la requête, ou default ( <paramref name="TElement" /> ) si la séquence ne contient aucun élément.</returns>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête contient plusieurs éléments.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Retourne de façon asynchrone l'élément unique de la requête ou une valeur par défaut si cette séquence ne contient pas d'élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant cette condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément du résultat de la requête qui remplit la condition dans <paramref name="predicate" /> ou default ( <paramref name="TElement" /> ) s'il n'existe aucun élément de ce type.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Plusieurs éléments satisfont la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone l'élément unique de la requête ou une valeur par défaut si cette séquence ne contient pas d'élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant cette condition.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient le seul élément du résultat de la requête qui remplit la condition dans <paramref name="predicate" /> ou default ( <paramref name="TElement" /> ) s'il n'existe aucun élément de ce type.</returns>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> a la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Plusieurs éléments satisfont la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Retourne de façon asynchrone l'élément unique d'une séquence ou une valeur par défaut si la séquence est vide. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un seul élément du résultat de la requête, ou default ( <paramref name="TElement" /> ) si la séquence ne contient aucun élément.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <exception cref="T:System.InvalidOperationException">Le résultat de la requête contient plusieurs éléments.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.IEnumerator" /> qui lorsqu'il est énuméré exécute la requête SQL sur la base de données.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein des éléments.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge.</summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Retourne un <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> qui lorsqu'il est énuméré exécute la requête SQL sur la base de données.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> qui peut être utilisé pour itérer au sein des éléments.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Retourne <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> qui lorsqu'il est énuméré exécute la requête SQL sur la base de données.</summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> qui peut être utilisé pour itérer au sein des éléments.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>Crée un tableau de la requête par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un tableau qui contient les éléments de la séquence d'entrée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>Crée un tableau de la requête par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un tableau qui contient les éléments de la séquence d'entrée.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé et un comparateur spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé et un comparateur spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé et une fonction de sélection d'élément spécifiées.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TResult" /> sélectionnées de la requête.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé, un comparateur et une fonction de sélection d'élément spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TResult" /> sélectionnées de la séquence d'entrée.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé, un comparateur et une fonction de sélection d'élément spécifiés.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TResult" /> sélectionnées de la séquence d'entrée.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé et une fonction de sélection d'élément spécifiées.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les valeurs de type <paramref name="TResult" /> sélectionnées de la requête.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> de la requête par énumération asynchrone selon une fonction de sélection de clé spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient les clés et les valeurs sélectionnées.</returns>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> de la requête par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> de la requête par énumération asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient un <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>Retourne un <see cref="T:System.String" /> qui contient la chaîne SQL définie lorsque la requête a été créée.Les paramètres ne sont pas inclus.</summary>
      <returns>
        <see cref="T:System.String" /> représentant cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> générique équivalent.</summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.La valeur actuelle est l'entité que la propriété de navigation référence.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel cette propriété de navigation appartient.</summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Obtient ou définit une valeur qui indique si l'entité a été chargée à partir de la base de données.</summary>
      <returns>true si l'entité est chargée ou la valeur true a été explicitement affectée à l'indicateur IsLoaded ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Charge l'entité à partir de la base de données.Notez que si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>Charge de façon asynchrone l'entité à partir de la base de données.Notez que si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Charge de façon asynchrone l'entité à partir de la base de données.Notez que si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette entité à partir de la base de données.La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données.</summary>
      <returns>Requête pour l'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode Reference de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent des opérations telles que le chargement sur les propriétés de navigation de référence d'une entité.</summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.La valeur actuelle est l'entité que la propriété de navigation référence.</summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel cette propriété de navigation appartient.</summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Obtient ou définit une valeur qui indique si l'entité a été chargée à partir de la base de données.</summary>
      <returns>true si l'entité est chargée ou la valeur true a été explicitement affectée à l'indicateur IsLoaded ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Charge l'entité à partir de la base de données.Notez que si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>Charge de façon asynchrone l'entité à partir de la base de données.Notez que si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Charge de façon asynchrone l'entité à partir de la base de données.Notez que si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données.</summary>
      <returns>Tâche qui représente l'opération asynchrone.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> non générique pour la propriété de navigation représentée par cet objet.</summary>
      <returns>Version non générique.</returns>
      <param name="entry">Objet représentant la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette entité à partir de la base de données.La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données.</summary>
      <returns>Requête pour l'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Représente une requête SQL pour les entités créées à partir d'un <see cref="T:System.Data.Entity.DbContext" /> qui est exécutée à l'aide de la connexion à partir ce contexte.Les instances de cette classe sont obtenues de l'instance <see cref="T:System.Data.Entity.DbSet" /> pour le type d'entité.La requête n'est pas exécutée lorsque cet objet est créé ; elle est exécutée chaque fois qu'elle est énumérée, par exemple en utilisant l'instruction « foreach ».Les requêtes SQL pour les non-entités sont créées à l'aide de <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" />.Consultez <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> pour une version générique de cette classe.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>Crée une instance d'un <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> lors d'un appel depuis le constructeur d'un type dérivé qui servira à vérifier une deuxième fois <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />.Les méthodes et les propriétés qui serviront au double test doivent être implémentées par le double test, à l'exception d'AsNoTracking et d'AsStreaming pour lesquels l'implémentation par défaut correspond à une absence d'opération.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Retourne une nouvelle requête où les résultats de la requête ne seront pas suivis par le <see cref="T:System.Data.Entity.DbContext" /> associé.</summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.</summary>
      <returns>Nouvelle requête avec AsStreaming appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié équivaut à l'instance actuelle.</summary>
      <returns>true si l'objet spécifié est égal à l'instance actuelle ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'instance actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>Obtient le type associé à la requête.</summary>
      <returns>Type associé à la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>Retourne un <see cref="T:System.String" /> qui contient la chaîne SQL définie lorsque la requête a été créée.Les paramètres ne sont pas inclus.</summary>
      <returns>
        <see cref="T:System.String" /> représentant cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Représente une requête SQL pour les entités créées à partir d'un <see cref="T:System.Data.Entity.DbContext" /> qui est exécutée à l'aide de la connexion à partir ce contexte.Les instances de cette classe sont obtenues de l'instance <see cref="T:System.Data.Entity.DbSet`1" /> pour le type d'entité.La requête n'est pas exécutée lorsque cet objet est créé ; elle est exécutée chaque fois qu'elle est énumérée, par exemple en utilisant l'instruction « foreach ».Les requêtes SQL pour les non-entités sont créées à l'aide de <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" />.Consultez <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> pour une version non générique de cette classe.</summary>
      <typeparam name="TEntity">Type des entités retournées par la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>Crée une instance d'un <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> lors d'un appel depuis le constructeur d'un type dérivé qui servira à vérifier une deuxième fois <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />.Les méthodes et les propriétés qui serviront au double test doivent être implémentées par le double test, à l'exception d'AsNoTracking et d'AsStreaming pour lesquels l'implémentation par défaut correspond à une absence d'opération.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>Retourne une nouvelle requête qui transmettra en continu les résultats au lieu de les mettre en mémoire tampon.</summary>
      <returns>Nouvelle requête avec AsStreaming appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifié.</summary>
      <returns>true si cette instance est identique à un objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>Obtient le code de hachage associé à cette instance.</summary>
      <returns>Code de hachage associé à cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>Obtient le type associé à cette instance.</summary>
      <returns>Type associé à cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Exception levée par <see cref="T:System.Data.Entity.DbContext" /> lorsqu'il est attendu que SaveChanges pour une entité entraîne la mise à jour d'une base de données, mais en réalité, aucune ligne dans la base de données n'est affectée.Cela indique habituellement que la base de données a été mise à jour simultanément et qu'un jeton de concurrence supposé correspondre n'a pas correspondu réellement.Notez que les entrées d'état référencées par cette exception ne sont pas sérialisées pour des raisons de sécurité et l'accès aux entrées d'état après la sérialisation retourne une valeur null.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Message.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>Exception levée par <see cref="T:System.Data.Entity.DbContext" /> lorsque l'enregistrement des modifications dans la base de données échoue.Notez que les entrées d'état référencées par cette exception ne sont pas sérialisées pour des raisons de sécurité et l'accès aux entrées d'état après la sérialisation retourne une valeur null.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Message.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Obtient des objets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> qui représentent les entités qui n'ont pas pu être enregistrées dans la base de données.</summary>
      <returns>Entrées qui représentent les entités qui n'ont pas pu être enregistrées.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>Représente le <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> par défaut qui n'effectue pas de nouvelles tentatives en cas d'échec.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>Exécute l'opération spécifiée une seule fois.</summary>
      <param name="operation">Délégué représentant une opération exécutable qui ne retourne aucun résultat.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Exécute l'opération spécifiée une seule fois et retourne le résultat.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="operation">Délégué représentant une opération exécutable qui retourne un résultat de type <paramref name="TResult" />.</param>
      <typeparam name="TResult">Le type de retour est <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Exécute l'opération asynchrone spécifiée une seule fois, sans nouvelle tentative en cas d'échec.</summary>
      <returns>Tâche qui s'exécute jusqu'à achèvement si la tâche d'origine s'effectue correctement.</returns>
      <param name="operation">Fonction qui retourne une tâche démarrée.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour annuler la nouvelle tentative, mais pas les opérations qui sont déjà en cours ou terminées.</param>
      <typeparam name="TResult">Type de résultat du <see cref="T:System.Threading.Tasks.Task`1" /> retourné par <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Exécute l'opération asynchrone spécifiée une seule fois, sans nouvelle tentative en cas d'échec.</summary>
      <returns>Tâche qui s'exécute jusqu'à achèvement si la tâche d'origine s'effectue correctement.</returns>
      <param name="operation">Fonction qui retourne une tâche démarrée.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour annuler la nouvelle tentative, mais pas les opérations qui sont déjà en cours ou terminées.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>Détermine si le <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> effectuera une nouvelle tentative d'exécution après un échec.</summary>
      <returns>true si le <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> effectuera une nouvelle tentative d'exécution après un échec ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>Représente une implémentation par défaut de <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> qui utilise le fournisseur sous-jacent pour obtenir le jeton de manifeste.Notez que pour éviter plusieurs requêtes, cette implémentation utilise la mise en cache selon le type réel d'instance <see cref="T:System.Data.Common.DbConnection" />, de la propriété <see cref="P:System.Data.Common.DbConnection.DataSource" /> et de la propriété <see cref="P:System.Data.Common.DbConnection.Database" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>Retourne le jeton de manifeste à utiliser pour la connexion donnée.</summary>
      <returns>Jeton de manifeste à utiliser.</returns>
      <param name="connection">Connexion pour laquelle un jeton de manifeste est requis.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Représente une entité utilisée pour stocker des métadonnées sur un EDM dans la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Obtient ou définit l'D de l'entité de métadonnées, qui est actuellement toujours 1.</summary>
      <returns>ID.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Obtient ou définit le hachage de modèle utilisé pour vérifier si le modèle a changé depuis que la base de données a été créée à partir de lui.</summary>
      <returns>Hachage de modèle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Tente d'obtenir le hachage de modèle calculé par Code First pour le contexte donné.Cette méthode retournera null si le contexte n'est pas utilisé dans le mode Code First.</summary>
      <returns>Chaîne de hachage.</returns>
      <param name="context">Contexte.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Contient les méthodes utilisées pour accéder à l'Entity Data Model créé par Code First dans le formulaire EDMX.Ces méthodes sont généralement utilisées pour le débogage, lorsqu'il est nécessaire de regarder le modèle que Code First créé en interne.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Utilise Code First avec le contexte donné et écrit l'Entity Data Model résultant dans l'enregistreur spécifié dans le formulaire EDMX.Cette méthode peut être utilisée uniquement avec les instances de contexte qui utilisent Code First et créent le modèle en interne.La méthode ne peut pas être utilisée pour les contextes créés à l'aide de Database First ou Model First, pour les contextes créés à l'aide d'un <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> préexistant, ou pour les contextes créés à l'aide d'un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> préexistant.</summary>
      <param name="context">Contexte.</param>
      <param name="writer">Enregistreur.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Écrit l'Entity Data Model représenté par le <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> donné sur l'enregistreur spécifié dans le formulaire EDMX.</summary>
      <param name="model">Objet représentant l'EDM.</param>
      <param name="writer">Enregistreur.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>Clé utilisée pour résoudre <see cref="T:System.Func`1" />.Elle se compose du nom invariant de fournisseur ADO.NET et du nom du serveur de base de données spécifié dans la chaîne de connexion.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel cette stratégie d'exécution est utilisée.</param>
      <param name="serverName">Chaîne qui sera comparée au nom du serveur dans la chaîne de connexion.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est égal à cette clé.</summary>
      <returns>true si l'objet spécifié est égal à cette clé ; sinon, false.</returns>
      <param name="obj">Objet auquel comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel cette stratégie d'exécution est utilisée.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>Chaîne qui sera comparée au nom du serveur dans la chaîne de connexion.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>Version asynchrone de l'interface <see cref="T:System.Collections.IEnumerable" /> qui permet l'extraction asynchrone des éléments.Cette interface est utilisée pour interagir avec des requêtes Entity Framework et ne doit pas être implémentée par des classes personnalisées.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>Obtient un énumérateur qui peut être utilisé pour énumérer de façon asynchrone la séquence.</summary>
      <returns>Énumérateur pour l'énumération asynchrone sur la séquence.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>Version asynchrone de l'interface <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui permet l'extraction asynchrone des éléments de la séquence énumérable.Cette interface est utilisée pour interagir avec des requêtes Entity Framework et ne doit pas être implémentée par des classes personnalisées.</summary>
      <typeparam name="T">Type des objets à énumérer.Ce paramètre de type est covariant. Autrement dit, vous pouvez utiliser le type que vous avez spécifié ou tout type plus dérivé. Pour plus d'informations sur la covariance et la contravariance, consultez .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Obtient un énumérateur qui peut être utilisé pour énumérer de façon asynchrone la séquence.</summary>
      <returns>Énumérateur pour l'énumération asynchrone sur la séquence.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>Version asynchrone de l'interface <see cref="T:System.Collections.IEnumerator" /> qui permet l'extraction asynchrone des éléments.Cette interface est utilisée pour interagir avec des requêtes Entity Framework et ne doit pas être implémentée par des classes personnalisées.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>Obtient l'élément en cours dans l'itération.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>Avance l'énumérateur à l'élément suivant dans la séquence, et retourne le résultat asynchrone.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient la valeur true si l'énumérateur a pu avancer jusqu'à l'élément suivant, false si l'énumérateur a dépassé la fin de la séquence.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>Version asynchrone de l'interface <see cref="T:System.Collections.Generic.IEnumerator`1" /> qui permet l'extraction asynchrone des éléments.Cette interface est utilisée pour interagir avec des requêtes Entity Framework et ne doit pas être implémentée par des classes personnalisées.</summary>
      <typeparam name="T">Type des objets à énumérer.Ce paramètre de type est covariant. Autrement dit, vous pouvez utiliser le type que vous avez spécifié ou tout type plus dérivé. Pour plus d'informations sur la covariance et la contravariance, consultez .</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>Obtient l'élément en cours dans l'itération.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>Définit des méthodes destinées à créer et exécuter de façon asynchrone des requêtes décrites par un objet <see cref="T:System.Linq.IQueryable" />.Cette interface est utilisée pour interagir avec des requêtes Entity Framework et ne doit pas être implémentée par des classes personnalisées.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone la requête fortement typée représentée par une arborescence d'expression spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Résultat de la tâche contenant la valeur qui résulte de l'exécution de la requête spécifiée.</returns>
      <param name="expression">Arborescence d'expression qui représente une requête LINQ.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
      <typeparam name="TResult">Type de la valeur qui résulte de l'exécution de la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Exécute de façon asynchrone la requête représentée par une arborescence d'expression spécifiée.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Résultat de la tâche contenant la valeur qui résulte de l'exécution de la requête spécifiée.</returns>
      <param name="expression">Arborescence d'expression qui représente une requête LINQ.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Les implémentations de cette interface sont utilisées pour créer des objets DbConnection pour un type de serveur de base de données selon un nom de la base de données spécifique.Une instance est définie sur la classe <see cref="T:System.Data.Entity.Database" /> pour que tous les objets DbContext qui doivent être créés sans informations de connexion ou juste un nom de base de données ou chaîne de connexion, utilisent un certain type de serveur de base de données.Deux implémentations de cette interface sont fournies : <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> utilisé pour créer des connexions à Microsoft SQL Server, y compris les éditions EXPRESS.<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> utilisé pour créer des connexions à Microsoft SQL Server Compact Edition.D'autres implémentations pour d'autres serveurs de bases de données peuvent être ajoutées au besoin.Notez que les implémentations doivent être thread-safe ou immuables puisqu'elles sont accessibles en même temps par plusieurs threads.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Crée une connexion en fonction du nom de la base de données spécifique ou d'une chaîne de connexion.</summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Fabrique permettant de créer des instances dérivées de <see cref="T:System.Data.Entity.DbContext" />.Implémentez cette interface pour activer les services au moment de la conception des types de contexte qui n'ont pas de constructeur public par défaut.Au moment de la conception, des instances <see cref="T:System.Data.Entity.DbContext" /> dérivées peuvent être créées pour activer des expériences de conception spécifiques, telles que le rendu des modèles et la génération du DDL, etc.Pour activer l'instantiation au moment de la conception des types <see cref="T:System.Data.Entity.DbContext" /> dérivés qui n'ont pas de constructeur public par défaut, implémentez cette interface.Les services au moment de la conception détectent automatiquement les implémentations de cette interface qui se trouvent dans le même assembly que le type de <see cref="T:System.Data.Entity.DbContext" /> dérivé.</summary>
      <typeparam name="TContext">Type du contexte.Ce paramètre de type est covariant. Autrement dit, vous pouvez utiliser le type que vous avez spécifié ou tout type plus dérivé. Pour plus d'informations sur la covariance et la contravariance, consultez .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Crée une nouvelle instance d'un type de <see cref="T:System.Data.Entity.DbContext" /> dérivé.</summary>
      <returns>Instance de TContext</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>Stratégie utilisée pour exécuter une commande ou une requête sur la base de données, éventuellement avec une logique de nouvelle tentative en cas d'échec.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>Exécute l'opération spécifiée.</summary>
      <param name="operation">Délégué représentant une opération exécutable qui ne retourne aucun résultat.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Exécute l'opération spécifiée et retourne le résultat.</summary>
      <returns>Résultat de l'opération.</returns>
      <param name="operation">Délégué représentant une opération exécutable qui retourne un résultat de type <paramref name="TResult" />.</param>
      <typeparam name="TResult">Le type de retour est <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Exécute l'opération asynchrone spécifiée et retourne le résultat.</summary>
      <returns>Tâche qui s'exécute jusqu'à achèvement si la tâche d'origine se termine correctement (soit la première fois ou après plusieurs échecs temporaires).En cas de échec de la tâche avec une erreur non temporaires ou de nombre maximal de tentatives atteint, la tâche retournée génère une erreur et l'exception doit être observée.</returns>
      <param name="operation">Fonction qui retourne une tâche démarrée de type <paramref name="TResult" />.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour annuler la nouvelle tentative, mais pas les opérations qui sont déjà en cours ou terminées.</param>
      <typeparam name="TResult">Type de résultat du <see cref="T:System.Threading.Tasks.Task`1" /> retourné par <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Exécute l'opération asynchrone spécifiée.</summary>
      <returns>Tâche qui s'exécute jusqu'à achèvement si la tâche d'origine se termine correctement (soit la première fois ou après plusieurs échecs temporaires).En cas de échec de la tâche avec une erreur non temporaires ou de nombre maximal de tentatives atteint, la tâche retournée génère une erreur et l'exception doit être observée.</returns>
      <param name="operation">Fonction qui retourne une tâche démarrée.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour annuler la nouvelle tentative, mais pas les opérations qui sont déjà en cours ou terminées.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>Indique si cet <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> peut effectuer une nouvelle tentative d'exécution après une défaillance.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>Représente une valeur de clé qui identifie de manière unique un modèle Entity Framework qui a été chargé en mémoire.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>Détermine si la clé de modèle mise en cache actuelle est égale à la clé de modèle mise en cache spécifiée.</summary>
      <returns>true si la clé de modèle mise en cache actuelle est égale à la clé de modèle mise en cache spécifiée ; sinon, false.</returns>
      <param name="other">Clé de modèle mise en cache à comparer à la clé de modèle mise en cache actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>Retourne la fonction de hachage pour cette clé de modèle mise en cache.</summary>
      <returns>Fonction de hachage pour cette clé de modèle mise en cache.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>Implémente cette interface sur votre contexte afin d'utiliser la logique personnalisée pour calculer la clé utilisée pour rechercher un modèle déjà créé dans le cache.Cette interface vous permet de disposer d'un type de context unique qui peut être utilisé avec différents modèles dans le même AppDomain, ou de plusieurs types de contexte qui utilisent le même modèle.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>Obtient la clé mise en cache associée au fournisseur.</summary>
      <returns>Clé mise en cache associée au fournisseur.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>Service pour obtenir le <see cref="T:System.Data.Common.DbProviderFactory" /> approprié d'un <see cref="T:System.Data.Common.DbConnection" /> donné.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>Retourne le <see cref="T:System.Data.Common.DbProviderFactory" /> pour la connexion donnée.</summary>
      <returns>Fabrique de fournisseur pour la connexion.</returns>
      <param name="connection">Connexion.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>Service pour obtenir un jeton de manifeste du fournisseur pour une connexion donnée.La classe <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> est utilisée par défaut et utilise le fournisseur sous-jacent pour obtenir le jeton, ce qui implique souvent l'ouverture de la connexion.Une implémentation différente peut être utilisée à la place en ajoutant un <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> à <see cref="T:System.Data.Entity.DbConfiguration" /> qui peut utiliser toutes les informations de la connexion pour obtenir le jeton.Par exemple, si la connexion est connue pour pointer vers une base de données SQL Server 2008, « 2008 » peut être retourné sans ouvrir la connexion.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>Retourne le jeton de manifeste à utiliser pour la connexion donnée.</summary>
      <returns>Jeton de manifeste à utiliser.</returns>
      <param name="connection">Connexion pour laquelle un jeton de manifeste est requis.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
      <summary>Implémentez cette interface pour permettre aux annotations personnalisées représentées par les instances <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> d'être sérialisées depuis et vers EDMX XML.Habituellement, une instance du sérialiseur est définie à l'aide de la méthode <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Désérialise la chaîne donnée de nouveau dans la valeur d'annotation attendue.</summary>
      <returns>Valeur d'annotation désérialisée.</returns>
      <param name="name">Nom de l'annotation en cours de désérialisation.</param>
      <param name="value">Chaîne à désérialiser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Sérialise la valeur d'annotation donnée en chaîne pour le stockage dans EDMX XML.</summary>
      <returns>Valeur sérialisée.</returns>
      <param name="name">Nom de l'annotation en cours de sérialisation.</param>
      <param name="value">Valeur à sérialiser.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>Cette convention <see cref="T:System.Data.Entity.DbModelBuilder" /> fait en sorte que DbModelBuilder inclue les métadonnées sur le modèle lorsqu'il génère le modèle.Lorsque <see cref="T:System.Data.Entity.DbContext" /> crée un modèle par convention, il ajoutera cette convention à la liste de celles utilisées par le DbModelBuilder.Cela entraînera l'écriture des métadonnées du modèle dans la base de données si le DbContext est utilisé pour créer la base de données.Cela peut ensuite être utilisé pour vérifier rapidement si le modèle a changé depuis la dernière fois qu'il a été utilisé sur la base de données.Cette convention peut être supprimée des conventions <see cref="T:System.Data.Entity.DbModelBuilder" /> en substituant la méthode OnModelCreating sur une classe DbContext dérivée.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Interface implémentée par les objets qui peuvent fournir une instance <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />.La classe <see cref="T:System.Data.Entity.DbContext" /> implémente cette interface pour fournir l'accès à l'ObjectContext sous-jacent.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Obtient le contexte de l'objet.</summary>
      <returns>Contexte de l'objet.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>Utilisé par <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> et <see cref="T:System.Data.Entity.DbConfiguration" /> pour résoudre un nom invariant de fournisseur à partir d'un <see cref="T:System.Data.Common.DbProviderFactory" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>Obtient le nom du fournisseur.</summary>
      <returns>Nom du fournisseur.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>Les instances de cette classe sont utilisées pour créer des objets DbConnection pour SQL Server LocalDb en fonction d'un nom de base de données spécifique ou d'une chaîne de connexion.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>Crée une instance de la fabrique de connexions pour la version spécifique de LocalDb.Pour SQL Server 2012 LocalDb, utilisez v11.0.Pour SQL Server 2014 LocalDb ou version ultérieure, utilisez mssqllocaldb.</summary>
      <param name="localDbVersion">Version de LocalDb à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>Crée une instance de la fabrique de connexions pour la version spécifique de LocalDb.Pour SQL Server 2012 LocalDb, utilisez v11.0.Pour SQL Server 2014 LocalDb ou version ultérieure, utilisez mssqllocaldb.</summary>
      <param name="localDbVersion">Version de LocalDb à utiliser.</param>
      <param name="baseConnectionString">Chaîne de connexion à utiliser pour les options de la base de données autres que le catalogue initial, la source de données et la propriété AttachDbFilename.Le catalogue initial et la propriété AttachDbFilename sont ajoutés à cette chaîne en fonction du nom de base de données lorsque CreateConnection est appelé.La source de données est définie en fonction de l'argument LocalDbVersion.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>Chaîne de connexion à utiliser pour les options de la base de données autres que le catalogue initial, la source de données et la propriété AttachDbFilename.Le catalogue initial et la propriété AttachDbFilename sont ajoutés à cette chaîne en fonction du nom de base de données lorsque CreateConnection est appelé.La source de données est définie en fonction de l'argument LocalDbVersion.La valeur par défaut est « Integrated Security=True; ».</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>Crée une connexion pour SQL Server LocalDb en fonction du nom de base de données spécifié ou d'une chaîne de connexion.Si la chaîne donnée contient un caractère '=', elle est traitée comme une chaîne de connexion complète, sinon, elle est traitée uniquement comme un nom de base de données.</summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>Cette convention <see cref="T:System.Data.Entity.DbModelBuilder" /> utilise le nom de la classe <see cref="T:System.Data.Entity.DbContext" /> dérivée en tant que conteneur pour le modèle conceptuel construit par Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la convention au modèle donné.</summary>
      <param name="item">Conteneur auquel appliquer la convention.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>Cette convention <see cref="T:System.Data.Entity.DbModelBuilder" /> utilise l'espace de noms de la classe <see cref="T:System.Data.Entity.DbContext" /> dérivée en tant qu'espace de noms du modèle conceptuel construit par Code First.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>Compare des objets à l'aide de l'égalité de référence.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
      <summary>Obtient l'instance par défaut.</summary>
      <returns>Instance par défaut.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)">
      <summary>Détermine si les instances d'objet spécifiées sont considérées comme identiques.</summary>
      <returns>true si les objets sont considérés comme identiques ; sinon, false.</returns>
      <param name="x">Premier objet à comparer.</param>
      <param name="y">Deuxième objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)">
      <summary>Obtient le code de hachage de l'objet spécifié.</summary>
      <returns>Code de hachage de l'objet spécifié.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Les instances de cette classe sont utilisées en interne pour créer des expressions constantes pour <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> qui sont insérées dans l'arborescence d'expressions pour remplacer des références à <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> et <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />.</summary>
      <typeparam name="TElement">Type de l'élément.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>Propriété publique attendue dans l'arborescence d'expressions LINQ.</summary>
      <returns>Requête.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>Exception levée lorsque l'action échoue après le nombre de nouvelles tentatives configuré.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> avec aucun message d'erreur.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" />.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Les instances de cette classe sont utilisées pour créer des objets DbConnection pour SQL Server Compact Edition en fonction d'un nom de base de données donné ou d'une chaîne de connexion.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>Crée une fabrique de connexions avec des propriétés DatabaseDirectory et BaseConnectionString vides (valeur par défaut).</summary>
      <param name="providerInvariantName">Nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Crée une fabrique de connexions avec les propriétés DatabaseDirectory et BaseConnectionString données.</summary>
      <param name="providerInvariantName">Nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser.</param>
      <param name="databaseDirectory">Chemin d'accès à ajouter au nom de la base de données, qui formera le nom du fichier utilisé par SQL Server Compact Edition lorsqu'il crée ou lit le fichier de base de données.Une chaîne vide signifie que SQL Server Compact Edition utilise l'emplacement par défaut de fichier de base de données.</param>
      <param name="baseConnectionString">Chaîne de connexion à utiliser pour les options à la base de données autres que « Data Source ».Data Source sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Chaîne de connexion à utiliser pour les options à la base de données autres que « Data Source ».Data Source sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé.La valeur par défaut est la chaîne vide, indiquant qu'aucune autre option ne sera utilisée.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Crée une connexion pour SQL Server Compact Edition en fonction du nom de la base de données spécifiée ou d'une chaîne de connexion.Si la chaîne donnée contient un caractère '=', elle est traitée comme une chaîne de connexion complète, sinon, elle est traitée uniquement comme un nom de base de données.</summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Chemin d'accès à ajouter au nom de la base de données, qui formera le nom du fichier utilisé par SQL Server Compact Edition lorsqu'il crée ou lit le fichier de base de données.La valeur par défaut est « | DataDirectory | », indiquant que le fichier sera placé dans le répertoire de données désigné.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>Nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>Les instances de cette classe sont utilisées pour créer des objets DbConnection pour SQL Server en fonction d'un nom de base de données spécifique ou d'une chaîne de connexion.Par défaut, la connexion est établie avec « .\SQLEXPRESS ».Cela peut être modifié à l'aide de la chaîne de connexion de base lors de la construction d'une instance de fabrique.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Crée une fabrique de connexions avec une propriété BaseConnectionString par défaut « Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True; ».</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Crée une fabrique de connexions avec la propriété BaseConnectionString donnée.</summary>
      <param name="baseConnectionString">Chaîne de connexion à utiliser pour les options de connexion à la base de données autres que le catalogue initial.Le catalogue initial sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Chaîne de connexion à utiliser pour les options de connexion à la base de données autres que le catalogue initial.Le catalogue initial sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé.La valeur par défaut est « Data Source=.\SQLEXPRESS; Integrated Security=True; ».</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Crée une connexion pour SQL Server en fonction du nom de la base de données spécifiée ou d'une chaîne de connexion.Si la chaîne donnée contient un caractère '=', elle est traitée comme une chaîne de connexion complète, sinon, elle est traitée uniquement comme un nom de base de données.</summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Cet attribut peut être appliqué à une classe <see cref="T:System.Data.Entity.DbContext" /> dérivée entière ou aux propriétés <see cref="T:System.Data.Entity.DbSet`1" /> ou <see cref="T:System.Data.Entity.IDbSet`1" /> individuelles sur cette classe.S'il est appliqué, toutes les propriétés <see cref="T:System.Data.Entity.DbSet`1" /> ou <see cref="T:System.Data.Entity.IDbSet`1" /> découvertes sont toujours incluses dans le modèle, mais ne sont pas initialisées automatiquement.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
      <summary>Implémenté par les fournisseurs Entity Framework et utilisé pour vérifier si des tables existent dans une base de données spécifique.Les initialiseurs de base de données s'en servent pour déterminer s'il faut considérer une base de données existante comme étant vide pour imposer la création de tables.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
      <summary>En cas de substitution dans une classe dérivée, vérifie si les tables données existent dans la base de données pour la connexion spécifiée.</summary>
      <returns>True, s'il existe une table de modèle ou une table EdmMetadata.</returns>
      <param name="context">Contexte dans lequel la vérification de table est effectuée. Il est généralement utilisé pour obtenir le <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" /> approprié</param>
      <param name="connection">Connexion à la base de données.Peut être ouverte ou fermée ; doit être refermée si elle est ouverte.Ne pas supprimer.</param>
      <param name="modelTables">Tables dont l'existence doit être vérifiée.</param>
      <param name="edmMetadataContextTableName">Nom de la table EdmMetadata dont l'existence doit être vérifiée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Méthode d'assistance permettant d'obtenir le nom de la table pour l'espace S spécifié <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Nom de la table.</returns>
      <param name="modelTable">Entité d'espace S définie pour la table.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
      <summary>Cette classe est utilisée par <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> pour lire et écrire des informations de suivi de transaction depuis la base de données.Pour personnaliser la définition de la table de transactions, vous pouvez dériver de cette classe et remplacer <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />.Les classes dérivées peuvent être inscrites avec <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" />.</summary>
      <param name="existingConnection">Connexion utilisée par le contexte pour lequel les transactions seront enregistrées.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Cette méthode est appelée lorsque le modèle d'un contexte dérivé a été initialisé.</summary>
      <param name="modelBuilder">Générateur qui définit le modèle pour le contexte créé.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
      <summary>Obtient ou définit un <see cref="T:System.Data.Entity.DbSet`1" /> qui peut être utilisé pour lire et écrire les instances <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbSet`1" /> qui peut être utilisé pour lire et écrire des instances de <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
      <summary>Représente la classe de base des intercepteurs qui gèrent les opérations de transaction.Les classes dérivées peuvent être inscrites à l'aide de <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> ou de <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion qui a démarré la transaction.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion commençant la transaction.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
      <summary>Une fois implémentée dans une classe dérivée, retourne le script pour préparer la base de données pour ce gestionnaire de transactions.</summary>
      <returns>Script pour modifier le schéma de base de données de ce gestionnaire de transactions.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion qui était fermée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion en cours de fermeture.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction qui a été validée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction en cours de validation.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
      <summary>Obtient la connexion pour laquelle les opérations de transaction seront gérées.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> pour lequel les opérations de transaction seront gérées.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
      <summary>Obtient le contexte pour lequel les opérations de transaction seront gérées.</summary>
      <returns>
        <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" /> pour lequel les opérations de transaction seront gérées.Peut être Null.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
      <summary>Libère les ressources utilisées par ce gestionnaire de transactions.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
      <summary>Libère les ressources utilisées par ce gestionnaire de transactions.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion qui a été supprimée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction qui a été supprimée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion en cours de suppression.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction en cours de suppression.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Initialise cette instance avec le contexte spécifié.</summary>
      <param name="context">Contexte pour lequel les opérations de transaction seront gérées.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>Initialise cette instance avec le contexte spécifié.</summary>
      <param name="context">Contexte pour lequel les opérations de transaction seront gérées.</param>
      <param name="connection">Connexion à utiliser pour l'initialisation.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
      <summary>Obtient ou définit une valeur indiquant si ce gestionnaire de transactions est supprimé.</summary>
      <returns>true si ce gestionnaire de transactions est supprimé ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
      <summary>Vérifie si le contexte d'interception fourni contient le contexte cible ou si la connexion fournie est la même que celle utilisée par le contexte cible.</summary>
      <returns>true si le contexte d'interception fourni contient le contexte cible ou si la connexion fournie est identique à celle utilisée par le contexte cible dans le cas où le contexte d'interception fourni ne contient aucun contexte ; sinon, false.</returns>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Contexte d'interception.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
      <summary>Obtient le contexte pour lequel les opérations de transaction seront gérées.</summary>
      <returns>
        <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" /> pour lequel les opérations de transaction seront gérées.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion qui a été ouverte.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion en cours d'ouverture.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction qui a été annulée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="transaction">Transaction annulée.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Peut être implémenté dans une classe dérivée.</summary>
      <param name="connection">Connexion.</param>
      <param name="interceptionContext">Informations contextuelles associées à l'appel.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
      <summary>Représente une transaction.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
      <summary>Obtient ou définit l'heure locale à laquelle la transaction a démarré.</summary>
      <returns>Heure locale à laquelle la transaction a démarré.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
      <summary>Valeur indiquant si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
      <summary>Obtient ou définit un ID unique affecté à un objet de transaction.</summary>
      <returns>ID unique affecté à un objet de transaction.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Exception levée lorsqu'un contexte est généré à partir des modèles <see cref="T:System.Data.Entity.DbContext" /> en mode Database First ou Model First, puis utilisé en mode Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="message">Message.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
      <summary>Représente la création d'un service qui permet la génération de code d'annotations personnalisées lors de la génération de modèles automatiques pour les migrations.La classe dérivée doit être définie sur <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour la valeur d'annotation donnée.</summary>
      <param name="annotationName">Nom de l'annotation pour laquelle une valeur est générée.</param>
      <param name="annotation">Valeur d'annotation.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Retourne des espaces de noms supplémentaires qui doivent être inclus dans le code généré pour la migration structurée.L'implémentation par défaut retourne une énumération vide.</summary>
      <returns>Liste des espaces de noms supplémentaires à inclure.</returns>
      <param name="annotationNames">Noms des annotations qui sont incluses dans le code généré.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
      <summary>Représente une paire de valeurs d'annotation dans une <see cref="T:System.Data.Entity.Migrations.DbMigration" /> structurée ou codée manuellement.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
      <summary>Crée une paire de valeurs d'annotation.</summary>
      <param name="oldValue">Ancienne valeur de l'annotation, qui peut être Null si l'annotation vient d'être créée.</param>
      <param name="newValue">Nouvelle valeur de l'annotation, qui peut être Null si l'annotation a été supprimée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié équivaut à cet objet d'instance.</summary>
      <returns>true si l'objet spécifié équivaut à cet objet d'instance ; sinon, false.</returns>
      <param name="obj">Objet auquel comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
      <summary>Récupère le code de hachage.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
      <summary>Obtient la nouvelle valeur de l'annotation, qui peut être Null si l'annotation a été supprimée.</summary>
      <returns>Nouvelle valeur de l'annotation, qui peut être Null si l'annotation a été supprimée.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
      <summary>Obtient l'ancienne valeur de l'annotation, qui peut être Null si l'annotation vient d'être créée.</summary>
      <returns>Ancienne valeur de l'annotation, qui peut être Null si l'annotation vient d'être créée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Retourne True si les deux paires d'annotation contiennent les mêmes valeurs, sinon retourne False.</summary>
      <returns>true si les deux paires contiennent les mêmes valeurs.</returns>
      <param name="left">Paire de valeurs d'annotation.</param>
      <param name="right">Paire de valeurs d'annotation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Retourne True si les deux paires d'annotation contiennent des valeurs différentes, sinon False.</summary>
      <returns>true si les paires contiennent des valeurs différentes.</returns>
      <param name="left">Paire de valeurs d'annotation.</param>
      <param name="right">Paire de valeurs d'annotation.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
      <summary>Retourné par <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> et des méthodes connexes pour indiquer si un objet est en conflit ou non avec un autre de sorte que les deux puissent être combinés pour n'en former qu'un seul.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
      <summary>Crée une instance <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" />.</summary>
      <param name="isCompatible">Indique si les deux objets testés sont compatibles.</param>
      <param name="errorMessage">Message d'erreur indiquant pourquoi les objets ne sont pas compatibles.La valeur attendue est Null si isCompatible est True.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
      <summary>Si <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible" /> a la valeur True, un message d'erreur est retourné pour indiquer pourquoi les deux objets testés sont incompatibles.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
      <summary>True si les deux objets testés sont compatibles ; sinon, False.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
      <summary>Conversion implicite en valeur booléenne pour permettre à l'objet de résultat d'être utilisé directement dans un test.</summary>
      <returns>True si le résultat est compatible ; sinon, False.</returns>
      <param name="result">Objet à convertir.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
      <summary>Les types utilisés en tant qu'annotations personnalisées peuvent implémenter cette interface pour indiquer qu'une tentative d'utilisation de plusieurs annotations portant le même nom dans une table ou une colonne donnée peut être possible en fusionnant plusieurs annotations en une seule.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
      <summary>Retourne True si cette annotation n'est pas en conflit avec l'annotation donnée, de sorte que les deux puissent être associées à l'aide de la méthode <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)" />.</summary>
      <returns>CompatibilityResult indiquant si cette annotation est compatible avec l'autre.</returns>
      <param name="other">Annotation à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
      <summary>Fusionne cette annotation avec l'annotation donnée et retourne une nouvelle annotation fusionnée.Cette méthode aboutit uniquement si <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> retourne la valeur True.</summary>
      <returns>Nouvelle annotation fusionnée.</returns>
      <param name="other">Annotation à fusionner avec celle-ci.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
      <summary>Représente les annotations personnalisées pour représenter les index de base de données dans un modèle Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> à l'aide de la collection donnée d'index.</summary>
      <param name="indexAttributes">Attributs d'index représentant un ou plusieurs index.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> à l'aide de la collection donnée d'index.</summary>
      <param name="indexAttribute">Attributs d'index représentant un index.</param>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
      <summary>Nom utilisé lorsque cette annotation est stockée dans les métadonnées d'Entity Framework ou sérialisée dans un fichier SSDL/EDMX.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
      <summary>Obtient les index représentés par cette annotation.</summary>
      <returns>Index représentés par cette annotation.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
      <summary>Retourne True si cette annotation n'est pas en conflit avec l'annotation donnée, de sorte que les deux puissent être associées à l'aide de la méthode <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" />.</summary>
      <returns>CompatibilityResult indiquant si cette annotation est compatible avec l'autre.</returns>
      <param name="other">Annotation à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
      <summary>Fusionne cette annotation avec l'annotation donnée et retourne une nouvelle annotation contenant les index fusionnés.</summary>
      <returns>Une nouvelle annotation a fusionné avec des index des deux annotations.</returns>
      <param name="other">Annotation à fusionner avec celle-ci.</param>
      <exception cref="T:System.InvalidOperationException">L'autre annotation contient des index qui ne sont pas compatibles avec des index de cette annotation.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
      <summary>Retourne une représentation sous forme de chaîne de l'objet <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />.</summary>
      <returns>Représentation sous forme de chaîne de l'objet <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
      <summary>Cette classe est utilisée pour la sérialisation et la désérialisation des objets <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> afin de pouvoir les stocker dans le formulaire EDMX du modèle d'Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Désérialise la chaîne donnée de nouveau dans un objet <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />.</summary>
      <returns>Valeur d'annotation désérialisée.</returns>
      <param name="name">Nom de l'annotation en cours de désérialisation.</param>
      <param name="value">Chaîne à désérialiser.</param>
      <exception cref="T:System.FormatException">En cas d'erreur de lecture de la valeur sérialisée.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Sérialise le <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> donné dans une chaîne pour le stockage dans l'EDMX XML.</summary>
      <returns>Valeur sérialisée.</returns>
      <param name="name">Nom de l'annotation en cours de sérialisation.</param>
      <param name="value">Valeur à sérialiser, laquelle doit être un objet IndexAnnotation.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>Représente les arguments d'événement passés aux gestionnaires d'événements <see cref="E:System.Data.Entity.DbConfiguration.Loaded" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Ajoute une instance de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> à la chaîne de la responsabilité des programmes de résolution utilisés pour résoudre les dépendances requises par Entity Framework.Contrairement à la méthode AddDependencyResolver, cette méthode place le programme de résolution en bas de la chaîne de responsabilité de sorte qu'il est utilisé uniquement pour résoudre une dépendance qui ne peut pas être résolue par l'un des autres programmes de résolution.</summary>
      <param name="resolver">Programme de résolution à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>Ajoute une instance de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> à la chaîne de la responsabilité des programmes de résolution utilisés pour résoudre les dépendances requises par Entity Framework.</summary>
      <param name="resolver">Programme de résolution à ajouter.</param>
      <param name="overrideConfigFile">Si la valeur est true, le programme de résolution ajouté aura priorité sur les paramètres définis dans le fichier de configuration.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>Obtient un instantané de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> qui va être verrouillé.Utilisez les méthodes GetService de cet objet pour obtenir les services inscrits.</summary>
      <returns>Instantané de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> qui va être verrouillé.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifique.</summary>
      <returns>true si cette instance est identique à un objet spécifique ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
      <summary>Obtient le code de hachage associé à cette instance.</summary>
      <returns>Code de hachage associé à cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
      <summary>Obtient le type de cette instance.</summary>
      <returns>Type de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>Ajoute un programme de résolution d'habillage à la configuration qui va être verrouillée.Un programme de résolution d'habillage est un programme de résolution qui lance un service qui aurait été retourné par la chaîne du programme de résolution et l'encapsule ou le remplace par un autre service du même type.</summary>
      <param name="serviceInterceptor">Délégué qui prend le service et la clé non encapsulés et retourne le service encapsulé ou remplacé.</param>
      <typeparam name="TService">Type de service à encapsuler ou remplacer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" />.</summary>
      <returns>Représentation sous forme de chaîne de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>Méthodes d'extension pour appeler la méthode <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> à l'aide d'un paramètre de type générique et/ou aucun nom.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Appelle <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> en passant le type générique de la méthode comme argument de type et Null pour l'argument de nom.</summary>
      <returns>Dépendance résolue, ou Null si le programme de résolution ne peut pas résoudre la résoudre.</returns>
      <param name="resolver">Programme de résolution à utiliser.</param>
      <typeparam name="T">Type de contrat à résoudre.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Appelle <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> en passant le type générique de la méthode et le nom spécifié comme arguments.</summary>
      <returns>Dépendance résolue, ou Null si le programme de résolution ne peut pas résoudre la résoudre.</returns>
      <param name="resolver">Programme de résolution à utiliser.</param>
      <param name="key">Clé de la dépendance à résoudre.</param>
      <typeparam name="T">Type de contrat à résoudre.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Appelle <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> en passant l'argument de type donné et en utilisant Null pour l'argument de nom.</summary>
      <returns>Dépendance résolue, ou Null si le programme de résolution ne peut pas résoudre la résoudre.</returns>
      <param name="resolver">Programme de résolution à utiliser.</param>
      <param name="type">Type de contrat à résoudre.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Appelle <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> en passant le type générique de la méthode comme argument de type et Null pour l'argument de nom.</summary>
      <returns>Toutes les dépendances résolues ou un <see cref="T:System.Collections.Generic.IEnumerable`1" /> si aucun service n'a été résolu.</returns>
      <param name="resolver">Programme de résolution à utiliser.</param>
      <typeparam name="T">Type de contrat à résoudre.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Appelle <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> en passant le type générique de la méthode et le nom spécifié comme arguments.</summary>
      <returns>Toutes les dépendances résolues ou un <see cref="T:System.Collections.Generic.IEnumerable`1" /> si aucun service n'a été résolu.</returns>
      <param name="resolver">Programme de résolution à utiliser.</param>
      <param name="key">Clé de la dépendance à résoudre.</param>
      <typeparam name="T">Type de contrat à résoudre.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Appelle <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> en passant l'argument de type donné et en utilisant Null pour l'argument de nom.</summary>
      <returns>Toutes les dépendances résolues ou un <see cref="T:System.Collections.Generic.IEnumerable`1" /> si aucun service n'a été résolu.</returns>
      <param name="resolver">Programme de résolution à utiliser.</param>
      <param name="type">Type de contrat à résoudre.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>Implémentation de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> utilisée pour résoudre les fabriques de <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />.</summary>
      <typeparam name="T">Type de stratégie d'exécution résolu.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" />.</summary>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel cette stratégie d'exécution est utilisée.</param>
      <param name="serverName">Chaîne qui sera comparée au nom du serveur dans la chaîne de connexion.null correspond à tout.</param>
      <param name="getExecutionStrategy">Fonction qui retourne une nouvelle instance d'une stratégie d'exécution.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>Si le type spécifié est <see cref="T:System.Func`1" />, ce programme de résolution tentera de retourner le service à utiliser, sinon il retournera Null.Lorsque le type donné est Func{IExecutionStrategy}, alors la clé doit être un <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>
        <see cref="T:System.Func`1" /> ou null.</returns>
      <param name="type">Type de service à résoudre.</param>
      <param name="key">Clé utilisée pour déterminer le service à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>Si le type spécifié est <see cref="T:System.Func`1" />, ce programme de résolution tentera de retourner le service à utiliser, sinon il retournera une énumération vide.Lorsque le type donné est Func{IExecutionStrategy}, alors la clé doit être un <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Énumérable de <see cref="T:System.Func`1" /> ou énumération vide.</returns>
      <param name="type">Type de service à résoudre.</param>
      <param name="key">Clé utilisée pour déterminer le service à retourner.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>Cette interface est implémentée par un objet qui peut résoudre une dépendance, soit directement, soit en utilisant un conteneur externe.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>Tente de résoudre une dépendance pour un type donné de contrat donné et éventuellement une clé spécifique.Si le programme de résolution ne peut pas résoudre la dépendance, il doit retourner la valeur Null et ne pas lever une exception.Cela permet d'utiliser les programmes de résolution dans un modèle de chaîne de responsabilité de sorte que plusieurs programmes de résolution puissent être invités à résoudre une dépendance jusqu'à ce qu'un d'eux la résolve.</summary>
      <returns>Dépendance résolue, qui doit être une instance du type de contrat donné, ou Null si la dépendance n'a pas pu être résolue.</returns>
      <param name="type">Interface ou classe de base abstraite qui définit la dépendance à résoudre.L'objet retourné doit être une instance de ce type.</param>
      <param name="key">Éventuellement, clé de la dépendance à résoudre.Peut avoir la valeur Null pour les dépendances qui ne sont pas différenciées par la clé.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>Tente de résoudre des dépendances pour un type donné de contrat et éventuellement une clé spécifique.Si le programme de résolution ne peut pas résoudre la dépendance, il doit retourner une énumération vide et ne pas lever d'exception.Cette méthode diffère de <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />, car elle retourne tous les services inscrits pour la combinaison de clé et de type donnée.</summary>
      <returns>Tous les services qui résolvent la dépendance, qui doivent être des instances du type de contrat donné, ou une énumération vide si la dépendance n'a pas pu être résolue.</returns>
      <param name="type">Interface ou classe de base abstraite qui définit la dépendance à résoudre.Chaque objet retourné doit être une instance de ce type.</param>
      <param name="key">Éventuellement, clé de la dépendance à résoudre.Peut avoir la valeur Null pour les dépendances qui ne sont pas différenciées par la clé.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>Implémente un <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> pour résoudre une dépendance de sorte qu'elle retourne toujours la même instance.</summary>
      <typeparam name="T">Type qui définit le contrat de la dépendance résolue.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>Construit un nouveau programme de résolution qui retourne l'instance donnée pour le type de contrat indépendamment de la clé passée à la méthode Get.</summary>
      <param name="singletonInstance">Instance à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>Construit un nouveau programme de résolution qui retourne l'instance donnée pour le type de contrat si la clé spécifiée correspond exactement à la clé passée à la méthode Get, en fonction du prédicat donné.</summary>
      <param name="singletonInstance">Instance à retourner.</param>
      <param name="keyPredicate">Prédicat qui accepte l'objet de clé et retourne True si, et seulement si, il existe une correspondance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>Construit un nouveau programme de résolution qui retourne l'instance donnée pour le type de contrat si la clé correspond exactement à la clé passée à la méthode Get.</summary>
      <param name="singletonInstance">Instance à retourner.</param>
      <param name="key">Éventuellement, clé de la dépendance à résoudre.Peut avoir la valeur Null pour les dépendances qui ne sont pas différenciées par la clé.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
      <summary>Tente de résoudre une dépendance pour un type donné de contrat donné et éventuellement une clé spécifique.Si le programme de résolution ne peut pas résoudre la dépendance, il doit retourner la valeur Null et ne pas lever une exception.Cela permet d'utiliser les programmes de résolution dans un modèle de chaîne de responsabilité de sorte que plusieurs programmes de résolution puissent être invités à résoudre une dépendance jusqu'à ce qu'un d'eux la résolve.</summary>
      <returns>Dépendance résolue, qui doit être une instance du type de contrat donné, ou Null si la dépendance n'a pas pu être résolue.</returns>
      <param name="type">Interface ou classe de base abstraite qui définit la dépendance à résoudre.L'objet retourné doit être une instance de ce type.</param>
      <param name="key">Éventuellement, clé de la dépendance à résoudre.Peut avoir la valeur Null pour les dépendances qui ne sont pas différenciées par la clé.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
      <summary>Tente de résoudre des dépendances pour un type donné de contrat et éventuellement une clé spécifique.Si le programme de résolution ne peut pas résoudre la dépendance, il doit retourner une énumération vide et ne pas lever d'exception.</summary>
      <returns>Tous les services qui résolvent la dépendance, qui doivent être des instances du type de contrat donné, ou une énumération vide si la dépendance n'a pas pu être résolue.</returns>
      <param name="type">Interface ou classe de base abstraite qui définit la dépendance à résoudre.Chaque objet retourné doit être une instance de ce type.</param>
      <param name="key">Éventuellement, clé de la dépendance à résoudre.Peut avoir la valeur Null pour les dépendances qui ne sont pas différenciées par la clé.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
      <summary>Représente une implémentation de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> utilisée pour résoudre les fabriques de <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver" />.</summary>
      <param name="transactionHandlerFactory">Fonction qui retourne une nouvelle instance d'un gestionnaire de transactions.</param>
      <param name="providerInvariantName">Nom invariant de fournisseur ADO.NET qui indique le type de connexion ADO.NET pour lequel le gestionnaire de transactions sera utilisé.null correspond à tout.</param>
      <param name="serverName">Chaîne qui sera comparée au nom du serveur dans la chaîne de connexion.null correspond à tout.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet auquel comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
      <summary>Récupère le code de hachage de l'instance d'objet.</summary>
      <returns>Code de hachage de l'instance d'objet.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
      <summary>Si le type spécifié est <see cref="T:System.Func`1" />, cette méthode tentera de retourner le service à utiliser, sinon il retournera null.Lorsque le type donné est <see cref="T:System.Func`1" />, alors la clé doit être un <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>
        <see cref="T:System.Func`1" /> ou null.</returns>
      <param name="type">Type de service à résoudre.</param>
      <param name="key">Clé utilisée pour déterminer le service à retourner.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
      <summary>Si le type spécifié est <see cref="T:System.Func`1" />, ce programme de résolution tentera de retourner le service à utiliser, sinon il retournera une énumération vide.Lorsque le type donné est <see cref="T:System.Func`1" />, alors la clé doit être un <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Énumérable de <see cref="T:System.Func`1" /> ou énumération vide.</returns>
      <param name="type">Type de service à résoudre.</param>
      <param name="key">Clé utilisée pour déterminer le service à retourner.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Design.AppConfigReader">
      <summary>Fournit des méthodes utilitaires pour la lecture d'un fichier App.config ou Web.config.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.#ctor(System.Configuration.Configuration)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.Infrastructure.Design.AppConfigReader" />.</summary>
      <param name="configuration">Configuration à lire.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.GetProviderServices(System.String)">
      <summary>Obtient les services fournisseurs spécifiés à partir de la configuration.</summary>
      <returns>Nom de type des services fournisseurs, ou null s'ils sont introuvables.</returns>
      <param name="invariantName">Nom invariant des services fournisseurs.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>Représente une vue de mappage.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> avec l'Entity SQL spécifié.</summary>
      <param name="entitySql">Chaîne qui spécifie l'Entity SQL.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>Obtient l'Entity SQL.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>Représente la classe de base abstraite pour les implémentations de caches d'affichages de mappage.Les classes dérivées doivent avoir un constructeur sans paramètre si elles sont utilisées avec <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Obtient une vue correspondant à l'étendue spécifiée.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> qui spécifie la vue de mappage, ou valeur Null si l'étendue n'est pas associée à une vue de mappage.</returns>
      <param name="extent">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> qui spécifie l'étendue.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>Obtient une valeur de hachage calculée à la clôture de mappage.</summary>
      <returns>Valeur de hachage calculée à la clôture du mappage.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>Spécifie les moyens de créer des instances <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> concrètes.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>Crée une instance de cache d'affichages généré pour le mappage de conteneur spécifié par les noms des conteneurs mappés.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> qui spécifie le cache d'affichages généré.</returns>
      <param name="conceptualModelContainerName">Nom d'un conteneur dans le modèle conceptuel.</param>
      <param name="storeModelContainerName">Nom d'un conteneur dans le modèle de magasin.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>Définit un attribut personnalisé qui spécifie le type de cache d'affichages de mappage (sous-classe de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />) associé à un type de contexte (sous-classe de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> ou de <see cref="T:System.Data.Entity.DbContext" />).Le type de cache est instancié au moment de l'exécution et utilisé pour récupérer les vues prégénérées dans le contexte correspondant.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> qui associe un type de contexte à un type de cache d'affichages de mappage.</summary>
      <param name="contextType">Sous-classe de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> ou de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheTypeName">Nom d'assembly complet du type de cache.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> qui associe un type de contexte à un type de cache d'affichages de mappage.</summary>
      <param name="contextType">Sous-classe de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> ou de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheType">Sous-classe de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>Représente un terme de pluralisation personnalisé devant être utilisé par <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /></summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>Crée une nouvelle instance</summary>
      <param name="singular">Chaîne vide ou non-Null représentant le singulier.</param>
      <param name="plural">Chaîne vide ou non-Null représentant le pluriel.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>Obtient le pluriel.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>Obtient le singulier.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>Implémentation du service de pluralisation par défaut devant être utilisée par Entity Framework.Ce service de pluralisation est basé sur les paramètres régionaux anglais.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>Construit une nouvelle instance du service de pluralisation par défaut utilisé dans Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>Construit une nouvelle instance du service de pluralisation par défaut utilisé dans Entity Framework.</summary>
      <param name="userDictionaryEntries">Collection d'entrées du dictionnaire utilisateur devant être utilisée par ce service. Ces entrées peuvent personnaliser le service en fonction des besoins de l'utilisateur.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>Retourne la forme plurielle du mot spécifié.</summary>
      <returns>Forme plurielle du paramètre d'entrée.</returns>
      <param name="word">Mot à rendre pluriel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>Retourne la forme singulière du mot spécifié.</summary>
      <returns>Forme au singulier du paramètre d'entrée.</returns>
      <param name="word">Mot à rendre singulier.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>Services de pluralisation devant être utilisés par le runtime Entity Framework pour implémenter cette interface.Par défaut, <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /> est utilisé, mais le service de pluralisation à utiliser peut être défini dans une classe dérivée de <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>Met un terme au pluriel à l'aide du service.</summary>
      <returns>Terme au pluriel.</returns>
      <param name="word">Terme à mettre au pluriel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>Met un terme au singulier à l'aide du service.</summary>
      <returns>Terme au singulier.</returns>
      <param name="word">Terme à mettre au singulier.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Représente la classe de base pour les migrations basées sur le code.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Ajoute une opération pour ajouter une colonne à une table existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table à laquelle la colonne doit être ajoutée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de la colonne à ajouter.</param>
      <param name="columnAction">Action qui indique la colonne à ajouter.par exemplec =&gt; c.Int(nullable: false, defaultValue: 3)</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>Ajoute une opération pour créer une contrainte de clé étrangère.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="dependentTable">Table qui contient la colonne de clé étrangère.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="dependentColumn">Colonne de clé étrangère.</param>
      <param name="principalTable">Table qui contient la colonne à laquelle cette clé étrangère fait référence.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="principalColumn">Colonne à laquelle cette clé étrangère fait référence.Si aucune valeur n'est fournie, la clé primaire de la table principale est référencée.</param>
      <param name="cascadeDelete">Valeur indiquant si la suppression en cascade doit être configurée pour la relation de clé étrangère.Si aucune valeur n'est fournie, la suppression en cascade est désactivée.</param>
      <param name="name">Nom de la contrainte de clé étrangère dans la base de données.Si aucune valeur n'est fournie, un nom unique est généré.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>Ajoute une opération pour créer une contrainte de clé étrangère.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="dependentTable">Table qui contient les colonnes de clé étrangère.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="dependentColumns">Colonnes de clé étrangère.</param>
      <param name="principalTable">Table qui contient les colonnes auxquelles cette clé étrangère fait référence.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="principalColumns">Colonnes auxquelles cette clé étrangère fait référence.Si aucune valeur n'est fournie, la clé primaire de la table principale est référencée.</param>
      <param name="cascadeDelete">Valeur indiquant si la suppression en cascade doit être configurée pour la relation de clé étrangère.Si aucune valeur n'est fournie, la suppression en cascade est désactivée.</param>
      <param name="name">Nom de la contrainte de clé étrangère dans la base de données.Si aucune valeur n'est fournie, un nom unique est généré.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>Ajoute une opération pour créer une clé primaire.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Table qui contient la colonne de clé primaire.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="column">Colonne de clé primaire.</param>
      <param name="name">Nom de la clé primaire dans la base de données.Si aucune valeur n'est fournie, un nom unique est généré.</param>
      <param name="clustered">Valeur indiquant s'il s'agit d'une clé primaire en cluster.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>Ajoute une opération pour créer une clé primaire basée sur plusieurs colonnes.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Table qui contient les colonnes de clé primaire.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="columns">Colonnes de clé primaire.</param>
      <param name="name">Nom de la clé primaire dans la base de données.Si aucune valeur n'est fournie, un nom unique est généré.</param>
      <param name="clustered">Valeur indiquant s'il s'agit d'une clé primaire en cluster.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Ajoute une opération pour modifier la définition d'une colonne existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne existe.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de la colonne à modifier.</param>
      <param name="columnAction">Action qui spécifie la nouvelle définition de la colonne.par exemplec =&gt; c.String(nullable: false, defaultValue: "none")</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Ajoute une opération pour modifier une procédure stockée.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="parametersAction">Action qui spécifie les paramètres de la procédure stockée.</param>
      <param name="body">Corps de la procédure stockée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments.Par exemple, 'new { SampleArgument = « Mavaleur »}'.</param>
      <typeparam name="TParameters">Paramètres de cette opération de modification de procédure stockée.Vous n'avez pas besoin de spécifier ce type, il est déduit du paramètre <paramref name="parametersAction" /> que vous fournissez.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour modifier une procédure stockée.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="body">Corps de la procédure stockée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments.Par exemple, 'new { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Ajoute une opération pour gérer les modifications dans les annotations définies sur les tables.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="columnsAction">Action qui spécifie les colonnes à inclure dans la table.par exemplet =&gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Annotations personnalisées sur la table qui ont changé.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
      <typeparam name="TColumns">Colonnes de cette opération.Vous n'avez pas besoin de spécifier ce type, il est déduit du paramètre columnsAction que vous fournissez.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Ajoute une opération pour créer un index sur une seule colonne.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table sur laquelle l'index doit être créé.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="column">Nom de la colonne sur laquelle l'index doit être créé.</param>
      <param name="unique">Valeur indiquant s'il s'agit d'un index unique.Si aucune valeur n'est fournie, un index non unique est créé.</param>
      <param name="name">Nom à utiliser pour l'index dans la base de données.Si aucune valeur n'est fournie, un nom unique est généré.</param>
      <param name="clustered">Valeur indiquant s'il s'agit d'un index cluster.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Ajoute une opération pour créer un index sur plusieurs colonnes.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table sur laquelle l'index doit être créé.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="columns">Nom des colonnes sur lesquelles l'index doit être créé.</param>
      <param name="unique">Valeur indiquant s'il s'agit d'un index unique.Si aucune valeur n'est fournie, un index non unique est créé.</param>
      <param name="name">Nom à utiliser pour l'index dans la base de données.Si aucune valeur n'est fournie, un nom unique est généré.</param>
      <param name="clustered">Valeur indiquant s'il s'agit d'un index cluster.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Ajoute une opération pour créer une procédure stockée.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="parametersAction">Action qui spécifie les paramètres de la procédure stockée.</param>
      <param name="body">Corps de la procédure stockée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments.Par exemple, 'new { SampleArgument = « Mavaleur »}'.</param>
      <typeparam name="TParameters">Paramètres de cette opération de création de procédure stockée.Vous n'avez pas besoin de spécifier ce type, il est déduit du paramètre <paramref name="parametersAction" /> que vous fournissez.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour créer une procédure stockée.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="body">Corps de la procédure stockée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments.Par exemple, 'new { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Ajoute une opération pour créer une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Objet permettant une configuration plus avancée de l'opération de création de table.</returns>
      <param name="name">Nom de la table.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="columnsAction">Action qui spécifie les colonnes à inclure dans la table.par exemplet =&gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Annotations personnalisées qui existent sur la table à créer.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
      <typeparam name="TColumns">Colonnes de cette opération de création de table.Vous n'avez pas besoin de spécifier ce type, il est déduit du paramètre columnsAction que vous fournissez.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>Ajoute une opération pour créer une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Objet permettant une configuration plus avancée de l'opération de création de table.</returns>
      <param name="name">Nom de la table.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="columnsAction">Action qui spécifie les colonnes à inclure dans la table.par exemplet =&gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
      <typeparam name="TColumns">Colonnes de cette opération de création de table.Vous n'avez pas besoin de spécifier ce type, il est déduit du paramètre columnsAction que vous fournissez.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>Opérations à effectuer au cours du processus de rétrogradation.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Ajoute une opération pour supprimer une colonne existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="removedAnnotations">Annotations personnalisées qui existent sur la colonne en cours de suppression.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une colonne existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une contrainte de clé étrangère en fonction de son nom.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="dependentTable">Table qui contient la colonne de clé étrangère.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de la contrainte de clé étrangère dans la base de données.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une contrainte de clé étrangère en fonction de la colonne ciblée.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="dependentTable">Table qui contient la colonne de clé étrangère.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="dependentColumn">Colonne de clé étrangère.</param>
      <param name="principalTable">Table qui contient la colonne à laquelle cette clé étrangère fait référence.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une contrainte de clé étrangère en fonction de la colonne ciblée.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="dependentTable">Table qui contient la colonne de clé étrangère.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="dependentColumn">Colonne de clé étrangère.</param>
      <param name="principalTable">Table qui contient la colonne à laquelle cette clé étrangère fait référence.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="principalColumn">Colonnes auxquelles cette clé étrangère fait référence.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une contrainte de clé étrangère en fonction des colonnes ciblées.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="dependentTable">Table qui contient les colonnes de clé étrangère.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="dependentColumns">Colonnes de clé étrangère.</param>
      <param name="principalTable">Table qui contient les colonnes auxquelles cette clé étrangère fait référence.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer un index en fonction de son nom.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle l'index doit être supprimé.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de l'index à supprimer.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>Ajoute une opération pour supprimer un index en fonction des colonnes ciblées.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle l'index doit être supprimé.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="columns">Nom de la ou des colonnes ciblées par l'index.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une clé primaire existante qui a été créée avec le nom par défaut.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Table qui contient la colonne de clé primaire.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une clé primaire existante n'ayant pas le nom par défaut.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Table qui contient la colonne de clé primaire.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de la clé primaire à supprimer.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une procédure stockée existante portant le nom spécifié.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure à supprimer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments.Par exemple, 'new { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Ajoute une opération pour supprimer une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="removedColumnAnnotations">Annotations personnalisées qui existent sur les colonnes de la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Ajoute une opération pour supprimer une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="removedAnnotations">Annotations personnalisées qui existent sur la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="removedColumnAnnotations">Annotations personnalisées qui existent sur les colonnes de la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Ajoute une opération pour supprimer une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="removedAnnotations">Annotations personnalisées qui existent sur la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>Ajoute une opération pour supprimer une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Détermine si cette instance est égale à l'objet spécifié.</summary>
      <returns>true si l'objet spécifié est égal à l'instance actuelle ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'instance actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Retourne la fonction de hachage pour l'objet actif.</summary>
      <returns>Fonction de hachage de l'objet actif.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Retourne le type d'exécution de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet actuel.</summary>
      <returns>Copie superficielle de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour déplacer une procédure stockée vers un nouveau schéma.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée à déplacer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="newSchema">Schéma vers lequel la procédure stockée doit être déplacée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour déplacer une table vers un nouveau schéma.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à déplacer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="newSchema">Schéma vers lequel la table doit être déplacée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour renommer une colonne.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table qui contient la colonne à renommer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de la colonne à renommer.</param>
      <param name="newName">Nouveau nom de la colonne.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour renommer un index.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table qui contient l'index à renommer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="name">Nom de l'index à renommer.</param>
      <param name="newName">Nouveau nom de l'index.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour renommer une procédure stockée.Pour changer le schéma d'une procédure stockée utilisez MoveStoredProcedure. Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée à renommer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="newName">Nouveau nom de la procédure stockée.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>Ajoute une opération pour renommer une table.Pour modifier le schéma d'une table, utilisez MoveTable.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à renommer.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="newName">Nouveau nom de la table.Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>Ajoute une opération pour exécuter une commande SQL.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="sql">Commande SQL à exécuter.</param>
      <param name="suppressTransaction">Valeur indiquant si la commande SQL doit être exécutée hors de la transaction utilisée pour le processus de migration.Si aucune valeur n'est fournie, la commande SQL est exécutée au sein de la transaction.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
      <summary>Ajoute une opération pour exécuter un fichier SQL.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="sqlFile">Fichier SQL à exécuter.Les chemins d'accès relatifs sont censés être relatifs par rapport au BaseDirectory de l'AppDomain actuel.</param>
      <param name="suppressTransaction">Valeur indiquant si la commande SQL doit être exécutée hors de la transaction utilisée pour le processus de migration.Si aucune valeur n'est fournie, la commande SQL est exécutée au sein de la transaction.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
      <summary>Ajoute une opération pour exécuter un fichier de ressource SQL.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="sqlResource">Nom de la ressource de manifeste du fichier de ressources SQL à exécuter.</param>
      <param name="resourceAssembly">Assembly qui contient le fichier de ressources.L'assembly appelant est utilisé par défaut, s'il n'est pas fourni.</param>
      <param name="suppressTransaction">Valeur indiquant si la commande SQL doit être exécutée hors de la transaction utilisée pour le processus de migration.Si aucune valeur n'est fournie, la commande SQL est exécutée au sein de la transaction.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Ajoute une opération de migration.</summary>
      <param name="migrationOperation">Opération de migration à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>Opérations à effectuer au cours du processus de mise à niveau.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Configuration liée à l'utilisation des migrations pour un modèle spécifique.Vous créez généralement une classe de configuration dérivée de <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> au lieu d'utiliser cette classe.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe DbMigrationsConfiguration.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>Obtient ou définit une valeur indiquant si la perte de données est acceptable pendant la migration automatique.Si elle est définie sur false, une exception est levée si une perte de données risque de se produire dans le cadre d'une migration automatique.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>Obtient ou définit une valeur indiquant si les migrations automatiques peuvent être utilisées lors de la migration de la base de données.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>Obtient ou définit le nom du générateur de code à utiliser lors de la génération de modèles automatiques pour les migrations.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>Obtient ou définit la valeur de délai d'attente utilisée pour les commandes individuelles dans une migration.Une valeur Null indique que la valeur par défaut du fournisseur sous-jacent sera utilisée.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>Obtient ou définit la chaîne utilisée pour faire la distinction entre les migrations appartenant à cette configuration des migrations appartenant à d'autres configurations utilisant la même base de données.Cette propriété permet aux migrations issue de plusieurs modèles différents de s'appliquer à une base de données unique.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>Obtient ou définit le DbContext dérivé représentant le modèle à migrer.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>Répertoire par défaut dans lequel les migrations sont stockées.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>Obtient la fabrique de contexte historique définie pour un fournisseur de bases de données spécifique.</summary>
      <returns>Fabrique de contexte historique définie pour le fournisseur de base de données.</returns>
      <param name="providerInvariantName">Nom du fournisseur de bases de données pour lequel la fabrique doit être obtenue.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>Obtient le générateur de SQL défini pour une utilisation avec un fournisseur de base de données spécifique.</summary>
      <returns>Générateur de SQL défini pour le fournisseur de base de données.</returns>
      <param name="providerInvariantName">Nom du fournisseur de base de données pour lequel le générateur de SQL doit être obtenu.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>Obtient ou définit l'assembly contenant les migrations basées sur le code.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>Obtient ou définit le sous-répertoire dans lequel les migrations basées sur le code sont stockées.Notez que cette propriété doit avoir pour valeur un chemin d'accès relatif d'un sous-répertoire sous la racine du projet Visual Studio ; elle ne peut pas avoir pour valeur un chemin d'accès absolu.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>Obtient ou définit l'espace de noms utilisé pour les migrations basées sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Ajoute une nouvelle fabrique pour créer des instances de <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> pour un fournisseur de bases de données spécifique.</summary>
      <param name="providerInvariantName">Nom du fournisseur de base de données pour lequel le générateur de SQL doit être défini.</param>
      <param name="factory">Fabrique pour créer des instances de <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> pour un <see cref="T:System.Data.Common.DbConnection" /> et un <see cref="T:System.String" /> qui représentent le schéma par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>Ajoute un générateur de SQL à utiliser pour un fournisseur de base de données spécifique.</summary>
      <param name="providerInvariantName">Nom du fournisseur de base de données pour lequel le générateur de SQL doit être défini.</param>
      <param name="migrationSqlGenerator">Générateur de SQL à utiliser.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>Obtient ou définit une valeur permettant de remplacer la connexion de la base de données à migrer.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Configuration liée à l'utilisation des migrations pour un modèle spécifique.</summary>
      <typeparam name="TContext">Contexte représentant le modèle auquel cette configuration s'applique.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe DbMigrationsConfiguration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Détermine si la configuration actuelle est égale à l'objet spécifié.</summary>
      <returns>true si la configuration actuelle est égale à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer à la configuration actuelle.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Obtient la fonction de hachage de cette instance.</summary>
      <returns>Fonction de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Retourne le type d'exécution de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet actuel.</summary>
      <returns>Copie superficielle de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>Exécution après la mise à niveau vers la migration la plus récente afin de permettre la mise à jour des données initiales.</summary>
      <param name="context">Contexte à utiliser pour mettre à jour les données initiales.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cette configuration.</summary>
      <returns>Représentation sous forme de chaîne de cette configuration.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>DbMigrator est utilisé pour appliquer les migrations existantes à une base de données.Cette classe peut être utilisée pour mettre à niveau et rétrograder une migration spécifique.Pour générer des modèles automatiques des migrations en fonction de modifications apportées à votre modèle, utilisez <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Initialise une nouvelle instance de la classe DbMigrator.</summary>
      <param name="configuration">Configuration à utiliser pour le processus de migration.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>Obtient la configuration utilisée pour le processus de migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>Obtient toutes les migrations qui ont été appliquées à la base de données cible.</summary>
      <returns>Liste des migrations.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>Obtient toutes les migrations qui sont définies dans l'assembly des migrations configurées.</summary>
      <returns>Liste des migrations.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>Obtient toutes les migrations qui sont définies dans l'assembly, mais qui n'ont pas encore été appliquées à la base de données cible.</summary>
      <returns>Liste des migrations.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>ID de migration représentant l'état de la base de données avant l'application de toute migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>Met à jour la base de données cible vers une migration spécifique.</summary>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à niveau ou rétrogradation.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>Jeu de méthodes d'extension pour <see cref="T:System.Data.Entity.IDbSet`1" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Ajoute ou met à jour les entités selon une expression d'identification personnalisée lorsque SaveChanges est appelé.Équivaut à une opération « upsert » dans la terminologie de base de données.Cette méthode peut être utile lors de l'alimentation des données à l'aide des migrations.</summary>
      <param name="set">Jeu auquel appartiennent les entités.</param>
      <param name="identifierExpression">Expression spécifiant les propriétés à utiliser afin d'indiquer si une opération d'ajout ou de mise à jour doit être exécutée.</param>
      <param name="entities">Entités à ajouter ou mettre à jour.</param>
      <typeparam name="TEntity">Type d'entités à ajouter ou à mettre à jour.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Ajoute ou met à jour les entités par clé lorsque SaveChanges est appelé.Équivaut à une opération « upsert » dans la terminologie de base de données.Cette méthode peut être utile lors de l'alimentation des données à l'aide des migrations.</summary>
      <param name="set">Jeu auquel appartiennent les entités.</param>
      <param name="entities">Entités à ajouter ou mettre à jour.</param>
      <typeparam name="TEntity">Type d'entités à ajouter ou à mettre à jour.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Classe d'assistance utilisée pour configurer une colonne.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données binaires.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="maxLength">Longueur maximale autorisée des données de tableau.</param>
      <param name="fixedLength">Valeur indiquant si toutes les données doivent être complétées ou non jusqu'à la longueur maximale.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="timestamp">Valeur indiquant si cette colonne doit être configurée comme un horodatage ou non.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données booléennes.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type Byte.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type date et heure (DateTime).Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type DateTimeOffset.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données décimales.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision numérique de la colonne.</param>
      <param name="scale">Échelle numérique de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type Double.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Indique si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données géographiques.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données géométriques.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type GUID.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type Integer.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type Long.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</summary>
      <returns>Copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type Short.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type Single.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type chaîne (String).Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="maxLength">Longueur maximale autorisée des données de type chaîne.</param>
      <param name="fixedLength">Valeur indiquant si toutes les données doivent être complétées ou non jusqu'à la longueur maximale.</param>
      <param name="unicode">Valeur indiquant si la colonne prend en charge ou non le contenu de chaîne Unicode.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crée une définition de colonne pour stocker des données de type heure (Time).Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="annotations">Annotations personnalisées issues généralement du modèle Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>Représente une classe utilisée pour configurer un paramètre.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Builders.ParameterBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données binaires.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="maxLength">Longueur maximale autorisée des données de tableau.</param>
      <param name="fixedLength">Valeur indiquant si toutes les données doivent être complétées ou non jusqu'à la longueur maximale.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données booléennes.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Byte.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type DateTime.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="precision">Précision du paramètre.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type DateTimeOffset.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="precision">Précision du paramètre.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Decimal.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="precision">Précision numérique du paramètre.</param>
      <param name="scale">Échelle numérique du paramètre.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Double.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifique.</summary>
      <returns>true si cette instance est identique à un objet spécifique ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type geography.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type geometry.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
      <summary>Obtient le code de hachage associé à cette instance.</summary>
      <returns>Code de hachage associé à cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type GUID.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Integer.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Long.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</summary>
      <returns>Copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Short.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Single.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type String.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="maxLength">Longueur maximale autorisée des données de type chaîne.</param>
      <param name="fixedLength">Valeur indiquant si toutes les données doivent être complétées ou non jusqu'à la longueur maximale.</param>
      <param name="unicode">Valeur indiquant si le paramètre prend en charge, ou non, le contenu Unicode.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de paramètre pour transmettre les données de type Time.</summary>
      <returns>Définition de paramètre venant d'être construite.</returns>
      <param name="precision">Précision du paramètre.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de ce paramètre.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de ce paramètre.</param>
      <param name="name">Nom du paramètre.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour ce paramètre.</param>
      <param name="outParameter">Valeur indiquant si le paramètre est un paramètre de sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Classe d'assistance utilisée pour configurer davantage une table créée à partir d'un appel de CreateTable sur <see cref="T:System.Data.Entity.Migrations.DbMigration" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <typeparam name="TColumns">Type représentant les colonnes de la table.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Initialise une nouvelle instance de la classe TableBuilder.</summary>
      <param name="createTableOperation">Opération de création de table à configurer davantage.</param>
      <param name="migration">Migration dans le cadre de laquelle la table est créée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Spécifie une contrainte de clé étrangère à créer sur la table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Valeur elle-même, si bien que plusieurs appels peuvent être chaînés.</returns>
      <param name="principalTable">Nom de la table ciblée par la contrainte de clé étrangère.</param>
      <param name="dependentKeyExpression">Expression lambda représentant les propriétés de la clé étrangère.C# : t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Si la clé étrangère se compose de plusieurs propriétés, spécifiez un type anonyme incluant les diverses propriétés.C# : t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">Valeur indiquant si la suppression en cascade doit être configurée ou non sur la contrainte de clé étrangère.</param>
      <param name="name">Nom de cette contrainte de clé étrangère.Si aucun nom n'est fourni, un nom par défaut est déterminé.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Obtient le code de hachage de l'objet actuel.</summary>
      <returns>Code de hachage de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
      <summary>Spécifie un index à créer sur la table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Valeur elle-même, si bien que plusieurs appels peuvent être chaînés.</returns>
      <param name="indexExpression">Expression lambda représentant la propriété à indexer.C# : t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Si plusieurs propriétés doivent être indexées, spécifiez un type anonyme incluant les diverses propriétés.C# : t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="name">Nom de l'index.</param>
      <param name="unique">Valeur indiquant s'il s'agit d'un index unique ou non.</param>
      <param name="clustered">Valeur indiquant s'il s'agit d'un index cluster.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</summary>
      <returns>Copie superficielle de l'objet <see cref="T:System.Object" /> actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>Spécifie une clé primaire pour la table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Valeur elle-même, si bien que plusieurs appels peuvent être chaînés.</returns>
      <param name="keyExpression">Expression lambda représentant la propriété à utiliser comme clé primaire.C# : t =&amp;gt; t.Id VB.Net: Function(t) t.Id Si la clé primaire se compose de plusieurs propriétés, spécifiez un type anonyme incluant les diverses propriétés.C# : t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <param name="name">Nom de la clé primaire.Si une valeur Null est fournie, un nom par défaut est généré.</param>
      <param name="clustered">Valeur indiquant s'il s'agit d'une clé primaire en cluster.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Retourne une chaîne représentant l'objet actuel.</summary>
      <returns>Représentation sous forme de chaîne de l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Génère le code C# d'une migration basée sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:byte[]" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Génère le fichier de code principal que l'utilisateur peut afficher et modifier.</summary>
      <returns>Code généré.</returns>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant de spécifier un ensemble de noms de colonnes à l'aide d'une expression lambda.</summary>
      <param name="columns">Colonnes pour lesquelles le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour un <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Opération pour laquelle du code doit être généré.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère le code permettant de spécifier la définition d'un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Définition de colonne pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="emitName">Valeur indiquant si le nom de la colonne doit être inclus dans la définition.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère le code permettant de spécifier la définition d'un <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
      <param name="parameterModel">Définition de paramètre pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="emitName">Valeur indiquant si le nom de la colonne doit être inclus dans la définition.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTime" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Decimal" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Guid" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Int64" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne dont le type de données est inconnu.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Single" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.String" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="operations">Opération pour laquelle le code doit être généré.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec les métadonnées de migration.</summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.TimeSpan" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour la valeur d'annotation donnée, laquelle peut être Null.Le comportement par défaut consiste à utiliser un <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> si un élément de ce type est inscrit ; sinon, appelez ToString sur la valeur d'annotation.</summary>
      <param name="name">Nom de l'annotation pour laquelle du code est nécessaire.</param>
      <param name="annotation">Valeur d'annotation à générer.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour recréer le dictionnaire donné des annotations à utiliser lors de la transmission de ces annotations en tant que paramètre d'un appel à <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Annotations à générer.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour recréer le dictionnaire donné des annotations à utiliser lors de la transmission de ces annotations en tant que paramètre d'un appel à <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Annotations à générer.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Met entre guillemets un identificateur en utilisant l'échappement approprié pour lui permettre d'être stocké dans une chaîne.</summary>
      <returns>Identificateur entre guillemets.</returns>
      <param name="identifier">Identificateur à mettre entre guillemets.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Supprime les caractères non valides du nom d'un artefact de base de données.</summary>
      <returns>Nom modifié.</returns>
      <param name="name">Nom à modifier.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Obtient le nom de type à utiliser pour une colonne du type de données spécifique.</summary>
      <returns>Nom de type à utiliser dans la migration générée.</returns>
      <param name="primitiveTypeKind">Type de données à traduire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère les attributs de classe.</summary>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code de fermeture d'une classe qui commençait par WriteClassStart.</summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Génère un espace de noms en utilisant des instructions et une définition de classe.</summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="base">Classe de base de la classe générée.</param>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
      <param name="namespaces">Espaces de noms pour lesquels des directives d'utilisation seront ajoutées.Si la valeur est Null, les espaces de noms retournés par GetDefaultNamespaces sont utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère une propriété pour retourner le modèle source ou le modèle cible dans le fichier code-behind.</summary>
      <param name="name">Nom de la propriété.</param>
      <param name="value">Valeur à retourner.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Classe de base pour les fournisseurs qui génèrent le code des migrations basées sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
      <summary>Obtient les instances de <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> en cours d'utilisation.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Génère le code qui doit être ajouté au projet utilisateur.</summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>Obtient les espaces de noms par défaut qui doivent être affichés en sortie comme directives d'utilisation ou d'importation pour tout code généré.</summary>
      <returns>Liste ordonnée de noms d'espaces de noms.</returns>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Obtient les espaces de noms qui doivent être affichés en sortie comme directives d'utilisation ou d'importation pour traiter le code généré par les opérations spécifiques.</summary>
      <returns>Liste ordonnée de noms d'espaces de noms.</returns>
      <param name="operations">Opérations pour lesquelles du code va être généré.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Crée à l'aide de la génération de modèle automatique des migrations basées sur le code pour appliquer les modifications de modèle en attente à la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Initialise une nouvelle instance de la classe MigrationScaffolder.</summary>
      <param name="migrationsConfiguration">Configuration à utiliser pour la génération de modèle automatique.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>Obtient ou définit l'espace de noms utilisé dans le code généré de la migration.Par défaut, cet espace de noms est identique à MigrationsNamespace dans l'objet de configuration des migrations transmis au constructeur.Pour les projets VB.NET, cette valeur doit être mise à jour afin de prendre en compte l'espace de noms racine du projet.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>Crée à l'aide de la génération de modèle automatique une migration basée sur le code pour appliquer toutes les modifications de modèle en attente à la base de données.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="migrationName">Nom à utiliser pour la migration créée à l'aide de la génération de modèle automatique.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Crée à l'aide de la génération de modèle automatique une migration basée sur le code pour appliquer toutes les modifications de modèle en attente à la base de données.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="migrationName">Nom à utiliser pour la migration créée à l'aide de la génération de modèle automatique.</param>
      <param name="ignoreChanges">Indique s'il faut inclure les modifications du modèle.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>Crée à l'aide de la génération de modèle automatique la migration basée sur le code initiale correspondant à un initialiseur de base de données précédemment exécuté.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>Représente une migration basée sur le code qui a été créée à l'aide de la génération de modèle automatique et qui est prête à être écrite dans un fichier.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>Obtient ou définit le code de migration créé à l'aide de la génération de modèle automatique qui doit être stocké dans un fichier code-behind.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>Obtient ou définit le sous-répertoire du projet utilisateur dans lequel cette migration doit être enregistrée.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>Détermine ou définit si la migration a été créée à l'aide de la génération de modèle automatique.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>Obtient ou définit le langage de programmation utilisé pour cette migration.Cette valeur est généralement utilisée pour l'extension de fichier du code généré.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>Obtient ou définit l'identificateur unique de cette migration.Cette valeur est généralement utilisée pour le nom de fichier du code généré.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>Obtient un dictionnaire des ressources de type chaîne à ajouter au fichier des ressources de migration.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>Obtient ou définit le code de migration créé à l'aide de la génération de modèle automatique que l'utilisateur peut modifier.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Classe d'assistance utilisée par les outils au moment de la conception pour exécuter les commandes relatives aux migrations qui doivent interagir avec une application en cours de modification dans Visual Studio.Étant donné que l'application est en cours de modification, les assemblys doivent être chargés dans un AppDomain distinct pour garantir le chargement systématique de la dernière version.Le fichier App/Web.config du projet de démarrage est également copié pour garantir l'application d'une configuration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialise une nouvelle instance de la classe ToolingFacade.</summary>
      <param name="migrationsAssemblyName">Nom de l'assembly qui contient la configuration des migrations à utiliser.</param>
      <param name="contextAssemblyName">Nom de l'assembly qui contient le DbContext à utiliser.</param>
      <param name="configurationTypeName">Nom qualifié de l'espace de noms de la configuration des migrations à utiliser.</param>
      <param name="workingDirectory">Répertoire de travail contenant les assemblys compilés.</param>
      <param name="configurationFilePath">Chemin d'accès au fichier de configuration à partir du projet de démarrage.</param>
      <param name="dataDirectory">Chemin d'accès au répertoire des données d'application à partir du projet de démarrage.Il s'agit généralement du répertoire App_Data pour les applications Web ou du répertoire de travail des exécutables.</param>
      <param name="connectionStringInfo">Connexion à la base de données à migrer.Si une valeur Null est fournie, la connexion par défaut pour le contexte est utilisée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Libère toutes les ressources utilisées par la façade.</summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Libère toutes les ressources non managées utilisées par la façade.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>Obtient le nom complet d'un type dérivé de <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Type de contexte trouvé.</returns>
      <param name="contextTypeName">Nom du type de contexte.Si une référence Null est passée, le seul type de contexte trouvé dans l'assembly est retourné.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Obtient le nom complet de tous les types dérivés de <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Tous les types de contexte trouvés.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Obtient la liste de toutes les migrations qui ont été appliquées à la base de données.</summary>
      <returns>ID des migrations appliquées.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Obtient la liste de toutes les migrations qui n'ont pas été appliquées à la base de données.</summary>
      <returns>ID des migrations en attente.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Obtient ou définit une action à exécuter pour consigner des informations.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Obtient ou définit une action à exécuter pour consigner des informations détaillées.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Obtient ou définit une action à exécuter pour consigner des avertissements.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Crée à l'aide de la génération de modèle automatique une migration basée sur le code pour appliquer toutes les modifications de modèle en attente.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="migrationName">Nom de la migration générée.</param>
      <param name="language">Langage de programmation de la migration générée.</param>
      <param name="rootNamespace">Espace de noms racine du projet auquel la migration va être ajoutée.</param>
      <param name="ignoreChanges">Indique s'il faut inclure les modifications du modèle.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Crée à l'aide de la génération de modèle automatique la migration basée sur le code initiale correspondant à un initialiseur de base de données précédemment exécuté.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="language">Langage de programmation de la migration générée.</param>
      <param name="rootNamespace">Espace de noms racine du projet auquel la migration va être ajoutée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Génère un script SQL pour migrer entre deux migrations.</summary>
      <returns>Script SQL généré.</returns>
      <param name="sourceMigration">Migration à partir de laquelle effectuer la mise à jour.Si une valeur Null est fournie, un script permettant de mettre à jour la base de données en cours est créé.</param>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à jour.Si une valeur Null est fournie, un script permettant d'effectuer la mise à jour vers la dernière migration est créé.</param>
      <param name="force">Valeur indiquant si la perte de données est acceptable pendant la migration automatique.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Met à jour la base de données vers la migration spécifiée.</summary>
      <param name="targetMigration">ID de la migration vers laquelle effectuer la migration.Si une valeur Null est fournie, la base de données est mise à jour vers la dernière migration.</param>
      <param name="force">Valeur indiquant si la perte de données est acceptable pendant la migration automatique.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Génère le code VB.Net d'une migration basée sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:byte[]" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Génère le fichier de code principal que l'utilisateur peut afficher et modifier.</summary>
      <returns>Code généré.</returns>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant de spécifier un ensemble de noms de colonnes à l'aide d'une expression lambda.</summary>
      <param name="columns">Colonnes pour lesquelles le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour un <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Opération pour laquelle du code doit être généré.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère le code permettant de spécifier la définition d'un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Définition de colonne pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="emitName">Valeur indiquant si le nom de la colonne doit être inclus dans la définition.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
      <param name="parameterModel">Définition du modèle de paramètre pour lequel générer le code.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="emitName">true pour inclure le nom de la colonne dans la définition ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTime" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Decimal" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Guid" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Int64" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne dont le type de données est inconnu.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Single" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.String" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec les métadonnées de migration.</summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec les métadonnées de migration.</summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.TimeSpan" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour la valeur d'annotation donnée, laquelle peut être Null.Le comportement par défaut consiste à utiliser un <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> si un élément de ce type est inscrit ; sinon, appelez ToString sur la valeur d'annotation.</summary>
      <param name="name">Nom de l'annotation pour laquelle du code est nécessaire.</param>
      <param name="annotation">Valeur d'annotation à générer.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour recréer le dictionnaire donné des annotations à utiliser lors de la transmission de ces annotations en tant que paramètre d'un appel à <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Annotations à générer.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère du code pour recréer le dictionnaire donné des annotations à utiliser lors de la transmission de ces annotations en tant que paramètre d'un appel à <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Annotations à générer.</param>
      <param name="writer">Enregistreur dans lequel le code généré doit être écrit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>Met entre guillemets un identificateur en utilisant l'échappement approprié pour lui permettre d'être stocké dans une chaîne.</summary>
      <returns>Identificateur entre guillemets.</returns>
      <param name="identifier">Identificateur à mettre entre guillemets.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Supprime les caractères non valides du nom d'un artefact de base de données.</summary>
      <returns>Nom modifié.</returns>
      <param name="name">Nom à modifier.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Obtient le nom de type à utiliser pour une colonne du type de données spécifique.</summary>
      <returns>Nom de type à utiliser dans la migration générée.</returns>
      <param name="primitiveTypeKind">Type de données à traduire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère les attributs de classe.</summary>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code de fermeture d'une classe qui commençait par WriteClassStart.</summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Génère un espace de noms en utilisant des instructions et une définition de classe.</summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="base">Classe de base de la classe générée.</param>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
      <param name="namespaces">Espaces de noms pour lesquels des directives d'importation seront ajoutées.Si la valeur est Null, les espaces de noms retournés par GetDefaultNamespaces sont utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère une propriété pour retourner le modèle source ou le modèle cible dans le fichier code-behind.</summary>
      <param name="name">Nom de la propriété.</param>
      <param name="value">Valeur à retourner.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>Cette classe est utilisée par Migrations Code First pour lire et écrire l'historique des migrations depuis la base de données.Pour personnaliser la définition de la table de l'historique des migrations, vous pouvez dériver de cette classe et remplacer OnModelCreating.Les instances dérivées peuvent être inscrites par configuration des migrations à l'aide de <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />, ou globalement à l'aide de <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>Initialise une nouvelle instance de la classe HistoryContext.Si vous créez un contexte historique dérivé, vous exposez généralement un constructeur qui accepte ces mêmes paramètres et les passe à ce constructeur de base.</summary>
      <param name="existingConnection">Connexion existante à utiliser pour le nouveau contexte.</param>
      <param name="defaultSchema">Schéma par défaut du modèle migré.Ce schéma est utilisé pour la table de l'historique des migrations, sauf si un schéma différent est configuré dans OnModelCreating.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>Obtient la clé utilisée pour rechercher un modèle qui a été généré pour ce contexte.Cela permet d'éviter de traiter OnModelCreating et de calculer le modèle chaque fois qu'une nouvelle instance de contexte est créée.Par défaut, cette propriété retourne le schéma par défaut.Dans la plupart des cas, vous n'avez pas besoin de remplacer cette propriété.Toutefois, si votre implémentation de OnModelCreating contient une logique conditionnelle qui génère un autre modèle pour les mêmes fournisseur de bases de données et schéma par défaut, vous devez remplacer cette propriété et calculer une clé appropriée.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>Obtient le schéma par défaut du modèle migré.Ce schéma est utilisé pour la table de l'historique des migrations, sauf si un schéma différent est configuré dans OnModelCreating.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>Nom par défaut utilisé pour la table de l'historique des migrations.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>Obtient ou définit un <see cref="T:System.Data.Entity.DbSet`1" /> qui peut être utilisé pour lire et écrire les instances <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Applique la configuration par défaut pour la table de l'historique des migrations.Si vous remplacez cette méthode, il est recommandé d'appeler cette implémentation de base avant d'appliquer la configuration personnalisée.</summary>
      <param name="modelBuilder">Générateur qui définit le modèle pour le contexte créé.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>Cette classe est utilisée par Migrations Code First pour lire et écrire l'historique des migrations depuis la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>Obtient ou définit une clé représentant le contexte auquel la ligne s'applique.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>Obtient ou définit l'ID de la migration que cette ligne représente.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>Obtient ou définit l'état du modèle après l'application de cette migration.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>Obtient ou définit la version d'Entity Framework qui a créé cette entrée.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Représente une erreur qui se produit lorsqu'une migration automatique aboutirait à une perte de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>Initialise une nouvelle instance de la classe AutomaticDataLossException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe AutomaticDataLossException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe MigrationsException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception à l'origine de l'exception en cours ou référence Null (Nothing en Visual Basic) si aucune exception interne n'est spécifiée.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Représente une erreur qui se produit lorsqu'il y a des modifications de modèle en attente après l'application de la dernière migration et que la migration automatique est désactivée.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>Initialise une nouvelle instance de la classe AutomaticMigrationsDisabledException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe AutomaticMigrationsDisabledException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe MigrationsException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception à l'origine de l'exception en cours ou référence Null (Nothing en Visual Basic) si aucune exception interne n'est spécifiée.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>Explicitement implémenté par <see cref="T:System.Data.Entity.Migrations.DbMigration" /> pour empêcher l'affichage de certains membres dans les migrations créées à l'aide de la génération de modèle automatique IntelliSense.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Ajoute un <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" /> personnalisé à la migration.Les implémentations d'opération personnalisée sont encouragées à créer des méthodes d'extension sur <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" /> qui fournissent une API de style fluide pour ajouter de nouvelles opérations.</summary>
      <param name="migrationOperation">Opération à ajouter.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Fournit des métadonnées supplémentaires concernant une migration basée sur le code.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>Obtient l'identificateur unique de la migration.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>Obtient l'état du modèle avant l'exécution de cette migration.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>Obtient l'état du modèle après l'exécution de cette migration.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Représente les erreurs qui se produisent dans le pipeline Migrations Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>Initialise une nouvelle instance de la classe MigrationsException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe MigrationsException avec les données sérialisées.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenant les informations contextuelles concernant la source ou la destination.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe MigrationsException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe MigrationsException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception à l'origine de l'exception en cours ou référence Null (Nothing en Visual Basic) si aucune exception interne n'est spécifiée.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Classe de base pour les journaux qui peuvent être utilisés dans le cadre du processus de migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>Consigne un message d'information.</summary>
      <param name="message">Message à consigner.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>Consigne certaines informations supplémentaires qui ne doivent être présentées à l'utilisateur que s'il demande une sortie détaillée.</summary>
      <param name="message">Message à consigner.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>Consigne un avertissement dont l'utilisateur doit avoir connaissance.</summary>
      <param name="message">Message à consigner.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>Exception qui est levée lorsqu'une opération n'a pas pu être effectuée du fait que des migrations existantes n'ont pas été appliquées à la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>Initialise une nouvelle instance de la classe MigrationsPendingException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe MigrationsPendingException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe MigrationsPendingException.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception à l'origine de l'exception en cours ou référence Null (Nothing en Visual Basic) si aucune exception interne n'est spécifiée.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Représente une classe de base pour les éléments décoratifs qui encapsulent la classe principale <see cref="T:System.Data.Entity.Migrations.DbMigrator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase" />.</summary>
      <param name="innerMigrator">Classe Migrator que cet élément décoratif encapsule.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>Obtient la configuration utilisée pour le processus de migration.</summary>
      <returns>Processus utilisé pour le processus de migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>Obtient la liste des migrations qui ont été appliquées à la base de données.</summary>
      <returns>Liste des ID de migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>Obtient la liste des migrations qui sont définies dans l'assembly.</summary>
      <returns>Liste des ID de migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>Obtient la liste des migrations en attente qui n'ont pas été appliquées à la base de données.</summary>
      <returns>Liste des ID de migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>Met à jour la base de données cible vers la dernière migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>Met à jour la base de données cible vers une migration spécifique.</summary>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à niveau ou rétrogradation.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Élément décoratif permettant la journalisation pendant les opérations de migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>Initialise une nouvelle instance de la classe MigratorLoggingDecorator.</summary>
      <param name="innerMigrator">Classe Migrator que cet élément décoratif encapsule.</param>
      <param name="logger">Journal dans lequel les messages doivent être écrits.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Élément décoratif permettant de produire un script SQL au lieu d'appliquer des modifications à la base de données.L'utilisation de cet élément décoratif pour encapsuler <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> va empêcher <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> d'appliquer des modifications à la base de données cible.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Initialise une nouvelle instance de la classe MigratorScriptingDecorator.</summary>
      <param name="innerMigrator">Classe Migrator que cet élément décoratif encapsule.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Produit un script pour mettre à jour la base de données.</summary>
      <returns>Script SQL généré.</returns>
      <param name="sourceMigration">Migration à partir de laquelle effectuer la mise à jour.Si une valeur Null est fournie, un script permettant de mettre à jour la base de données en cours est créé.</param>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à jour.Si une valeur Null est fournie, un script permettant d'effectuer la mise à jour vers la dernière migration est créé.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Représente une colonne ajoutée à une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>Initialise une nouvelle instance de la classe AddColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être ajoutée.</param>
      <param name="column">Détails de la colonne ajoutée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>Obtient les détails de la colonne ajoutée.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>Obtient une opération qui représente la suppression de la colonne ajoutée.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Obtient une valeur qui indique si la modification est destructrice.</summary>
      <returns>true si la modification est destructive ; sinon false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>Obtient le nom de la table dans laquelle la colonne doit être ajoutée.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Représente une contrainte de clé étrangère ajoutée à une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe AddForeignKeyOperation.Les propriétés PrincipalTable, PrincipalColumns, DependentTable et DependentColumns doivent également être remplies.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>Obtient ou définit une valeur indiquant si la suppression en cascade doit être configurée sur la contrainte de clé étrangère.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>Obtient une opération permettant de créer un index sur les colonnes de clé étrangère.</summary>
      <returns>Opération permettant d'ajouter l'index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>Obtient une opération permettant de supprimer la contrainte de clé étrangère.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Obtient ou définit une valeur qui indique si cette modification entraîne la perte de données.</summary>
      <returns>true si cette modification entraîne une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>Nom des colonnes que la contrainte de clé étrangère doit cibler.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Représente l'ajout d'une clé primaire à une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe AddPrimaryKeyOperation.Les propriétés Table et Columns doivent également être remplies.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>Obtient une opération permettant de supprimer la clé primaire.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>Détermine ou définit s'il s'agit d'une clé primaire en cluster.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Représente la modification d'une colonne existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>Initialise une nouvelle instance de la classe AlterColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table à laquelle la colonne appartient.</param>
      <param name="column">Détails de la modification de la colonne.</param>
      <param name="isDestructiveChange">Valeur indiquant si cette modification va entraîner une perte de données.</param>
      <param name="inverse">Opération permettant d'annuler cette modification de la colonne.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>Initialise une nouvelle instance de la classe AlterColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table à laquelle la colonne appartient.</param>
      <param name="column">Détails de la modification de la colonne.</param>
      <param name="isDestructiveChange">Valeur indiquant si cette modification va entraîner une perte de données.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>Obtient la nouvelle définition de la colonne.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>Obtient une opération qui représente l'annulation de la modification.L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette modification va entraîner une perte de données.</summary>
      <returns>true si cette modification entraîne une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>Obtient le nom de la table à laquelle la colonne appartient.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>Représente la modification d'une procédure stockée existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée.</param>
      <param name="bodySql">Corps de la procédure stockée exprimée en code SQL.</param>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>Obtient une opération qui va annuler cette opération.Retourne toujours <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
      <summary>Représente les modifications apportées aux annotations personnalisées sur une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table sur laquelle les annotations ont changé.</param>
      <param name="annotations">Annotations personnalisées sur la table qui ont changé.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
      <summary>Obtient les annotations personnalisées qui ont été modifiées dans la table.</summary>
      <returns>Annotations personnalisées qui ont changé sur la table.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
      <summary>Obtient les colonnes devant être incluses dans la table pour laquelle les annotations ont changé.</summary>
      <returns>Colonnes à inclure dans la table pour laquelle les annotations ont changé.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
      <summary>Obtient une opération qui est l'inverse de celle-ci, de sorte que les annotations seront rétablies à leur état initial, avant l'application de cette opération.</summary>
      <returns>Opération qui est l'inverse de celle-ci, de sorte que les annotations seront rétablies à l'état dans lequel elles se trouvaient avant l'application de cette opération.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur qui indique si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
      <summary>Obtient le nom de la table sur laquelle les annotations ont changé.</summary>
      <returns>Nom de la table sur laquelle les annotations ont changé.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Représente les informations relatives à une colonne.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Initialise une nouvelle instance de la classe ColumnModel.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="type">Type de données de cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Initialise une nouvelle instance de la classe ColumnModel.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="type">Type de données de cette colonne.</param>
      <param name="typeUsage">Détails supplémentaires sur le type de données.Parmi ces détails figurent notamment la longueur maximale, l'acceptation des valeurs Null, etc.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
      <summary>Obtient ou définit les annotations personnalisées qui ont été modifiées dans la colonne.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>Obtient la valeur par défaut du type CLR correspondant au type de base de données de cette colonne.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>Obtient le type CLR correspondant au type de base de données de cette colonne.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>Obtient ou définit une valeur indiquant si les valeurs de cette colonne vont être générées par la base de données à l'aide du modèle d'identité.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>Détermine si le type de données de cette colonne est plus restreint que celui d'une autre colonne.Cette valeur permet de déterminer si le remplacement de la définition de colonne fournie par cette définition va entraîner une perte de données.</summary>
      <returns>true si le type de données de cette colonne est plus restreint.</returns>
      <param name="column">Colonne de comparaison.</param>
      <param name="providerManifest">Détails du fournisseur de base de données utilisé.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>Obtient ou définit une valeur indiquant si cette colonne peut stocker des valeurs Null.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>Obtient ou définit une valeur indiquant si ce modèle de propriété doit être configuré comme un horodatage.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Représente la création d'un index de base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe CreateIndexOperation.Les propriétés Table et Columns doivent également être remplies.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>Obtient une opération permettant de supprimer cet index.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>Détermine ou définit s'il s'agit d'un index cluster.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Obtient ou définit une valeur qui indique si cette modification entraîne la perte de données.</summary>
      <returns>true si cette modification entraîne une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>Obtient ou définit une valeur indiquant s'il s'agit d'un index unique.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>Opération de migration pour ajouter une nouvelle procédure stockée à la base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée.</param>
      <param name="bodySql">Corps de la procédure stockée exprimée en code SQL.</param>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>Obtient une opération permettant de supprimer la procédure stockée.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Représente la création d'une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à créer.</param>
      <param name="annotations">Annotations personnalisées qui existent sur la table à créer.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à créer.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
      <summary>Obtient les annotations personnalisées qui existent sur la table à créer.</summary>
      <returns>Annotations personnalisées qui existent sur la table à créer.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>Obtient les colonnes à inclure dans la nouvelle table.</summary>
      <returns>Colonnes à inclure dans la nouvelle table.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>Obtient une opération permettant de supprimer la table.</summary>
      <returns>Opération permettant de supprimer la table.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>Obtient le nom de la table à créer.</summary>
      <returns>Nom de la table à créer.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>Obtient ou définit la clé primaire de la nouvelle table.</summary>
      <returns>Clé primaire pour la nouvelle table.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Représente une colonne supprimée d'une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="removedAnnotations">Annotations personnalisées qui existent sur la colonne en cours de suppression.Peut être Null ou vide.</param>
      <param name="inverse">Opération qui représente l'annulation de l'opération de suppression.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="removedAnnotations">Annotations personnalisées qui existent sur la colonne en cours de suppression.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="inverse">Opération qui représente l'annulation de l'opération de suppression.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>Obtient une opération qui représente l'annulation de la suppression de la colonne.L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>Obtient le nom de la colonne à supprimer.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
      <summary>Obtient les annotations personnalisées qui existent sur la colonne en cours de suppression.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>Obtient le nom de la table dans laquelle la colonne doit être supprimée.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Représente une contrainte de clé étrangère supprimée d'une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="inverse">Opération représentant l'annulation de la suppression de la contrainte de clé étrangère.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.Les propriétés PrincipalTable, DependentTable et DependentColumns doivent également être remplies.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>Obtient une opération permettant de supprimer l'index associé sur les colonnes de clé étrangère.</summary>
      <returns>Opération permettant de supprimer l'index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>Obtient une opération représentant l'annulation de la suppression de la contrainte de clé étrangère.L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null.</summary>
      <returns>Opération représentant l'annulation de la suppression de la contrainte de clé étrangère.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Obtient une valeur qui indique si une modification est destructrice.</summary>
      <returns>true si une modification est destructive ; sinon false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Représente la suppression d'un index existant.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropIndexOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="inverse">Opération qui représente l'annulation de la suppression de l'index.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropIndexOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>Obtient une opération qui représente l'annulation de la suppression de l'index.L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Représente la suppression d'une clé primaire d'une table.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropPrimaryKeyOperation.Les propriétés Table et Columns doivent également être remplies.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>Utilisé lors de la modification de la table de l'historique des migrations afin que la table puisse être reconstruite plutôt que de supprimer et d'ajouter la clé primaire.</summary>
      <returns>Opération de création de table pour la table de l'historique des migrations.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>Obtient une opération permettant d'ajouter la clé primaire.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>Supprime une procédure stockée de la base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée à supprimer.</param>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>Obtient une opération qui va annuler cette opération.Retourne toujours <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.Retourne toujours la valeur False.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>Obtient le nom de la procédure stockée à supprimer.</summary>
      <returns>Nom de la procédure stockée à supprimer.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Représente la suppression d'une table existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropTableOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.</param>
      <param name="removedAnnotations">Annotations personnalisées qui existent sur la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="removedColumnAnnotations">Annotations personnalisées qui existent sur les colonnes de la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="inverse">Opération qui représente l'annulation de la suppression de la table.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropTableOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.</param>
      <param name="removedAnnotations">Annotations personnalisées qui existent sur la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="removedColumnAnnotations">Annotations personnalisées qui existent sur les colonnes de la table en cours de suppression.Peut être Null ou vide.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropTableOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.</param>
      <param name="inverse">Opération qui représente l'annulation de la suppression de la table.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe DropTableOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à supprimer.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>Obtient une opération qui représente l'annulation de la suppression de la table.L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si l'opération peut entraîner une perte de données.</summary>
      <returns>true si l'opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>Obtient le nom de la table à supprimer.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
      <summary>Obtient les annotations personnalisées qui existent sur la table en cours de suppression.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
      <summary>Obtient les annotations personnalisées qui existent sur les colonnes de la table en cours de suppression.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Classe de base pour les modifications qui affectent les contraintes de clé étrangère.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe ForeignKeyOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>Noms des colonnes de clé étrangère.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>Obtient ou définit le nom de la table dans laquelle se trouvent les colonnes de clé étrangère.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>Obtient une valeur indiquant si un nom spécifique a été fourni pour cette contrainte de clé étrangère.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>Obtient ou définit le nom de cette contrainte de clé étrangère.Si aucun nom n'est fourni, un nom par défaut est déterminé.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>Obtient ou définit le nom de la table ciblée par les contraintes de clé étrangère.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Opération représentant les modifications DML apportées à la table de l'historique des migrations.La table de l'historique des migrations permet de stocker un journal des migrations qui ont été appliquées à la base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>Initialise une nouvelle instance de la classe HistoryOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="commandTrees">Séquence d'arborescences de commandes représentant les opérations qui sont appliquées à la table de l'historique.</param>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>Séquence de commandes représentant les opérations qui sont appliquées à la table de l'historique.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Classe de base commune des opérations affectant les index.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe IndexOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Crée un nom d'index par défaut basé sur les noms de colonnes fournis.</summary>
      <returns>Nom d'index par défaut.</returns>
      <param name="columns">Noms de colonnes utilisés pour créer un nom d'index par défaut.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>Obtient les colonnes indexées.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>Obtient une valeur indiquant si un nom spécifique a été fourni pour cet index.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>Obtient ou définit le nom de cet index.Si aucun nom n'est fourni, un nom par défaut est déterminé.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>Obtient ou définit la table à laquelle appartient l'index.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Représente une opération permettant de modifier un schéma de base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe MigrationOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>Obtient les arguments supplémentaires qui peuvent être traités par les fournisseurs.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>Obtient une opération qui va annuler cette opération.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>Représente le déplacement d'une procédure stockée vers un nouveau schéma de la base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée à déplacer.</param>
      <param name="newSchema">Nouveau schéma de la procédure stockée.</param>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>Obtient une opération qui va annuler cette opération.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.Retourne toujours la valeur False.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>Obtient le nom de la procédure stockée à déplacer.</summary>
      <returns>Nom de la procédure stockée à déplacer.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>Obtient le nouveau schéma de la procédure stockée.</summary>
      <returns>Nouveau schéma de la procédure stockée.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Représente le déplacement d'une table d'un schéma vers un autre.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe MoveTableOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à déplacer.</param>
      <param name="newSchema">Nom du schéma vers lequel la table doit être déplacée.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>Utilisé lors de la modification de la table de l'historique des migrations afin que les données puissent être déplacées vers la nouvelle table.</summary>
      <returns>Clé de contexte pour le modèle.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>Utilisé lors de la modification de la table de l'historique des migrations afin que la table puisse être reconstruite plutôt que de supprimer et d'ajouter la clé primaire.</summary>
      <returns>Opération de création de table pour la table de l'historique des migrations.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>Obtient une opération qui redéplace la table vers son schéma d'origine.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur qui indique si cette modification entraîne la perte de données.</summary>
      <returns>true si cette modification entraîne une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>Obtient une valeur qui indique s'il s'agit d'une table système.</summary>
      <returns>true si la table est une table système ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>Obtient le nom de la table à déplacer.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>Obtient le nom du schéma vers lequel la table doit être déplacée.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>Représente une opération de migration qui ne peut pas être effectuée, probablement parce qu'elle n'est pas prise en charge par le fournisseur de base de données ciblé.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.Retourne toujours la valeur False.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>Représente les informations relatives à un paramètre.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Initialise une nouvelle instance de la classe ParameterModel avec le type spécifié.</summary>
      <param name="type">Type de données de ce paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Initialise une nouvelle instance de la classe ParameterModel à l'aide du type et de l'utilisation de type spécifiés.</summary>
      <param name="type">Type de données de ce paramètre.</param>
      <param name="typeUsage">Détails supplémentaires sur le type de données.Parmi ces détails figurent notamment la longueur maximale, l'acceptation des valeurs Null, etc.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>Obtient ou définit une valeur qui indique si cette instance est un paramètre de sortie.</summary>
      <returns>true si cette instance est un paramètre de sortie ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Classe de base commune pour représenter les opérations affectant les clés primaires.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe PrimaryKeyOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
      <summary>Retourne le nom par défaut de la clé primaire.</summary>
      <returns>Nom de clé primaire par défaut.</returns>
      <param name="table">Nom de la table cible.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>Obtient les colonnes qui constituent la clé primaire.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>Obtient une valeur indiquant si un nom spécifique a été fourni pour cette clé primaire.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>Obtient ou définit le nom de cette clé primaire.Si aucun nom n'est fourni, un nom par défaut est déterminé.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>Obtient ou définit le nom de la table qui contient la clé primaire.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>Opération de migration qui affecte les procédures stockées.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée.</param>
      <param name="bodySql">Corps de la procédure stockée exprimée en code SQL.</param>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>Obtient le corps de la procédure stockée exprimée en code SQL.</summary>
      <returns>Corps de la procédure stockée exprimée en code SQL.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.Retourne toujours la valeur False.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>Obtient le nom de la procédure stockée.</summary>
      <returns>Nom de la procédure stockée.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>Obtient les paramètres de la procédure stockée.</summary>
      <returns>Paramètres de la procédure stockée.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>Représente les informations sur la propriété d'une entité.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Initialise une nouvelle instance de la classe PropertyModel.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="type">Type de données de ce modèle de propriété.</param>
      <param name="typeUsage">Détails supplémentaires sur le type de données.Parmi ces détails figurent notamment la longueur maximale, l'acceptation des valeurs Null, etc.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>Obtient ou définit une valeur constante à utiliser comme valeur par défaut de ce modèle de propriété.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>Obtient ou définit une expression SQL utilisée comme valeur par défaut de ce modèle de propriété.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>Obtient ou définit une valeur indiquant si ce modèle de propriété est de longueur fixe.Valide uniquement pour les données de type tableau.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>Obtient ou définit une valeur indiquant si ce modèle de propriété prend en charge les caractères Unicode.Valide uniquement pour les données de type texte.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>Obtient ou définit la longueur maximale de ce modèle de propriété.Valide uniquement pour les données de type tableau.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>Obtient ou définit le nom du modèle de propriété.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>Obtient ou définit la précision de ce modèle de propriété.Valide uniquement pour les données de type décimal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>Obtient ou définit l'échelle de ce modèle de propriété.Valide uniquement pour les données de type décimal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>Obtient ou définit un type de données spécifique du fournisseur à utiliser pour ce modèle de propriété.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>Obtient le type de données de ce modèle de propriété.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>Obtient des détails supplémentaires sur le type de données de ce modèle de propriété.Parmi ces détails figurent notamment la longueur maximale, l'acceptation des valeurs Null, etc.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Représente le changement de nom d'une colonne existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe RenameColumnOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="table">Nom de la table à laquelle la colonne appartient.</param>
      <param name="name">Nom de la colonne à renommer.</param>
      <param name="newName">Nouveau nom de la colonne.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>Obtient une opération qui annule le changement de nom.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>Obtient le nom de la colonne à renommer.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>Obtient le nouveau nom de la colonne.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>Obtient le nom de la table à laquelle la colonne appartient.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
      <summary>Représente l'opération d'affectation d'un nouveau nom à un index existant.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe RenameIndexOperation.</summary>
      <param name="table">Nom de la table à laquelle l'index appartient.</param>
      <param name="name">Nom de l'index à renommer.</param>
      <param name="newName">Nouveau nom de l'index.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
      <summary>Obtient une opération qui rétablit le précédent nom de l'index.</summary>
      <returns>Opération qui rétablit le précédent nom de l'index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
      <summary>Détermine si l'affectation d'un nouveau nom à l'index peut être destructif pour l'opération.</summary>
      <returns>true si l'affectation d'un nouveau nom à l'index peut être destructif pour l'opération ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
      <summary>Obtient le nom de l'index à renommer.</summary>
      <returns>Nom de l'index à renommer.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
      <summary>Obtient le nouveau nom de l'index.</summary>
      <returns>Nouveau nom de l'index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
      <summary>Obtient le nom de la table à laquelle l'index appartient.</summary>
      <returns>Nom de la table à laquelle l'index appartient.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>Représente l'attribution d'un nouveau nom à une procédure stockée dans la base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la procédure stockée à renommer.</param>
      <param name="newName">Nouveau nom de la procédure stockée.</param>
      <param name="anonymousArguments">Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>Obtient une opération qui va annuler cette opération.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.Retourne toujours la valeur False.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>Obtient le nom de la procédure stockée à renommer.</summary>
      <returns>Nom de la procédure stockée à renommer.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>Obtient le nouveau nom de la procédure stockée.</summary>
      <returns>Nouveau nom de la procédure stockée.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>Représente le changement de nom d'une table existante.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe RenameTableOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="name">Nom de la table à renommer.</param>
      <param name="newName">Nouveau nom de la table.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>Obtient une opération qui annule le changement de nom.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur qui indique si la modification est destructrice.</summary>
      <returns>true si la modification est destructive ; sinon false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>Obtient le nom de la table à renommer.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>Obtient le nouveau nom de la table.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Représente une instruction SQL spécifique du fournisseur à exécuter directement par rapport à la base de données cible.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>Initialise une nouvelle instance de la classe SqlOperation.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="sql">Commande SQL à exécuter.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs.Utilise une syntaxe de type anonyme pour spécifier des arguments, par exemplenew { SampleArgument = « Mavaleur »}'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
      <returns>true si cette opération peut entraîner une perte des données ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>Obtient l'instruction SQL à exécuter.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>Obtient ou définit une valeur indiquant si cette instruction doit être exécutée en dehors de l'étendue de la transaction utilisée pour rendre le processus de migration transactionnel.Si cette option a la valeur true, cette opération n'est pas annulée en cas d'échec du processus de migration.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>Utilisé lors de l'écriture d'un script pour une opération de mise à jour de base de données afin de stocker les opérations qui auraient été effectuées sur la base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" />.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="historyQueryTrees">Requêtes utilisées pour déterminer si cette migration doit être appliquée à la base de données.Cela permet de générer un script SQL idempotent pouvant être exécuté sur une base de données, quelle que soit la version.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Ajoute une migration à cette opération de mise à jour de la base de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <param name="migrationId">ID de la migration.</param>
      <param name="operations">Différentes opérations appliquées par la migration.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>Requêtes utilisées pour déterminer si cette migration doit être appliquée à la base de données.Cela permet de générer un script SQL idempotent pouvant être exécuté sur une base de données, quelle que soit la version.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si l'une des opérations peut entraîner une perte de données.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>Obtient les migrations appliquées lors de l'opération de mise à jour de la base de données.</summary>
      <returns>Migrations appliquées lors de l'opération de mise à jour de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>Représente une migration à appliquer à la base de données.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>Obtient l'ID de la migration.</summary>
      <returns>ID de la migration.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>Obtient les différentes opérations appliquées par cette migration.</summary>
      <returns>Différentes opérations appliquées par cette migration.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>Classe de base commune pour les fournisseurs qui convertissent des opérations de migration indépendantes du fournisseur en commandes SQL propres au fournisseur de base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
      <summary>Génère l'utilisation du type de magasin pour le <paramref name="storeTypeName" /> spécifié avec les facettes du <paramref name="propertyModel" /> spécifié.</summary>
      <returns>TypeUsage spécifique au magasin</returns>
      <param name="storeTypeName">Nom du type de magasin.</param>
      <param name="propertyModel">Propriété cible.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Convertit un jeu d'opérations de migration en code SQL propre au fournisseur de base de données.</summary>
      <returns>Liste d'instructions SQL à exécuter pour effectuer les opérations de migration.</returns>
      <param name="migrationOperations">Opérations à convertir.</param>
      <param name="providerManifestToken">Jeton représentant la version de la base de données ciblée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>Génère un corps SQL pour la procédure stockée.</summary>
      <returns>Corps SQL de la procédure stockée.</returns>
      <param name="commandTrees">Arborescences de commande représentant les commandes des opérations d'insertion, mise à jour ou suppression.</param>
      <param name="rowsAffectedParameter">Nom de paramètre affecté par les lignes.</param>
      <param name="providerManifestToken">Jeton de manifeste du fournisseur.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
      <summary>Obtient ou définit le manifeste du fournisseur.</summary>
      <returns>Manifeste du fournisseur.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Représente une opération de migration qui a été convertie en instruction SQL.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>Obtient ou définit le terminateur de lot pour le fournisseur de bases de données.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
      <returns>Terminateur de lot pour le fournisseur de bases de données.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>Obtient ou définit le code SQL à exécuter pour effectuer cette opération de migration.Les API des migrations Entity Framework ne sont pas désignées pour accepter une entrée fournie par des sources non fiables (comme l'utilisateur final d'une application).Si une entrée est acceptée de telles sources, elle doit être validée avant d'être passée à ces API afin de se prémunir contre des attaques d'injection SQL, ou d'autres menaces.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>Obtient ou définit une valeur indiquant si cette instruction doit être exécutée en dehors de l'étendue de la transaction utilisée pour rendre le processus de migration transactionnel.Si cette option a la valeur true, cette opération n'est pas annulée en cas d'échec du processus de migration.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>Identique à <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" />, mais fonctionne en situation de confiance partielle et ajoute une mise en cache explicite de la chaîne de mise en retrait générée et reconnaît également l'écriture d'une chaîne qui contient seulement \r\n ou \n comme ligne d'écriture pour s'assurer que la mise en retrait s'effectue correctement à la ligne suivante.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Initialise une nouvelle instance de la classe IndentedTextWriter avec le writer de texte spécifié et la chaîne de tabulation par défaut.Notez que l'enregistreur passé à ce constructeur doit utiliser le <see cref="T:System.Globalization.CultureInfo" /> spécifié par la propriété <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour la sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Initialise une nouvelle instance de la classe IndentedTextWriter avec le writer de texte spécifié et la chaîne de tabulation.Notez que l'enregistreur passé à ce constructeur doit utiliser le <see cref="T:System.Globalization.CultureInfo" /> spécifié par la propriété <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour la sortie.</param>
      <param name="tabString">Chaîne de tabulation à utiliser pour la mise en retrait.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>Ferme le document en cours d'écriture.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>Spécifie la culture qui sera utilisée par le TextWriter sous-jacent.Cette propriété statique est en lecture seule.Notez que tout enregistreur passé à l'un des constructeur de <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> doit utiliser cette même culture.La culture est <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>Génère une chaîne représentant le niveau de mise en retrait actuel pour une nouvelle ligne.</summary>
      <returns>Chaîne vide ou chaîne contenant le niveau .Indent d'une chaîne de tabulation spécifiée.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>Spécifie la chaîne de tabulation par défaut.Ce champ est constant.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>Obtient l'encodage pour le writer de texte à utiliser.</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> qui indique l'encodage à utiliser pour le writer de texte.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>Vide le flux.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>Obtient ou définit le nombre d'espaces à mettre en retrait.</summary>
      <returns>Nombre d'espaces à mettre en retrait.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>Obtient le <see cref="T:System.IO.TextWriter" /> à utiliser.</summary>
      <returns>
        <see cref="T:System.IO.TextWriter" /> à utiliser.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>Obtient ou définit le caractère de nouvelle ligne à utiliser.</summary>
      <returns>Caractère de nouvelle ligne à utiliser.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>Génère une chaîne de tabulation pour chaque niveau de mise en retrait défini par la propriété <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur booléenne.</summary>
      <param name="value">Valeur booléenne à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>Écrit un caractère dans le flux de texte.</summary>
      <param name="value">Caractère à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>Écrit un tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Index de début dans la mémoire tampon.</param>
      <param name="count">Nombre de caractères à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur de type Double.</summary>
      <param name="value">Valeur double à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un nombre entier.</summary>
      <param name="value">Entier à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un nombre entier 8 octets.</summary>
      <param name="value">Entier 8 octets à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un objet.</summary>
      <param name="value">Objet à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur de type Single.</summary>
      <param name="value">Valeur de type Single à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>Écrit la chaîne spécifiée dans le flux de texte.</summary>
      <param name="value">Chaîne à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée.</summary>
      <param name="format">Chaîne de mise en forme.</param>
      <param name="arg0">Objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg0">Premier objet à écrire dans la chaîne mise en forme.</param>
      <param name="arg1">Deuxième objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg">Tableau d'arguments à utiliser en sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>Écrit une marque de fin de ligne.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur booléenne, suivie d'une marque de fin de ligne.</summary>
      <param name="value">Valeur booléenne à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Écrit un caractère, suivi d'une marque de fin de ligne, dans le flux de texte.</summary>
      <param name="value">Caractère à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Écrit un tableau de caractères, suivi d'une marque de fin de ligne, dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères, suivi d'un terminateur de ligne, dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Index de début dans la mémoire tampon.</param>
      <param name="count">Nombre de caractères à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur double, suivie d'une marque de fin de ligne.</summary>
      <param name="value">Valeur double à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un entier, suivie d'une marque de fin de ligne.</summary>
      <param name="value">Entier à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un entier 8 octets, suivie d'une marque de fin de ligne.</summary>
      <param name="value">Entier 8 octets à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un objet, suivie d'une marque de fin de ligne.</summary>
      <param name="value">Objet à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur de type Single, suivie d'une marque de fin de ligne.</summary>
      <param name="value">Valeur de type Single à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>Écrit la chaîne spécifiée, suivie d'une marque de fin de ligne, dans le flux de texte.</summary>
      <param name="value">Chaîne à écrire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme, suivie d'une marque de fin de ligne, avec les sémantiques spécifiées.</summary>
      <param name="format">Chaîne de mise en forme.</param>
      <param name="arg0">Objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme, suivie d'une marque de fin de ligne, avec les sémantiques spécifiées.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg0">Premier objet à écrire dans la chaîne mise en forme.</param>
      <param name="arg1">Deuxième objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme, suivie d'une marque de fin de ligne, avec les sémantiques spécifiées.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg">Tableau d'arguments à utiliser en sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur de type UInt32, suivie d'une marque de fin de ligne.</summary>
      <param name="value">Valeur UInt32 à utiliser en sortie.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Écrit la chaîne spécifiée dans une ligne sans tabulation.</summary>
      <param name="value">Chaîne à écrire.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour un type complexe dans un modèle.Un ComplexTypeConfiguration peut être obtenu à l'aide de la méthode ComplexType sur <see cref="T:System.Data.Entity.DbModelBuilder" /> ou un type personnalisé dérivé de ComplexTypeConfiguration peut être enregistré à l'aide de la propriété Configurations sur <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TComplexType">Type complexe à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de ComplexTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet spécifié.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Fonction de hachage pour un type particulier.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Exclut une propriété du modèle de manière à ce qu'elle ne soit pas mappée à la base de données.</summary>
      <returns>La même instance de ComplexTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Type de la propriété à ignorer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour un type d'entité dans un modèle.Un EntityTypeConfiguration peut être obtenu à l'aide de la méthode Entity sur <see cref="T:System.Data.Entity.DbModelBuilder" /> ou un type personnalisé dérivé de EntityTypeConfiguration peut être enregistré à l'aide de la propriété Configurations sur <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Type d'entité configuré.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de EntityTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Indique si le modèle de configuration spécifié est égal au modèle de configuration actuel.</summary>
      <returns>true si le modèle de configuration spécifié est égal au modèle de configuration actuel ; sinon, false.</returns>
      <param name="obj">Modèle à comparer à l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Retourne la fonction de hachage pour le modèle de configuration spécifié.</summary>
      <returns>Fonction de hachage pour le générateur de modèles spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Obtient le type de configuration modèle actuel.</summary>
      <returns>Type de configuration modèle actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Configure le nom du jeu d'entités à utiliser pour ce type d'entité.Le nom du jeu d'entités peut uniquement être configuré pour le type de base dans chaque jeu.</summary>
      <returns>La même instance de EntityTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="entitySetName">Nom du jeu d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure les propriétés de clé primaire pour ce type d'entité.</summary>
      <returns>La même instance de EntityTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="keyExpression">Expression lambda représentant la propriété à utiliser comme clé primaire.C# : t =&amp;gt; t.Id VB.Net: Function(t) t.Id Si la clé primaire se compose de plusieurs propriétés, spécifiez un type anonyme incluant les diverses propriétés.C# : t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Configure une relation de type plusieurs à partir de ce type d'entité.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Type de l'entité à l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure une relation facultative à partir de ce type d'entité.Les instances du type d'entité peuvent être enregistrées dans la base de données sans que cette relation ne soit spécifiée.La clé étrangère de la base de données autorise la valeur Null.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Type de l'entité à l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure une relation obligatoire à partir de ce type d'entité.Les instances du type d'entité ne peuvent pas être enregistrées dans la base de données à moins que cette relation ne soit spécifiée.La clé étrangère de la base de données n'autorise pas la valeur Null.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Type de l'entité à l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la table à laquelle cette entité est mappée.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la table, comme lors de la création de migrations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Exclut une propriété du modèle de manière à ce qu'elle ne soit pas mappée à la base de données.</summary>
      <returns>La même instance de EntityTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Type de la propriété à ignorer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>Autorise la configuration avancée liée à la manière dont un type d'entité dérivé est mappé au schéma de base de données.Les appels de la méthode Map sont cumulés et les appels suivants ne remplacent pas la configuration déjà exécutée via cette méthode.</summary>
      <returns>La même instance de EntityTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="derivedTypeMapConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <typeparam name="TDerived">Type d'entité dérivé à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>Autorise la configuration avancée liée à la manière dont ce type d'entité est mappé au schéma de base de données.Par défaut, toutes les configurations s'appliquent aussi à tous les types dérivés de ce type d'entité.Les types dérivés peuvent être configurés à l'aide de la surcharge de la méthode Map qui permet de configurer un type dérivé ou en utilisant un EntityTypeConfiguration pour le type dérivé.Les propriétés d'une entité peuvent être fractionnées entre plusieurs tables en utilisant plusieurs appels à la méthode Map.Les appels de la méthode Map sont cumulés et les appels suivants ne remplacent pas la configuration déjà exécutée via cette méthode.</summary>
      <returns>La même instance de EntityTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="entityMappingConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>Configure ce type pour utiliser des procédures stockées pour l'insertion, la mise à jour et la suppression.Les conventions par défaut pour les noms de procédure et de paramètre seront utilisées.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Configure ce type pour utiliser des procédures stockées pour l'insertion, la mise à jour et la suppression.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Configuration pour remplacer les conventions par défaut pour les noms de procédure et de paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Retourne une représentation sous forme de chaîne de la configuration modèle.</summary>
      <returns>Représentation sous forme de chaîne du générateur de modèles.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Configure le nom de la table auquel ce type d'entité est mappé.</summary>
      <returns>La même instance de EntityTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Configure le nom de la table auquel ce type d'entité est mappé.</summary>
      <returns>La même instance de EntityTypeConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de base de données de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>Exception levée par <see cref="T:System.Data.Entity.DbModelBuilder" /> lors de la création du modèle lorsqu'un modèle non valide est généré.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>Initialise une nouvelle instance de ModelValidationException</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance des informations de sérialisation de classe et le contexte de diffusion en continu de <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
      <param name="info">Informations de sérialisation.</param>
      <param name="context">Contexte de diffusion en continu.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de ModelValidationException</summary>
      <param name="message">Message d'exception.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de ModelValidationException</summary>
      <param name="message">Message d'exception.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>Classe de base pour l'exécution de la configuration d'une relation.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour une procédure stockée utilisée pour modifier une relation.</summary>
      <typeparam name="TEntityType">Type de l'entité à partir duquel la relation est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>Permet de configurer une propriété <see cref="T:System.byte[]" /> d'un type d'entité ou d'un type complexe.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la colonne de base de données utilisée pour stocker la propriété.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété.Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configure la manière dont les valeurs pour la propriété sont générées par la base de données.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.La définition de « Null » entraîne l'utilisation de l'option par défaut, qui peut être « None », « Identity » ou « Computed » selon le type de la propriété, sa sémantique dans le modèle (par ex.les clés primaires sont traitées différemment), ainsi que les jeux de conventions utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="value">Longueur maximale pour la propriété.L'affectation de la valeur Null supprime les restrictions sur la longueur maximale de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="concurrencyToken">Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non.L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété.L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>Configure la propriété pour qu'elle soit de longueur fixe.Utilisez la valeur HasMaxLength pour définir la longueur de la propriété.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>Configure la propriété pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>Configure la propriété pour qu'elle soit de type facultatif.La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null.Les propriétés <see cref="T:System.byte[]" /> sont facultatives par défaut.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>Configure la propriété pour qu'elle soit de type obligatoire.La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>Configure la propriété pour qu'elle soit une version de ligne dans la base de données.Le type de données réel varie en fonction du fournisseur de base de données utilisé.La configuration de la propriété en version de ligne la configure automatiquement comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>Configure la propriété pour qu'elle soit de longueur variable.Les propriétés <see cref="T:System.byte[]" /> sont de longueur variable par défaut.</summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>Configure une relation qui peut prendre en charge une fonctionnalité de suppression en cascade.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>Active la suppression en cascade pour la relation.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>Indique si la suppression en cascade est activée ou non pour la relation.</summary>
      <param name="value">Valeur indiquant si la suppression en cascade est activée ou non.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>Autorise les classes de configuration dérivées pour les types des entités et complexes à enregistrer avec un <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>Ajoute un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> à <see cref="T:System.Data.Entity.DbModelBuilder" />.Un seul <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> peut être ajouté pour chaque type dans un modèle.</summary>
      <returns>La même instance de ConfigurationRegistrar pour que plusieurs appels puissent être chaînés.</returns>
      <param name="complexTypeConfiguration">Configuration du type complexe à ajouter.</param>
      <typeparam name="TComplexType">Type complexe configuré.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>Ajoute un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> à <see cref="T:System.Data.Entity.DbModelBuilder" />.Un seul <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> peut être ajouté pour chaque type dans un modèle.</summary>
      <returns>La même instance de ConfigurationRegistrar pour que plusieurs appels puissent être chaînés.</returns>
      <param name="entityTypeConfiguration">Configuration du type d'entité à ajouter.</param>
      <typeparam name="TEntityType">Type d'entité configuré.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>Découvre tous les types qui héritent de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> ou d'<see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> dans l'assembly donné et ajoute une instance de chaque type découvert à ce Registre.</summary>
      <returns>La même instance de ConfigurationRegistrar pour que plusieurs appels puissent être chaînés.</returns>
      <param name="assembly">Assembly contenant les configurations de modèle à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage de l'objet actif.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>Crée une convention qui configure les procédures stockées à utiliser pour supprimer les entités dans la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifique.</summary>
      <returns>true si cette instance est identique à un objet spécifique ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Obtient le code de hachage associé à cette instance.</summary>
      <returns>Code de hachage associé à cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType">
      <summary>Obtient le type sous-jacent de cette instance.</summary>
      <returns>Type sous-jacent de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
      <param name="schemaName">Nom du schéma.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyInfo">Propriété pour laquelle configurer le paramètre.</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyName">Nom de la propriété pour laquelle configurer le paramètre.</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Configure le paramètre de sortie qui retourne les lignes affectées par cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>Crée une convention qui configure les procédures stockées à utiliser pour insérer des entités dans la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié équivaut à l'instance actuelle.</summary>
      <returns>true si l'objet spécifié est égal à l'instance actuelle ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Obtient le code de hachage de l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType">
      <summary>Obtient le type associé à la configuration.</summary>
      <returns>Type associé à la configuration.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
      <param name="schemaName">Nom du schéma.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyInfo">Propriété pour laquelle configurer le paramètre.</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyName">Nom de la propriété pour laquelle configurer le paramètre.</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyInfo">Propriété pour laquelle configurer le résultat.</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyName">Nom de la propriété pour laquelle configurer le résultat.</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>Représente une convention qui configure les procédures stockées à utiliser pour modifier des entités dans la base de données.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>Crée une convention qui configure les procédures stockées à utiliser pour modifier des entités dans la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>Configure la procédure stockée utilisée pour supprimer des entités.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)">
      <summary>Spécifie si cette configuration est identique à un objet spécifique.</summary>
      <returns>true si cette configuration est identique à un objet spécifique ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode">
      <summary>Obtient le code de hachage associé à cette configuration.</summary>
      <returns>Code de hachage associé à cette configuration.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>Configure la procédure stockée utilisée pour insérer des entités.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString">
      <summary>Retourne une représentation sous forme de chaîne de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" />.</summary>
      <returns>Représentation sous forme de chaîne de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" />.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>Configure la procédure stockée utilisée pour mettre à jour les entités.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>Représente une propriété primitive d'un type d'entité ou d'un type complexe.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>Obtient le <see cref="T:System.Reflection.PropertyInfo" /> de cette propriété.</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> de cette propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un autre objet.</summary>
      <returns>true si cette instance est identique à un autre objet ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode">
      <summary>Obtient le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la colonne de base de données utilisée pour stocker la propriété.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété.Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>Configure la manière dont les valeurs pour la propriété sont générées par la base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="databaseGeneratedOption">Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="maxLength">Longueur maximale pour la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Configure le nom du paramètre utilisé dans les procédures stockées pour cette propriété.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Configure la précision de la propriété <see cref="T:System.DateTime" />.Si le fournisseur de base de données ne prend pas en charge la précision pour le type de données de la colonne, cette valeur est ignorée.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value">Précision de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Configure la précision et l'échelle de la propriété <see cref="T:System.Decimal" />.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="precision">Précision de la propriété.</param>
      <param name="scale">Échelle de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="concurrencyToken">Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>Configure la propriété pour qu'elle soit de longueur fixe.Utilisez la valeur HasMaxLength pour définir la longueur de la propriété.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>Configure cette propriété de façon à ce qu'elle fasse partie de la clé primaire de ce type d'entité.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>Configure la propriété pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>Configure la propriété pour qu'elle soit de type facultatif.La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>Configure la propriété pour qu'elle soit de type obligatoire.La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>Configure la propriété pour qu'elle soit une version de ligne dans la base de données.Le type de données réel varie en fonction du fournisseur de base de données utilisé.La configuration de la propriété en version de ligne la configure automatiquement comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>Configure la propriété pour prendre en charge le contenu de chaîne Unicode.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>Indique si la propriété prend en charge le contenu de chaîne Unicode.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="unicode">Valeur indiquant si la propriété prend en charge le contenu de chaîne Unicode.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>Configure la propriété pour qu'elle soit de longueur variable.Par défaut, les propriétés sont de longueur variable.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>Autorise la personnalisation des conventions utilisées par une instance <see cref="T:System.Data.Entity.DbModelBuilder" />.Les conventions utilisées par défaut se trouvent dans l'espace de noms System.Data.Entity.ModelConfiguration.Conventions.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>Active une convention pour le <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TConvention">Type de la convention à activer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Active une ou plusieurs conventions pour le <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Conventions à activer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Active une convention pour le <see cref="T:System.Data.Entity.DbModelBuilder" />.Cette convention s'exécute après celle qui est spécifiée.</summary>
      <param name="newConvention">Convention à activer.</param>
      <typeparam name="TExistingConvention">Type de la convention après laquelle la convention activée s'exécutera.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Active une convention de configuration pour le <see cref="T:System.Data.Entity.DbModelBuilder" />.Cette convention s'exécute avant celle qui est spécifiée.</summary>
      <param name="newConvention">Convention à activer.</param>
      <typeparam name="TExistingConvention">Type de la convention avant laquelle la convention activée s'exécutera.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddFromAssembly(System.Reflection.Assembly)">
      <summary>Découvre toutes les conventions dans l'assembly spécifié et les ajoute au <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="assembly">Assembly contenant les conventions à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Désactive une convention pour le <see cref="T:System.Data.Entity.DbModelBuilder" />.Les conventions utilisées par défaut disponibles pour la suppression se trouvent dans l'espace de noms System.Data.Entity.ModelConfiguration.Conventions.</summary>
      <typeparam name="TConvention">Type de la convention à désactiver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Désactive une ou plusieurs conventions pour le <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Conventions à désactiver.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>Autorise l'exécution de la configuration pour un type d'entité dans un modèle.Cette fonctionnalité de configuration est disponible via les conventions simplifiées.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>Obtient le <see cref="T:System.Type" /> de ce type d'entité.</summary>
      <returns>
        <see cref="T:System.Type" /> of this entity type.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié équivaut à l'instance actuelle.</summary>
      <returns>true si l'objet spécifié est égal à l'instance actuelle ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>Configure le nom du jeu d'entités à utiliser pour ce type d'entité.Le nom du jeu d'entités peut uniquement être configuré pour le type de base dans chaque jeu.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="entitySetName">Nom du jeu d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>Configure les propriétés de clé primaire pour ce type d'entité.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="keyProperties">Propriétés à utiliser comme clé primaire.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Configure les propriétés de clé primaire pour ce type d'entité.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="propertyNames">Noms des propriétés à utiliser comme clé primaire.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>Configure la propriété de clé primaire pour ce type d'entité.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="propertyInfo">Propriété à utiliser comme clé primaire.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>Configure la propriété de clé primaire pour ce type d'entité.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="propertyName">Nom de la propriété à utiliser comme clé primaire.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la table à laquelle cette entité est mappée.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la table, comme lors de la création de migrations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>Exclut ce type d'entité du modèle de manière à ce qu'il ne soit pas mappé à la base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>Exclut une propriété du modèle de manière à ce qu'elle ne soit pas mappée à la base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="propertyInfo">Propriété à configurer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>Exclut une propriété du modèle de manière à ce qu'elle ne soit pas mappée à la base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="propertyName">Nom de la propriété à configurer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>Change ce type d'entité en type complexe.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>Configure ce type pour utiliser des procédures stockées pour l'insertion, la mise à jour et la suppression.Les conventions par défaut pour les noms de procédure et de paramètre seront utilisées.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>Configure ce type pour utiliser des procédures stockées pour l'insertion, la mise à jour et la suppression.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Configuration pour remplacer les conventions par défaut pour les noms de procédure et de paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>Configure une propriété définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyInfo">Propriété configurée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>Configure une propriété définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyName">Nom de la propriété qui est configurée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>Configure le nom de la table auquel ce type d'entité est mappé.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>Configure le nom de la table auquel ce type d'entité est mappé.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de base de données de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour un type d'entité dans un modèle.Cette fonctionnalité de configuration est disponible via les conventions simplifiées.</summary>
      <typeparam name="T">Type hérité par le type d'entité.</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>Obtient le <see cref="T:System.Type" /> de ce type d'entité.</summary>
      <returns>
        <see cref="T:System.Type" /> of this entity type.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié équivaut à l'instance actuelle.</summary>
      <returns>true si l'objet spécifié est égal à l'instance actuelle ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
      <summary>Récupère le code de hachage de l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Configure le nom du jeu d'entités à utiliser pour ce type d'entité.Le nom du jeu d'entités peut uniquement être configuré pour le type de base dans chaque jeu.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="entitySetName">Nom du jeu d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure les propriétés de clé primaire pour ce type d'entité.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="keyExpression">Expression lambda représentant la propriété à utiliser comme clé primaire.C# : t =&amp;gt; t.Id VB.Net: Function(t) t.Id Si la clé primaire se compose de plusieurs propriétés, spécifiez un type anonyme incluant les diverses propriétés.C# : t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">Type de la clé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la table à laquelle cette entité est mappée.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la table, comme lors de la création de migrations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>Exclut ce type d'entité du modèle de manière à ce qu'il ne soit pas mappé à la base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Exclut une propriété du modèle de manière à ce qu'elle ne soit pas mappée à la base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Type de la propriété à ignorer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>Change ce type d'entité en type complexe.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>Configure ce type pour utiliser des procédures stockées pour l'insertion, la mise à jour et la suppression.Les conventions par défaut pour les noms de procédure et de paramètre seront utilisées.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Configure ce type pour utiliser des procédures stockées pour l'insertion, la mise à jour et la suppression.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Configuration pour remplacer les conventions par défaut pour les noms de procédure et de paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure une propriété définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Type de la propriété qui est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
      <summary>Convertit la valeur de l'instance actuelle en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>Configure le nom de la table auquel ce type d'entité est mappé.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Configure le nom de la table auquel ce type d'entité est mappé.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de base de données de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>Crée une convention qui configure les procédures stockées à utiliser pour mettre à jour les entités dans la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Détermine si cette instance est identique à l'objet spécifié.</summary>
      <returns>true si cette instance est identique à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType">
      <summary>Retourne le type associé à l'instance actuelle.</summary>
      <returns>Type associé à l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
      <param name="schemaName">Nom du schéma.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyInfo">Propriété pour laquelle configurer le paramètre.</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyInfo">Propriété pour laquelle configurer le paramètre.</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyName">Nom de la propriété pour laquelle configurer le paramètre.</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyName">Nom de la propriété pour laquelle configurer le paramètre.</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyInfo">Propriété pour laquelle configurer le résultat.</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyName">Nom de la propriété pour laquelle configurer le résultat.</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Configure le paramètre de sortie qui retourne les lignes affectées par cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>Permet de configurer une propriété <see cref="T:System.DateTime" /> d'un type d'entité ou d'un type complexe.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la colonne de base de données utilisée pour stocker la propriété.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété.Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configure la manière dont les valeurs pour la propriété sont générées par la base de données.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.La définition de « Null » entraîne l'utilisation de l'option par défaut, qui peut être « None », « Identity » ou « Computed » selon le type de la propriété, sa sémantique dans le modèle (par ex.les clés primaires sont traitées différemment), ainsi que les jeux de conventions utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Configure la précision de la propriété.Si le fournisseur de base de données ne prend pas en charge la précision pour le type de données de la colonne, cette valeur est ignorée.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="value">Précision de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="concurrencyToken">Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non.L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété.L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>Configure la propriété pour qu'elle soit de type facultatif.La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>Configure la propriété pour qu'elle soit de type obligatoire.La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null.Les propriétés <see cref="T:System.DateTime" /> sont requises par défaut.</summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>Permet de configurer une propriété <see cref="T:System.decimal" /> d'un type d'entité ou d'un type complexe.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la colonne de base de données utilisée pour stocker la propriété.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété.Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configure la manière dont les valeurs pour la propriété sont générées par la base de données.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.La définition de « Null » entraîne l'utilisation de l'option par défaut, qui peut être « None », « Identity » ou « Computed » selon le type de la propriété, sa sémantique dans le modèle (par ex.les clés primaires sont traitées différemment), ainsi que les jeux de conventions utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Configure la précision et l'échelle de la propriété.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="precision">Précision de la propriété.</param>
      <param name="scale">Échelle de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="concurrencyToken">Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non.L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété.L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>Configure la propriété pour qu'elle soit de type facultatif.La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>Configure la propriété pour qu'elle soit de type obligatoire.La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null.Les propriétés <see cref="T:System.decimal" /> sont requises par défaut.</summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour une procédure stockée utilisée pour supprimer des entités.</summary>
      <typeparam name="TEntityType">Type d'entité pour la suppression duquel la procédure stockée peut être utilisée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet auquel comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Récupère le code de hachage de l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType">
      <summary>Récupère le type de l'instance actuelle.</summary>
      <returns>Type de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
      <param name="schemaName">Nom du schéma.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configure les paramètres pour une relation dans laquelle la propriété de clé étrangère n'est pas incluse dans la classe.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration.</param>
      <typeparam name="TPrincipalEntityType">Type de l'entité principale dans la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configure les paramètres pour une relation dans laquelle la propriété de clé étrangère n'est pas incluse dans la classe.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration.</param>
      <typeparam name="TPrincipalEntityType">Type de l'entité principale dans la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Configure le paramètre de sortie qui retourne les lignes affectées par cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString">
      <summary>Convertit la valeur de l'instance actuelle en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>Configure une relation qui peut prendre en charge les propriétés de clé étrangère qui sont exposées dans le modèle objet.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TDependentEntityType">Type d'entité dépendant.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage de l'objet actif.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure la relation pour qu'elle utilise les propriétés de clé étrangère exposées dans le modèle objet.Si les propriétés de clé étrangère ne sont pas exposées dans le modèle objet, utilisez la méthode de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="foreignKeyExpression">Expression lambda représentant la propriété à utiliser comme clé étrangère.Si la clé étrangère est composée de plusieurs propriétés, indiquez un type anonyme incluant les propriétés.Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité principal.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>Configure le mappage de tables et de colonnes pour un type d'entité ou un sous-ensemble de propriétés d'un type d'entité.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Type d'entité à mapper.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la table à laquelle cette entité est mappée.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la table, comme lors de la création de migrations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>Remappe toutes les propriétés héritées des types de base.Lorsque vous configurez un type dérivé pour le mapper dans une table séparée, toutes les propriétés sont incluses dans la table et pas seulement les propriétés non héritées.C'est ce que l'on appelle le mappage de tables par type concret.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure les propriétés à inclure dans ce fragment de mappage.Si cette méthode n'est pas appelée, alors toutes les propriétés qui n'ont pas encore été incluses dans un fragment de mappage seront configurées.</summary>
      <param name="propertiesExpression">Expression lambda dans un type anonyme qui contient les propriétés à mapper.C# : t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net: Function(t) New With { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">Type anonyme incluant les propriétés à mapper.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Configure une propriété <see cref="T:System.byte[]" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Configure une propriété <see cref="T:DbGeography" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Configure une propriété <see cref="T:DbGeometry" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Configure une propriété <see cref="T:System.DateTime" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Configure une propriété <see cref="T:System.DateTimeOffset" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Configure une propriété <see cref="T:System.decimal" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Configure une propriété <see cref="T:System.DateTime?" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Configure une propriété <see cref="T:System.DateTimeOffset?" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Configure une propriété <see cref="T:System.decimal?" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Configure une propriété <see cref="T:System.TimeSpan?" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Configure une propriété <see cref="T:System.struct?" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Type de la propriété qui est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Configure une propriété <see cref="T:System.string" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Configure une propriété <see cref="T:System.TimeSpan" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure une propriété <see cref="T:System.struct" /> qui est incluse dans ce fragment de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Type de la propriété qui est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure la condition de discriminateur utilisée pour distinguer les types dans une hiérarchie d'héritage.</summary>
      <returns>Objet de configuration pouvant être utilisé pour configurer davantage la condition de discriminateur.</returns>
      <param name="property">Expression lambda représentant la propriété utilisée pour distinguer les types.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Type de la propriété qui est utilisée pour distinguer des types.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>Configure la colonne de discriminateur utilisée pour distinguer les types dans une hiérarchie d'héritage.</summary>
      <returns>Objet de configuration pouvant être utilisé pour configurer davantage la colonne et les valeurs de discriminateur.</returns>
      <param name="discriminator">Nom de la colonne de discriminateur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>Configure le nom de la table vers lequel le mappage doit être effectué.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>Configure le nom et le schéma de la table vers lesquels le mappage doit être effectué.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Configure le mappage de table et de colonne d'une relation qui n'expose pas les propriétés de clé étrangère dans le modèle objet.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="other">Objet <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Un objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour une colonne de base de données qui a été configurée avec <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])" />.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance ForeignKeyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="keyColumnName">Nom de la colonne qui a été configurée avec la méthode HasKey.</param>
      <param name="annotationName">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>Configure le nom de la colonne pour la clé étrangère.</summary>
      <returns>La même instance ForeignKeyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="keyColumnNames">Noms des colonnes de clé étrangère.Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité cible.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Configure le nom de la table dans laquelle réside la colonne de clé étrangère.La table spécifiée doit déjà être mappée pour le type d'entité.Si vous voulez que les clés étrangères résident dans leur propre table, utilisez la méthode de mappage sur <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> pour effectuer le fractionnement d'entités et créer la table avec la propriété de clé primaire uniquement.Les clés étrangères peuvent ensuite être ajoutées dans la table à l'aide de cette méthode.</summary>
      <returns>La même instance ForeignKeyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Configure le nom et le schéma de la table dans laquelle réside la colonne de clé étrangère.La table spécifiée doit déjà être mappée pour le type d'entité.Si vous voulez que les clés étrangères résident dans leur propre table, utilisez la méthode de mappage sur <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> pour effectuer le fractionnement d'entités et créer la table avec la propriété de clé primaire uniquement.Les clés étrangères peuvent ensuite être ajoutées dans la table à l'aide de cette méthode.</summary>
      <returns>La même instance ForeignKeyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Configure une relation qui ne peut prendre en charge que les propriétés de clé étrangère qui ne sont pas exposées dans le modèle objet.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'actuel </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Configure la relation pour qu'elle utilise les propriétés de clé étrangère qui ne sont pas exposées dans le modèle objet.Les colonnes et la table peuvent être personnalisées en indiquant une action de configuration.Si une action de configuration vide est spécifiée, le ou les noms de colonne seront générés par convention.Si les propriétés de clé étrangère sont exposées dans le modèle objet, utilisez la méthode HasForeignKey.Toutes les relations ne prennent pas en charge l'exposition de propriétés de clé étrangère dans le modèle objet.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="configurationAction">Action qui configure la table et les colonnes de clé étrangère.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>Représente l'autorisation de l'exécution de la configuration pour une procédure stockée utilisée pour insérer des entités.</summary>
      <typeparam name="TEntityType">Type d'entité pour l'insertion duquel la procédure stockée peut être utilisée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifique.</summary>
      <returns>true si cette instance est identique à un objet spécifique ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Obtient le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType">
      <summary>Obtient le type de cette instance.</summary>
      <returns>Type de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
      <param name="schemaName">Nom du schéma.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configure les paramètres pour une relation dans laquelle la propriété de clé étrangère n'est pas incluse dans la classe.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration.</param>
      <typeparam name="TPrincipalEntityType">Type de l'entité principale dans la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configure les paramètres pour une relation dans laquelle la propriété de clé étrangère n'est pas incluse dans la classe.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration.</param>
      <typeparam name="TPrincipalEntityType">Type de l'entité principale dans la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>Permet de configurer une colonne avec des facettes de longueur pour un type d'entité ou un type complexe.Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configure la colonne pour qu'elle atteigne la longueur maximale spécifiée.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value">Longueur maximale de la colonne.L'affectation de la valeur Null supprime les restrictions sur la longueur maximale de la colonne et une longueur par défaut est utilisée pour la colonne de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Configure la colonne pour qu'elle soit de longueur fixe.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>Configure la colonne pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>Configure la colonne pour qu'elle soit de longueur variable.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>Permet de configurer une propriété avec des facettes de longueur pour un type d'entité ou un type complexe.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée.</summary>
      <returns>La même instance de LengthPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="value">Longueur maximale pour la propriété.L'affectation de la valeur Null supprime les restrictions sur la longueur maximale de la propriété et une longueur par défaut est utilisée pour la colonne de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>Configure la propriété pour qu'elle soit de longueur fixe.Utilisez la valeur HasMaxLength pour définir la longueur de la propriété.</summary>
      <returns>La même instance de LengthPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>Configure la propriété pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données.</summary>
      <returns>La même instance de LengthPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>Configure la propriété pour qu'elle soit de longueur variable.Par défaut, les propriétés sont de longueur variable.</summary>
      <returns>La même instance de LengthPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>Configure une relation de type plusieurs à partir d'un type d'entité.</summary>
      <typeparam name="TEntityType">Type d'entité d'où provient la relation.</typeparam>
      <typeparam name="TTargetEntityType">Type d'entité ciblé par la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>Configure la relation pour qu'elle soit de type plusieurs:plusieurs sans propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Configure la relation pour qu'elle soit de type plusieurs:plusieurs avec une propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>Configure la relation pour qu'elle soit de type plusieurs:facultatif sans propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type plusieurs:facultatif avec une propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>Configure la relation pour qu'elle soit de type plusieurs:obligatoire sans propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type plusieurs:obligatoire avec une propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>Configure le mappage de tables et de colonnes d'une relation de type plusieurs:plusieurs.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="other">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage de l'objet actif.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la table de jointure.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la table, comme lors de la création de migrations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>Configure le nom de la colonne pour la clé étrangère de gauche.La clé étrangère de gauche pointe vers l'entité parent de la propriété de navigation indiquée dans l'appel de HasMany.</summary>
      <returns>La même instance ManyToManyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="keyColumnNames">Noms des colonnes de clé étrangère.Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité cible.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>Configure le nom de la colonne pour la clé étrangère de droite.La clé étrangère de droite pointe vers l'entité parent de la propriété de navigation indiquée dans l'appel de WithMany.</summary>
      <returns>La même instance ManyToManyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="keyColumnNames">Noms des colonnes de clé étrangère.Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité cible.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Configure le nom de la table de jointures pour la relation.</summary>
      <returns>La même instance ManyToManyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Configure le nom et le schéma de la table de jointures pour la relation.</summary>
      <returns>La même instance ManyToManyAssociationMappingConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>Autorise l'exécution de la configuration pour une procédure stockée utilisée pour modifier une relation plusieurs-à-plusieurs.</summary>
      <typeparam name="TEntityType">Type de l'entité à partir duquel la relation est configurée.</typeparam>
      <typeparam name="TTargetEntityType">Type de l'entité ciblé par l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode">
      <summary>Récupère le code de hachage de l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType">
      <summary>Récupère le type de cette instance actuelle.</summary>
      <returns>Type de cette instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>Définit le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>Définit le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure.</param>
      <param name="schemaName">Nom du schéma.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de gauche.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de gauche.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de gauche.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de gauche.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de droite.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de droite.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de droite.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>Configure le paramètre pour les valeurs de clé de droite.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString">
      <summary>Convertit la valeur de l'instance actuelle en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>Autorise l'exécution de la configuration pour une procédure stockée utilisée pour modifier une relation plusieurs-à-plusieurs.</summary>
      <typeparam name="TEntityType">Type de l'entité à partir duquel la relation est configurée.</typeparam>
      <typeparam name="TTargetEntityType">Type de l'entité ciblé par l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Configure la procédure stockée utilisée pour supprimer les relations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode">
      <summary>Récupère le code de hachage de l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Configure la procédure stockée utilisée pour insérer des relations.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString">
      <summary>Convertit la valeur de l'instance actuelle en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>Configure une relation de type plusieurs:plusieurs.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Type de l'entité parent de la propriété de navigation indiquée dans l'appel de HasMany.</typeparam>
      <typeparam name="TTargetEntityType">Type de l'entité parent de la propriété de navigation indiquée dans l'appel de WithMany.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>Configure la table et les colonnes de clés étrangères utilisées pour stocker la relation.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="configurationAction">Action qui configure la table et les colonnes de clé étrangère.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>Configure les procédures stockées à utiliser pour modifier cette relation.Les conventions par défaut pour les noms de procédure et de paramètre seront utilisées.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>Configure les procédures stockées à utiliser pour modifier cette relation.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Configuration pour remplacer les conventions par défaut pour les noms de procédure et de paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>Effectue la configuration d'une procédure stockée utilisée pour modifier une entité dans la base de données.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour une procédure stockée utilisée pour modifier des entités.</summary>
      <typeparam name="TEntityType">Type d'entité pour la modification duquel cette procédure stockée peut être utilisée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>Configure la procédure stockée utilisée pour supprimer des entités.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifié.</summary>
      <returns>true si cette instance est identique à un objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode">
      <summary>Obtient le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>Configure la procédure stockée utilisée pour insérer des entités.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>Configure la procédure stockée utilisée pour mettre à jour les entités.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration pour la procédure stockée.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>Configure une condition utilisée pour distinguer les types dans une hiérarchie d'héritage basée sur les valeurs affectées à une propriété.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage de l'objet actif.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>Configure la condition pour exiger une valeur dans la propriété.Les lignes qui n'ont pas de valeur affectée à la colonne dans laquelle cette propriété est stockée sont supposées être du type de base de ce type d'entité.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Configure une relation de type facultatif à partir d'un type d'entité.</summary>
      <typeparam name="TEntityType">Type d'entité d'où provient la relation.</typeparam>
      <typeparam name="TTargetEntityType">Type d'entité ciblé par la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>Configure la relation pour qu'elle soit de type facultatif:plusieurs sans propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Configure la relation pour qu'elle soit de type facultatif:plusieurs avec une propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>Configure la relation pour qu'elle soit de type facultatif:facultatif sans propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type facultatif:facultatif avec une propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>Configure la relation pour qu'elle soit de type facultatif:facultatif sans propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré représentera le type d'entité principal de la relation.Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type facultatif:facultatif avec une propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré représentera le type d'entité principal de la relation.Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Configure la relation pour qu'elle soit de type facultatif:obligatoire sans propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type facultatif:obligatoire avec une propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Configure une colonne primitive à partir d'un type d'entité.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configure l'ordre de la colonne primitive utilisée pour stocker la propriété.Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne primitive utilisée pour stocker la propriété.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Configure la colonne primitive pour qu'elle soit de type facultatif.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Configure la colonne primitive pour qu'elle soit de type obligatoire.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>Fournit des méthodes utilisées pour configurer une propriété primitive d'un type d'entité ou d'un type complexe.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si cette instance est identique à l'objet spécifié.</summary>
      <returns>true si cette instance est identique à l'objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la colonne de base de données utilisée pour stocker la propriété.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété.Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configure la manière dont les valeurs pour la propriété sont générées par la base de données.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.La définition de « Null » entraîne l'utilisation de l'option par défaut, qui peut être « None », « Identity » ou « Computed » selon le type de la propriété, sa sémantique dans le modèle (par ex.les clés primaires sont traitées différemment), ainsi que les jeux de conventions utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Configure le nom du paramètre utilisé dans les procédures stockées pour cette propriété.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="concurrencyToken">Valeur indiquant si la propriété est, ou non, un jeton d'accès concurrentiel.L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété.L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>Configure la propriété pour qu'elle soit de type facultatif.La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>Configure la propriété pour qu'elle soit de type obligatoire.La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null.</summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>Autorise l'exécution de la configuration pour une convention simplifiée basée sur les propriétés d'un modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>Autorise la configuration des propriétés auxquelles cette convention s'applique.</summary>
      <param name="propertyConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>Filtre les propriétés auxquelles cette convention s'applique en fonction d'un prédicat, tout en capturant une valeur à utiliser ultérieurement lors de la configuration.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="capturingPredicate">Fonction permettant de capturer la valeur de chaque propriété.Si la valeur est Null, la propriété est filtrée.</param>
      <typeparam name="T">Type de la valeur capturée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Objet en cours.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>Filtre les propriétés que cette convention applique en fonction d'un prédicat.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="predicate">Fonction permettant de tester chaque propriété par rapport à une condition.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour une convention simplifiée basée sur les propriétés des types d'entités d'un modèle et une valeur capturée.</summary>
      <typeparam name="T">Type de la valeur capturée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>Autorise la configuration des propriétés auxquelles cette convention s'applique.</summary>
      <param name="propertyConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> à l'aide d'une valeur capturée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>Utilisé pour configurer une propriété dans un fragment de mappage.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la colonne de base de données utilisée pour stocker la propriété.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance PropertyMappingConfiguration qui permet de chaîner plusieurs appels.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété dans un fragment de mappage.</summary>
      <returns>La même instance PropertyMappingConfiguration qui permet de chaîner plusieurs appels.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>Configure une relation obligatoire à partir d'un type d'entité.</summary>
      <typeparam name="TEntityType">Type d'entité d'où provient la relation.</typeparam>
      <typeparam name="TTargetEntityType">Type d'entité ciblé par la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Spécifie si l'objet spécifié est identique à l'objet actif.</summary>
      <returns>true si l'objet spécifié est identique à l'objet actif ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Obtient le code de hachage associé à l'objet actif.</summary>
      <returns>Code de hachage associé à l'objet actif.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Retourne une chaîne représentant l'objet actuel.</summary>
      <returns>Représentation sous forme de chaîne de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:plusieurs sans propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:plusieurs avec une propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:facultatif sans propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:facultatif avec une propriété de navigation à l'autre extrémité de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:obligatoire sans propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:obligatoire avec une propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:obligatoire sans propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré représentera le type d'entité principal de la relation.Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la relation pour qu'elle soit de type obligatoire:obligatoire avec une propriété de navigation à l'autre extrémité de la relation.Le type d'entité configuré représentera le type d'entité principal de la relation.Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>Configure une colonne de base de données utilisée pour stocker des valeurs de chaîne.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configure l'ordre de la colonne de base de données.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne de base de données.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="value">Longueur maximale pour la propriété.L'affectation de la valeur 'null' entraîne l'utilisation d'une longueur par défaut pour la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>Configure la colonne pour qu'elle soit de longueur fixe.Utilisez la valeur HasMaxLength pour définir la longueur de la propriété.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>Configure la colonne pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>Configure la colonne pour qu'elle soit de type facultatif.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>Configure la colonne pour qu'elle soit de type obligatoire.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>Configure la colonne pour qu'elle prenne en charge le contenu de chaîne Unicode.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Indique si la colonne prend en charge le contenu de chaîne Unicode.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="unicode">Valeur indiquant si la colonne prend en charge le contenu de chaîne Unicode.L'affectation de la valeur Null supprime la facette Unicode de la colonne.L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>Configure la colonne pour qu'elle soit de longueur variable.Par défaut, les colonnes sont de longueur variable.</summary>
      <returns>La même instance de StringColumnConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Permet de configurer une propriété <see cref="T:System.string" /> d'un type d'entité ou d'un type complexe.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Définit une annotation dans le modèle pour la colonne de base de données utilisée pour stocker la propriété.La valeur d'annotation peut être utilisée ultérieurement lors du traitement de la colonne, comme lors de la création de migrations.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="name">Nom de l'annotation, qui doit être un identificateur C#/EDM valide.</param>
      <param name="value">Valeur d'annotation, qui peut être une chaîne ou un autre type pouvant être sérialisé avec un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété.Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>Configure le type de données de la colonne de base de données utilisée pour stocker la propriété.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configure la manière dont les valeurs pour la propriété sont générées par la base de données.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.La définition de « Null » entraîne l'utilisation de l'option par défaut, qui peut être « None », « Identity » ou « Computed » selon le type de la propriété, sa sémantique dans le modèle (par ex.les clés primaires sont traitées différemment), ainsi que les jeux de conventions utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="value">Longueur maximale pour la propriété.L'affectation de la valeur Null supprime les restrictions sur la longueur maximale de la propriété et une longueur par défaut est utilisée pour la colonne de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="concurrencyToken">Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non.L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété.L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Configure la propriété pour qu'elle soit de longueur fixe.Utilisez la valeur HasMaxLength pour définir la longueur de la propriété.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Configure la propriété pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Configure la propriété pour qu'elle soit de type facultatif.La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null.Les propriétés <see cref="T:System.string" /> sont facultatives par défaut.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>Configure la propriété pour qu'elle soit de type obligatoire.La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Configure la propriété pour prendre en charge le contenu de chaîne Unicode.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Indique si la propriété prend en charge le contenu de chaîne Unicode.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="unicode">Valeur indiquant si la propriété prend en charge le contenu de chaîne Unicode.L'affectation de la valeur Null supprime la facette Unicode de la propriété.L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Configure la propriété pour qu'elle soit de longueur variable.Les propriétés <see cref="T:System.string" /> sont de longueur variable par défaut.</summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour un type dans un modèle.</summary>
      <typeparam name="TStructuralType">Type à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer avec l'objet actif.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Configure une propriété <see cref="T:System.byte[]" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Configure une propriété <see cref="T:DbGeography" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Configure une propriété <see cref="T:DbGeometry" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Configure une propriété <see cref="T:System.DateTime" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Configure une propriété <see cref="T:System.DateTimeOffset" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Configure une propriété <see cref="T:System.decimal" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Configure une propriété <see cref="T:System.DateTime?" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Configure une propriété <see cref="T:System.DateTimeOffset?" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Configure une propriété <see cref="T:System.decimal?" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Configure une propriété <see cref="T:System.TimeSpan?" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Configure une propriété <see cref="T:System.struct?" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Type de la propriété qui est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Configure une propriété <see cref="T:System.string" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Configure une propriété <see cref="T:System.TimeSpan" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configure une propriété <see cref="T:System.struct" /> définie sur ce type.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Type de la propriété qui est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>Autorise l'exécution de la configuration pour une convention simplifiée basée sur les types d'entités d'un modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>Autorise la configuration des types d'entités auxquels cette convention s'applique.</summary>
      <param name="entityConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifié.</summary>
      <returns>true si cette instance est identique à un objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
      <summary>Obtient le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>Filtre les types d'entités auxquels cette convention s'applique en fonction d'un prédicat, tout en capturant une valeur à utiliser ultérieurement lors de la configuration.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="capturingPredicate">Fonction permettant de capturer la valeur de chaque type d'entité.Si la valeur est Null, le type d'entité est filtré.</param>
      <typeparam name="T">Type de la valeur capturée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>Filtre les types d'entités que cette convention applique en fonction d'un prédicat.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="predicate">Fonction permettant de tester chaque type d'entité par rapport à une condition.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour une convention simplifiée basée sur les types d'entités d'un modèle qui héritent d'un type spécifié commun.</summary>
      <typeparam name="T">Type commun des types d'entités auxquels cette convention s'applique.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>Autorise la configuration des types d'entités auxquels cette convention s'applique.</summary>
      <param name="entityConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifié.</summary>
      <returns>true si cette instance est identique à un objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
      <summary>Obtient le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>Filtre les types d'entités auxquels cette convention s'applique en fonction d'un prédicat, tout en capturant une valeur à utiliser ultérieurement lors de la configuration.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="capturingPredicate">Fonction permettant de capturer la valeur de chaque type d'entité.Si la valeur est Null, le type d'entité est filtré.</param>
      <typeparam name="TValue">Type de la valeur capturée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>Filtre les types d'entités que cette convention applique en fonction d'un prédicat.</summary>
      <returns>Instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="predicate">Fonction permettant de tester chaque type d'entité par rapport à une condition.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour une convention simplifiée basée sur les types d'entités d'un modèle et une valeur capturée.</summary>
      <typeparam name="T">Type de la valeur capturée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>Autorise la configuration des types d'entités auxquels cette convention s'applique.</summary>
      <param name="entityConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> à l'aide d'une valeur capturée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet auquel comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
      <summary>Récupère le code de hachage de l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
      <summary>Convertit une valeur de l'instance actuelle en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>Autorise l'exécution de la configuration pour une convention simplifiée basée sur les types d'entités d'un modèle qui héritent d'un type spécifié commun et d'une valeur capturée.</summary>
      <typeparam name="T">Type commun des types d'entités auxquels cette convention s'applique.</typeparam>
      <typeparam name="TValue">Type de la valeur capturée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>Autorise la configuration des types d'entités auxquels cette convention s'applique.</summary>
      <param name="entityConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> à l'aide d'une valeur capturée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
      <summary>Spécifie si cette instance est identique à un objet spécifié.</summary>
      <returns>true si cette instance est identique à un objet spécifié ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
      <summary>Obtient le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
      <summary>Retourne une représentation sous forme de chaîne de cette instance.</summary>
      <returns>Représentation sous forme de chaîne de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour une procédure stockée qui est utilisée pour mettre à jour les entités.</summary>
      <typeparam name="TEntityType">Type d'entité pour la mise à jour duquel la procédure stockée peut être utilisée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié équivaut à cet objet d'instance.</summary>
      <returns>true si l'objet spécifié équivaut à cet objet d'instance ; sinon, false.</returns>
      <param name="obj">Objet à comparer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Récupère le code de hachage.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType">
      <summary>Récupère le type de cette configuration.</summary>
      <returns>Type de cette configuration.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Configure le nom de la procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="procedureName">Nom de la procédure stockée.</param>
      <param name="schemaName">Nom du schéma.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configure les paramètres pour une relation dans laquelle la propriété de clé étrangère n'est pas incluse dans la classe.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration.</param>
      <typeparam name="TPrincipalEntityType">Type de l'entité principale dans la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configure les paramètres pour une relation dans laquelle la propriété de clé étrangère n'est pas incluse dans la classe.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="navigationPropertyExpression">Expression lambda représentant la propriété de navigation de la relation.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Expression lambda qui effectue la configuration.</param>
      <typeparam name="TPrincipalEntityType">Type de l'entité principale dans la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>Configure un paramètre pour cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le paramètre.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Valeur actuelle du nom du paramètre.</param>
      <param name="originalValueParameterName">Valeur d'origine du nom du paramètre.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configure une colonne du résultat pour cette procédure stockée à mapper à une propriété.Utilisé pour les colonnes générées à partir d'une base de données.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété pour laquelle configurer le résultat.C# : t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nom de la colonne de résultat.</param>
      <typeparam name="TProperty">Type de la propriété à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Configure le paramètre de sortie qui retourne les lignes affectées par cette procédure stockée.</summary>
      <returns>La même instance de configuration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="parameterName">Nom du paramètre.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString">
      <summary>Convertit la valeur de cette instance en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de la valeur de cette instance.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>Configure une colonne de discriminateur utilisée pour distinguer les types dans une hiérarchie d'héritage.Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Obtient le <see cref="T:System.Type" /> de l'instance actuelle.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Configure la valeur de discriminateur utilisée pour identifier le type d'entité configuré à partir d'autres types dans la hiérarchie d'héritage.</summary>
      <returns>Objet de configuration permettant de configurer la colonne utilisée pour stocker les valeurs de discriminateur.</returns>
      <param name="value">Valeur à utiliser pour identifier le type d'entité.</param>
      <typeparam name="T">Type de la valeur de discriminateur.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Configure la valeur de discriminateur utilisée pour identifier le type d'entité configuré à partir d'autres types dans la hiérarchie d'héritage.</summary>
      <returns>Objet de configuration permettant de configurer la colonne utilisée pour stocker les valeurs de discriminateur.</returns>
      <param name="value">Valeur à utiliser pour identifier le type d'entité.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>Configure la valeur de discriminateur utilisée pour identifier le type d'entité configuré à partir d'autres types dans la hiérarchie d'héritage.</summary>
      <returns>Objet de configuration permettant de configurer la colonne utilisée pour stocker les valeurs de discriminateur.</returns>
      <param name="value">Valeur à utiliser pour identifier le type d'entité.</param>
      <typeparam name="T">Type de la valeur de discriminateur.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Fournit une convention qui permet de détecter les propriétés de navigation pour qu'elles soient inversées les unes par rapport aux autres lorsqu'une seule paire de propriétés de navigation existe entre les types associés.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
      <summary>Classe polyvalente pour les conventions Code First qui lisent les attributs des propriétés .NET et génèrent des annotations de colonne d'après ces attributs.</summary>
      <typeparam name="TAttribute">Type d'attribut à découvrir.</typeparam>
      <typeparam name="TAnnotation">Type de l'annotation qui sera créée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
      <summary>Construit une convention qui créera des annotations de colonne avec le nom spécifié et avec le délégué de la fabrique donné.</summary>
      <param name="annotationName">Nom des annotations à créer.</param>
      <param name="annotationFactory">Fabrique pour créer l'annotation sur chaque colonne.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
      <summary>Classe polyvalente pour les conventions Code First qui lisent les attributs de types .NET et génèrent des annotations de table d'après ces attributs.</summary>
      <typeparam name="TAttribute">Type d'attribut à découvrir.</typeparam>
      <typeparam name="TAnnotation">Type de l'annotation qui sera créée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
      <summary>Construit une convention qui créera les annotations de table portant le nom spécifié et avec le délégué de la fabrique donné.</summary>
      <param name="annotationName">Nom des annotations à créer.</param>
      <param name="annotationFactory">Fabrique pour créer l'annotation sur chaque table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)">
      <summary>Applique la convention à la configuration spécifiée.</summary>
      <param name="configuration">Configuration.</param>
      <param name="attribute">Attribut de la colonne.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>Représente une convention qui permet d'appliquer l'ordre des colonnes indiqué à l'aide de <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> ou de l'API <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la configuration à l'élément spécifié dans le modèle de mappage.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle de mappage.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Valide la configuration de tri fournie pour les colonnes.Cette implémentation de base correspond à une absence d'opération.</summary>
      <param name="table">Nom de la table à laquelle les colonnes appartiennent.</param>
      <param name="tableName">Définition de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>Convention qui permet d'appliquer l'ordre des colonnes indiqué à l'aide de <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> ou de l'API <see cref="T:System.Data.Entity.DbModelBuilder" />.Cette convention lève une exception si un ordre des colonnes configuré en double est détecté.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Valide la configuration de tri fournie pour les colonnes afin de s'assurer que le même ordinal n'a pas été fourni pour deux colonnes.</summary>
      <param name="table">Nom de la table à laquelle les colonnes appartiennent.</param>
      <param name="tableName">Définition de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Représente la convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> trouvées dans les types du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)">
      <summary>Applique la convention avec la configuration et l'attribut donnés.</summary>
      <param name="configuration">Configuration.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Représente une convention qui permet de configurer un type comme type complexe s'il ne possède pas de clé primaire, de type de base mappé et de propriétés de navigation.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la configuration à l'élément spécifié dans le modèle de mappage.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle de mappage.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Représente la convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)">
      <summary>Applique cette convention à une propriété.</summary>
      <param name="configuration">Configuration de la propriété comportant l'attribut.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>Convention qui ne remplace pas la configuration.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>La classe dérivée peut utiliser le constructeur par défaut pour appliquer une règle définie qui modifie la configuration du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>Démarre la configuration d'une convention légère qui s'applique à toutes les propriétés du modèle.</summary>
      <returns>Objet de configuration pour la convention.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>Démarre la configuration d'une convention légère qui s'applique à toutes les propriétés primitives du type spécifié dans le modèle.</summary>
      <returns>Objet de configuration pour la convention.</returns>
      <typeparam name="T">Type de propriétés auxquelles cette convention s'applique.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>Démarre la configuration d'une convention légère qui s'applique à tous les types mappés du le modèle qui dérivent du type spécifié ou qui implémentent ce type.</summary>
      <returns>Objet de configuration pour la convention.</returns>
      <typeparam name="T">Type d'entités auxquelles cette convention s'applique.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>Démarre la configuration d'une convention légère qui s'applique à tous les types mappés du modèle.</summary>
      <returns>Objet de configuration pour la convention.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)">
      <summary>Applique la convention à l'attribut avec la configuration donnée.</summary>
      <param name="configuration">Configuration.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Convention qui permet de définir la précision à 18 et l'échelle à 2 pour les propriétés décimales.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> avec les valeurs par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> avec la précision et l'échelle spécifiées.</summary>
      <param name="precision">Précision</param>
      <param name="scale">Échelle</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à une propriété.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Représente une convention qui permet de déplacer les propriétés de clé primaire pour qu'elles apparaissent en premier.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Représente une convention qui permet de distinguer des relations facultatives et des relations obligatoires en fonction de l'acceptation de la valeur Null du CLR de la propriété de clé étrangère.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la configuration à l'élément spécifié dans le modèle de mappage.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle de mappage.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>Représente une classe de base pour les conventions qui détectent les propriétés de clé étrangère.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à une propriété.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>En cas de substitution, retourne true si <paramref name="dependentProperty" /> doit faire partie de la clé étrangère.</summary>
      <returns>true si dependentProperty doit faire partie de la clé étrangère ; sinon, false.</returns>
      <param name="associationType">Type d'association en cours de configuration.</param>
      <param name="dependentAssociationEnd">Terminaison dépendante.</param>
      <param name="dependentProperty">Propriété candidate sur la terminaison dépendante.</param>
      <param name="principalEntityType">Type de l'entité de terminaison principale.</param>
      <param name="principalKeyProperty">Propriété de clé sur la terminaison principale qui correspond à une cible candidate pour la clé étrangère.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Détermine si la convention prend en charge des paires de types d'entités entre lesquelles plusieurs associations sont définies.</summary>
      <returns>true si la convention prend en charge des paires de types d'entités entre lesquelles plusieurs associations sont définies ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
      <summary>Représente une convention permettant de présenter les index des clés étrangères.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à une propriété.</summary>
      <param name="item">Élément.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> trouvées dans les propriétés de navigation du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle de base de données.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Représente une convention qui permet de traiter des instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> trouvées dans les propriétés de clé étrangère du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)">
      <summary>Applique la configuration à l'attribut spécifié.</summary>
      <param name="memberInfo">Informations liées aux propriétés.</param>
      <param name="configuration">Configuration à exécuter pour un type d'entité dans un modèle.</param>
      <param name="attribute">Propriété ou classe exclue du mappage de base de données.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>Convention qui utilise la section conceptuelle du modèle une fois le modèle créé.</summary>
      <typeparam name="T">Type d'élément de métadonnées que cette convention utilise.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Identifie les conventions qui peuvent être ajoutées ou supprimées d'une instance <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Convention qui permet de détecter les propriétés de clé primaire.Les modèles d'affectation de noms reconnus sont, par ordre de priorité : 1. 'Id' 2.[type name]Id La détection de clé primaire ne respecte pas la casse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Convention de correspondre avec la classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Classe <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> à mettre en correspondance.</returns>
      <param name="entityType">Type d'entité.</param>
      <param name="primitiveProperties">Collection de propriétés primitives.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
      <summary>Convention de découverte des attributs <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> sur les propriétés et de génération des annotations de colonne <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> dans le modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
      <summary>Construit une nouvelle instance de la convention.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
      <summary>Applique la convention à l'attribut spécifié avec la configuration.</summary>
      <param name="memberInfo">Informations de membre.</param>
      <param name="configuration">Configuration.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>Convention qui utilise la section de base de données du modèle une fois le modèle créé.</summary>
      <typeparam name="T">Type d'élément de métadonnées que cette convention utilise.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>Représente une classe de base pour les conventions qui détectent les propriétés de clé primaire.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>En cas de substitution, retourne le sous-ensemble de propriétés qui fera partie de la clé primaire.</summary>
      <returns>Propriétés qui doivent faire partie de la clé primaire.</returns>
      <param name="entityType">Type d'entité.</param>
      <param name="primitiveProperties">Types primitifs des entités.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Convention qui permet d'ajouter une suppression en cascade à la table de jointures à partir des tables impliquées dans une relation plusieurs-à-plusieurs.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Convention qui permet de garantir que les propriétés héritées du mappage ne créent pas de mappage non valide ou non pris en charge</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
      <summary>Applique la convention à l'attribut avec la configuration spécifiée.</summary>
      <param name="configuration">Configuration.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Convention qui permet de découvrir les propriétés de clé étrangère dont les noms représentent une combinaison du nom de la propriété de navigation dépendante et des noms de propriétés de clé primaire du type principal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Fait correspondre la clé du modèle d'entité dépendant.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
      <param name="associationType">Objet de métadonnées de type d'associations.</param>
      <param name="dependentAssociationEnd">Fin de l'association dépendante.</param>
      <param name="dependentProperty">Propriété dépendante.</param>
      <param name="principalEntityType">Type de l'entité principale</param>
      <param name="principalKeyProperty">Propriété de clé principale.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Obtient ou définit une valeur qui indique si la convention prend en charge plusieurs associations.</summary>
      <returns>true si la convention prend en charge plusieurs associations ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>Applique la configuration à l'attribut spécifié.</summary>
      <param name="memberInfo">Informations liées aux propriétés.</param>
      <param name="configuration">Configuration à exécuter pour un type d'entité dans un modèle.</param>
      <param name="attribute">Propriété ou classe exclue du mappage de base de données.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> trouvées dans les types du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>Applique la configuration à l'attribut spécifié.</summary>
      <param name="configuration">Configuration à exécuter pour un type d'entité dans un modèle.</param>
      <param name="attribute">Propriété ou classe exclue du mappage de base de données.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Fournit une convention qui permet d'activer la suppression en cascade pour n'importe quelle relation obligatoire.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle de base de données.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Fournit une convention qui permet de configurer les clés primaires du type d'entité dépendant comme clés étrangères dans une relation un-à-un.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle de base de données.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Représente une convention qui permet de définir le nom du jeu d'entités comme une version pluralisée du nom du type d'entité.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à une propriété.</summary>
      <param name="item">Jeu d'entités.</param>
      <param name="model">Modèle de base de données.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Représente une convention qui permet de définir le nom de table comme une version pluralisée du nom de type d'entité.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique cette convention à un élément dans le modèle.</summary>
      <param name="item">Élément auquel appliquer la convention.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Convention qui permet de découvrir les propriétés de clé étrangère dont les noms correspondent aux noms de propriétés de clé primaire du type principal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Correspond à la propriété de clé dépendante associée à la convention.</summary>
      <returns>Propriété de clé dépendante mappée.</returns>
      <param name="associationType">Type d'association.</param>
      <param name="dependentAssociationEnd">Terminaison d'association dépendante.</param>
      <param name="dependentProperty">Propriété dépendante.</param>
      <param name="principalEntityType">Type de l'entité principale.</param>
      <param name="principalKeyProperty">Propriété de clé principale.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>Classe de base pour les conventions qui traitent les attributs CLR trouvés dans les propriétés primitives du modèle.</summary>
      <typeparam name="TAttribute">Type de l'attribut à rechercher.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>Applique cette convention à une propriété dont l'attribut de type TAttribute a été appliqué.</summary>
      <param name="configuration">Configuration de la propriété comportant l'attribut.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>Classe de base pour les conventions qui traitent les attributs CLR trouvés dans les propriétés de types du modèle.</summary>
      <typeparam name="TAttribute">Type de l'attribut à rechercher.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Applique cette convention à une propriété dont l'attribut de type TAttribute a été appliqué.</summary>
      <param name="memberInfo">Informations de membre pour la propriété comportant l'attribut.</param>
      <param name="configuration">Configuration de la classe qui contient la propriété.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Représente une convention qui permet de définir une longueur maximale pour les propriétés dont le type prend en charge les facettes de longueur.La valeur par défaut est 128.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> avec la longueur par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> avec la longueur spécifiée.</summary>
      <param name="length">Longueur maximale des propriétés.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la convention avec la configuration du modèle donnée.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle de mappage.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la convention avec la configuration du modèle donnée.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle de mappage.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la convention avec la configuration du modèle donnée.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle de mappage.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Convention qui permet d'exécuter des instances de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> trouvées dans les propriétés de navigation du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> trouvées dans les propriétés primitives du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>Applique la convention à l'attribut avec la configuration donnée.</summary>
      <param name="configuration">Configuration.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Représente une convention qui permet de définir une longueur maximum par défaut de 4 000 pour les propriétés dont le type prend en charge les facettes de longueur lorsque SqlCe est le fournisseur.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> avec la longueur par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> avec la longueur spécifiée.</summary>
      <param name="length">Longueur maximale par défaut des propriétés.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la convention au fournisseur donné.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la convention au fournisseur donné.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Représente une convention qui permet de configurer les clés primaires d'entiers comme identité.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Applique la configuration à l'élément spécifié dans le modèle de mappage.</summary>
      <param name="item">Élément.</param>
      <param name="model">Modèle de mappage.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>Applique la convention avec la configuration et l'attribut donnés.</summary>
      <param name="configuration">Configuration.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> trouvées dans les types du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
      <summary>Applique cette convention à une propriété.</summary>
      <param name="configuration">Configuration de la propriété comportant l'attribut.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Représente une convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)">
      <summary>Applique cette convention à une propriété.</summary>
      <param name="configuration">Configuration de la propriété comportant l'attribut.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>Classe de base pour les conventions qui traitent les attributs CLR trouvés dans le modèle.</summary>
      <typeparam name="TAttribute">Type de l'attribut à rechercher.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Applique cette convention à une classe pour laquelle un attribut de type TAttribute a été appliqué.</summary>
      <param name="configuration">Configuration de la classe qui contient la propriété.</param>
      <param name="attribute">L'attribut.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Convention qui permet de découvrir les propriétés de clé étrangère dont les noms représentent une combinaison du nom du type principal et des noms de propriétés de clé primaire du type principal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Détermine si la propriété de la clé dépendante correspond à la clé actuelle.</summary>
      <returns>true si la propriété de la clé dépendante correspond à la clé actuelle ; sinon, false.</returns>
      <param name="associationType">Type d'association.</param>
      <param name="dependentAssociationEnd">Association dépendante de la terminaison.</param>
      <param name="dependentProperty">Propriété dépendante.</param>
      <param name="principalEntityType">Type de l'entité principale.</param>
      <param name="principalKeyProperty">Propriété de clé principale.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>Représente les données dans le système de coordonnées géodésiques (Terre ronde).</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>Obtient une valeur double nullable qui indique la zone de cette valeur DbGeography, qui peut être Null si cette valeur ne représente pas une surface.</summary>
      <returns>Valeur double nullable qui indique la zone de cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>Génère la représentation binaire connue de cette valeur DbGeography.</summary>
      <returns>Représentation binaire connue de cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>Génère la représentation GML (Geography Markup Language) de cette valeur DbGeography.</summary>
      <returns>Chaîne qui contient la représentation GML de cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>Génère la représentation textuelle connue de cette valeur DbGeography.N'inclut que la longitude et la latitude des points.</summary>
      <returns>Chaîne qui contient la représentation textuelle connue de la cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>Retourne un objet géographique représentant l'union de tous les points dont la distance par rapport à une instance de géographie est inférieure ou égale à la valeur spécifiée.</summary>
      <returns>Objet géographique qui représente l'union de tous les points.</returns>
      <param name="distance">Distance.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>Obtient l'identificateur associé au système de coordonnées.</summary>
      <returns>Identificateur associé au système de coordonnées.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>Obtient l'ID du système de coordonnées (SRID) pour les valeurs de géographie (WGS 84).</summary>
      <returns>ID du système de coordonnées (SRID) par défaut pour les valeurs de géographie (WGS 84)</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule la différence entre cette valeur DbGeography et une autre valeur DbGeography.</summary>
      <returns>Nouvelle valeur DbGeography qui représente la différence entre cette valeur de géographie et d'autres.</returns>
      <param name="other">Valeur de géographie pour laquelle la différence par rapport à cette valeur doit être calculée.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>Obtient la dimension de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, ou si la valeur est une collection, la dimension de l'élément le plus grand.</summary>
      <returns>Dimension de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Détermine si cette valeur DbGeography est disjointe spatialement l'argument DbGeography spécifié.</summary>
      <returns>true si l'autre valeur est disjointe de cette valeur de géographie ; sinon, false.</returns>
      <param name="other">Valeur de géographie dont la disjointure doit être comparée par rapport à cette valeur de géographie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule la distance entre les points les plus proches de cette valeur DbGeography et d'une autre valeur DbGeography.</summary>
      <returns>Valeur double qui spécifie la distance entre les deux points les plus proches de cette valeur de géographie et d'autres.</returns>
      <param name="other">valeur de géographie pour laquelle la distance par rapport à cette valeur doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>Retourne un élément de cette valeur DbGeography à une position spécifique, si elle représente une collection de géographies.&amp;amp;lt;param name="index"&amp;amp;gt;Position au sein de cette valeur de géographie à partir de laquelle l'élément doit être pris.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;retourne&amp;amp;gt;Élément de cette valeur de géographie à la position spécifiée, si elle représente une collection d'autres valeurs de géographie ; sinon null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Élément de cette valeur DbGeography à partir d'une position spécifique</returns>
      <param name="index">Index.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>Obtient le nombre d'éléments de cette valeur DbGeography, si elle représente une collection de géographies.&amp;amp;lt;retourne&amp;amp;gt;Nombre d'éléments de cette valeur de géographie, si elle représente une collection d'autres valeurs de géographie ; sinon null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Nombre d'éléments dans cette valeur DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>Obtient l'élévation (Z) de cette valeur DbGeography, si elle représente un point.&amp;amp;lt;retourne&amp;amp;gt;Élévation (Z) de cette valeur de géographie, si elle représente un point ; sinon null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Élévation (Z) de cette valeur DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>Obtient une valeur DbGeography qui représente le point de départ de cette valeur, qui peut être Null si cette valeur DbGeography ne représente pas une courbe.</summary>
      <returns>Valeur DbGeography représentant le point de départ de cette valeur.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue spécifiée.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées de géographie (SRID) par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur GML (Geography Markup Language) spécifiée.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées de géographie (SRID) par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyMarkup">Chaîne qui contient une représentation GML (Geography Markup Language) de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur GML (Geography Markup Language) et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="geographyMarkup">Chaîne qui contient une représentation GML (Geography Markup Language) de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue spécifiée.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées de géographie (SRID) par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géographique.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="geographyCollectionWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="geographyCollectionWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule l'intersection entre cette valeur DbGeography et une autre valeur DbGeography.</summary>
      <returns>Nouvelle valeur DbGeography qui représente l'intersection entre cette valeur de géographie et d'autres.</returns>
      <param name="other">valeur de géographie pour laquelle l'intersection par rapport à cette valeur doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>Détermine si cette valeur DbGeography coupe spatialement l'argument DbGeography spécifié.</summary>
      <returns>true si d'autres valeurs coupent cette valeur de géographie ; sinon, false.</returns>
      <param name="other">Valeur de géographie dont l'intersection doit être comparée par rapport à cette valeur de géographie.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>Obtient une valeur Boolean nullable qui indique si cette valeur DbGeography est fermée, qui peut être Null si cette valeur ne représente pas une courbe.</summary>
      <returns>True si cette valeur DbGeography est fermée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>Obtient une valeur booléenne nullable indiquant si cette valeur DbGeography est vide.</summary>
      <returns>True si cette valeur DbGeography est vide ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>Obtient la latitude de cette valeur DbGeography, si elle représente un point.&amp;amp;lt;retourne&amp;amp;gt;Latitude de cette valeur de géographie, si elle représente un point ; sinon null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Latitude de cette valeur DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>Obtient une valeur double nullable qui indique la longueur de cette valeur DbGeography, qui peut être Null si cette valeur ne représente pas une courbe.</summary>
      <returns>Valeur double nullable qui indique la longueur de cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="lineWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="lineWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>Obtient la longitude de cette valeur DbGeography, si elle représente un point.&amp;amp;lt;retourne&amp;amp;gt;Longitude de cette valeur de géographie, si elle représente un point ; sinon null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Longitude de cette valeur DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>Obtient la mesure (M) de cette valeur DbGeography, si elle représente un point.&amp;amp;lt;retourne&amp;amp;gt;Valeur M (Mesure) de cette valeur de géographie, si elle représente un point ; sinon, null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Valeur M (Mesure) de cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Retourne la valeur à plusieurs lignes à partir d'une valeur binaire.</summary>
      <returns>Valeur à plusieurs lignes à partir d'une valeur binaire.</returns>
      <param name="multiLineWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>Retourne la valeur à plusieurs lignes à partir d'une valeur textuelle connue.</summary>
      <returns>Valeur à plusieurs lignes à partir d'une valeur textuelle connue.</returns>
      <param name="multiLineWellKnownText">Texte connu.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Retourne la valeur à plusieurs points à partir d'une valeur binaire connue.</summary>
      <returns>Valeur à plusieurs points à partir d'une valeur binaire connue.</returns>
      <param name="multiPointWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>Retourne la valeur à plusieurs points à partir d'une valeur textuelle connue.</summary>
      <returns>Valeur à plusieurs points à partir d'une valeur textuelle connue.</returns>
      <param name="multiPointWellKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Retourne la valeur à plusieurs polygones à partir d'une valeur binaire connue.</summary>
      <returns>Valeur à plusieurs polygones à partir d'une valeur binaire connue.</returns>
      <param name="multiPolygonWellKnownBinary">Valeur binaire connue à plusieurs polygones.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Retourne la valeur à plusieurs polygones à partir d'une valeur textuelle connue.</summary>
      <returns>Valeur à plusieurs polygones à partir d'une valeur textuelle connue.</returns>
      <param name="multiPolygonWellKnownText">Valeur textuelle connue à plusieurs polygones.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>Retourne un élément de cette valeur DbGeography à une position spécifique, si elle représente un linestring ou un anneau linéaire.&amp;amp;lt;param name="index"&amp;amp;gt;Position au sein de cette valeur de géographie à partir de laquelle l'élément doit être pris.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;retourne&amp;amp;gt;Élément de cette valeur de géographie à la position spécifiée, si elle représente un linestring ou un anneau linéaire ; sinon null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Élément de cette valeur DbGeography à partir d'une position spécifique</returns>
      <param name="index">Index.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>Obtient le nombre de points dans cette valeur DbGeography, si elle représente un linestring ou un anneau linéaire.&amp;amp;lt;retourne&amp;amp;gt;Nombre d'éléments de cette valeur de géographie, si elle représente un linestring ou un anneau linéaire ; sinon, null.&amp;amp;lt;/retourne&amp;amp;gt;</summary>
      <returns>Nombre de points dans cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="pointWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="pointWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="polygonWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeography telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="polygonWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géographique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeography doit utiliser.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>Obtient le fournisseur spatial qui sera utilisé pour les opérations sur ce type spatial.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>Obtient une représentation de cette valeur DbGeography qui est spécifique au fournisseur sous-jacent qui l'a créée.</summary>
      <returns>Représentation de cette valeur DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>Détermine si cette valeur DbGeography est égale spatialement à l'argument DbGeography spécifié.</summary>
      <returns>true si d'autres valeurs sont spatialement égales à cette valeur de géographie ; sinon, false.</returns>
      <param name="other">Valeur de géographie dont l'égalité doit être comparée par rapport à cette valeur de géographie.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>Obtient le nom de type spatial de DBGeography.</summary>
      <returns>Nom de type spatial de DBGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>Obtient une valeur DbGeography qui représente le point de départ de cette valeur, qui peut être Null si cette valeur DbGeography ne représente pas une courbe.</summary>
      <returns>Valeur DbGeography représentant le point de départ de cette valeur.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule la différence symétrique entre cette valeur DbGeography et une autre valeur DbGeography.</summary>
      <returns>Nouvelle valeur DbGeography qui représente la différence symétrique entre cette valeur de géographie et d'autres.</returns>
      <param name="other">valeur de géographie pour laquelle la différence symétrique par rapport à cette valeur doit être calculée.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>Retourne une chaîne représentant la valeur de géographie.</summary>
      <returns>Chaîne représentant la valeur de géographie.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule l'union entre cette valeur DbGeography et une autre valeur DbGeography.</summary>
      <returns>Nouvelle valeur DbGeography qui représente l'union entre cette valeur de géographie et d'autres.</returns>
      <param name="other">valeur de géographie pour laquelle l'union par rapport à cette valeur doit être calculée.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>Obtient ou définit une représentation sérialisable de contrat de données connue de cette valeur DbGeography.</summary>
      <returns>Représentation sérialisable de contrat de données connue de cette valeur DbGeography.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>Représentation sérialisable du contrat de données d'une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>Obtient ou définit l'identificateur du système de coordonnées (SRID) de cette valeur.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>Obtient ou définit la représentation binaire connue de cette valeur.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>Obtient ou définit la représentation textuelle connue de cette valeur.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>Représente des formes géométriques.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>Obtient une valeur double nullable qui indique la zone de cette valeur DbGeometry, qui peut être Null si cette valeur ne représente pas une surface.</summary>
      <returns>Valeur double nullable qui indique la zone de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>Génère la représentation binaire connue de cette valeur DbGeometry.</summary>
      <returns>Représentation binaire connue de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>Génère la représentation GML (Geography Markup Language) de cette valeur DbGeometry.</summary>
      <returns>Chaîne qui contient la représentation GML de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>Génère la représentation textuelle connue de cette valeur DbGeometry.N'inclut que les coordonnées X et Y des points.</summary>
      <returns>Chaîne qui contient la représentation textuelle connue de la cette valeur DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>Obtient la limite des objets DbGeometry.</summary>
      <returns>Limite des objets DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>Retourne un objet géométrique représentant l'union de tous les points dont la distance par rapport à une instance géométrique est inférieure ou égale à la valeur spécifiée.</summary>
      <returns>Objet géométrique qui représente l'union de tous les points.</returns>
      <param name="distance">Distance.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>Obtient la valeur DbGeometry qui représente le centre de cette valeur DbGeometry, qui peut être Null si cette valeur ne représente pas une surface.</summary>
      <returns>Valeur DbGeometry qui représente le centre de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry contient spatialement l'argument DbGeometry spécifié.</summary>
      <returns>true si cette valeur de géométrie contient une autre valeur ; sinon, false.</returns>
      <param name="other">Valeur de géométrie dont la relation contenant-contenu doit être comparée par rapport à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>Obtient la forme convexe de cette valeur DbGeometry en tant que valeur DbGeometry.</summary>
      <returns>Forme convexe de cette valeur DbGeometry en tant qu'autre valeur DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>Obtient l'identificateur du système de coordonnées de l'objet DbGeometry.</summary>
      <returns>Identificateur du système de coordonnées de l'objet DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry croise spatialement l'argument DbGeometry spécifié.</summary>
      <returns>true si une autre valeur croise cette valeur de géométrie ; sinon, false.</returns>
      <param name="other">Valeur de géométrie qui doit être comparée à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>Obtient l'ID du système de coordonnées (SRID) par défaut pour les valeurs de géométrie.</summary>
      <returns>ID du système de coordonnées (SRID) par défaut pour les valeurs de géométrie.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule la différence entre cette valeur DbGeometry et une autre valeur DbGeometry.</summary>
      <returns>Nouvelle valeur DbGeometry qui représente la différence entre cette valeur de géométrie et d'autres.</returns>
      <param name="other">Valeur de géométrie pour laquelle la différence par rapport à cette valeur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>Obtient la dimension de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, ou si la valeur est une collection, la dimension de l'élément le plus grand.</summary>
      <returns>Dimension de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry est disjointe spatialement l'argument DbGeometry spécifié.</summary>
      <returns>true si une autre valeur est disjointe de cette valeur de géométrie ; sinon, false.</returns>
      <param name="other">Valeur de géométrie dont la disjointure doit être comparée par rapport à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule la distance entre les points les plus proches de cette valeur DbGeometry et d'une autre valeur DbGeometry.</summary>
      <returns>Valeur double qui spécifie la distance entre les deux points les plus proches de cette valeur de géométrie et d'autres.</returns>
      <param name="other">valeur de géométrie pour laquelle la distance par rapport à cette valeur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>Retourne un élément de cette valeur DbGeometry à une position spécifique, si elle représente une collection de géométrie. </summary>
      <returns>Élément de cette valeur de géométrie à la position spécifiée, si elle représente une collection d'autres valeurs de géométrie ; sinon, null.</returns>
      <param name="index">Position au sein de cette valeur de géométrie à partir de laquelle l'élément doit être pris.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>Obtient le nombre d'éléments de cette valeur DbGeometry, si elle représente une collection de géométrie. </summary>
      <returns>Nombre d'éléments de cette valeur de géométrie, si elle représente une collection d'autres valeurs de géométrie ; sinon, null. </returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>Obtient l'élévation (Z) de cette valeur DbGeometry, si elle représente un point. </summary>
      <returns>Élévation (Z) de cette valeur DbGeometry, si elle représente un point ; sinon, null. </returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>Obtient une valeur DbGeometry qui représente le point de départ de cette valeur, qui peut être Null si cette valeur DbGeometry ne représente pas une courbe.</summary>
      <returns>Valeur DbGeometry représentant le point de départ de cette valeur.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>Obtient l'enveloppe (cadre englobant minimal) de cette valeur DbGeometry, en tant que valeur de géométrie.</summary>
      <returns>Enveloppe (cadre englobant minimal) de cette valeur DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>Obtient la valeur DbGeometry qui représente l'anneau extérieur de cette valeur DbGeometry, qui peut être Null si cette valeur ne représente pas un polygone.</summary>
      <returns>Valeur DbGeometry qui représente l'anneau extérieur de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue spécifiée.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées de géométrie par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géométrique.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur GML (Geography Markup Language) spécifiée.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées de géométrie (SRID) par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryMarkup">Chaîne qui contient une représentation GML (Geography Markup Language) de la valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur GML (Geography Markup Language) et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="geometryMarkup">Chaîne qui contient une représentation GML (Geography Markup Language) de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue spécifiée.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées de géométrie (SRID) par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géométrique.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="geometryCollectionWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="geometryCollectionWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>Retourne un anneau intérieur de cette valeur DbGeometry à une position spécifique, si elle représente un polygone. </summary>
      <returns>Anneau intérieur de cette valeur de géométrie à la position spécifiée, si elle représente un polygone ; sinon, null.</returns>
      <param name="index">Position au sein de cette valeur de géométrie à partir de laquelle l'anneau intérieur doit être pris.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>Obtient le nombre d'anneaux intérieurs de cette valeur DbGeometry, si elle représente un polygone. </summary>
      <returns>Nombre d'éléments de cette valeur de géométrie, si elle représente un polygone ; sinon, null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule l'intersection de cette valeur DbGeometry et d'une autre valeur DbGeometry.</summary>
      <returns>Nouvelle valeur DbGeometry qui représente l'intersection entre cette valeur de géométrie et d'autres.</returns>
      <param name="other">valeur de géométrie pour laquelle l'intersection par rapport à cette valeur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry coupe spatialement l'argument DbGeometry spécifié.</summary>
      <returns>true si une autre valeur coupe cette valeur de géométrie ; sinon, false.</returns>
      <param name="other">Valeur de géométrie dont l'intersection doit être comparée par rapport à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>Obtient une valeur Boolean nullable qui indique si cette valeur DbGeometry est fermée, qui peut être Null si cette valeur ne représente pas une courbe.</summary>
      <returns>true si cette valeur DbGeometry est fermée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>Obtient une valeur booléenne nullable qui indique si cette valeur DbGeometry est vide, laquelle peut être Null si cette valeur ne représente pas une courbe.</summary>
      <returns>true si cette valeur DbGeometry est vide ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>Obtient une valeur Boolean nullable qui indique si cette valeur DbGeometry est un anneau, qui peut être Null si cette valeur ne représente pas une courbe.</summary>
      <returns>true si cette valeur DbGeometry est un anneau ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>Obtient une valeur booléenne nullable indiquant si cette valeur DbGeometry est simple.</summary>
      <returns>true si cette valeur DbGeometry est simple ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>Obtient une valeur booléenne nullable indiquant si cette valeur DbGeometry est valide.</summary>
      <returns>true si cette valeur DbGeometry est valide ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>Obtient une valeur double nullable qui indique la longueur de cette valeur DbGeometry, qui peut être Null si cette valeur ne représente pas une courbe.</summary>
      <returns>Longueur de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="lineWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="lineWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>Obtient la mesure (M) de cette valeur DbGeometry, si elle représente un point. </summary>
      <returns>Valeur M (Mesure) de cette valeur de géométrie, si elle représente un point ; sinon, null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Retourne la valeur à plusieurs lignes à partir d'une valeur binaire.</summary>
      <returns>Valeur à plusieurs lignes à partir d'une valeur binaire.</returns>
      <param name="multiLineWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>Retourne la valeur à plusieurs lignes à partir d'une valeur textuelle connue.</summary>
      <returns>Valeur à plusieurs lignes à partir d'une valeur textuelle connue.</returns>
      <param name="multiLineWellKnownText">Texte connu.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Retourne la valeur à plusieurs points à partir d'une valeur binaire connue.</summary>
      <returns>Valeur à plusieurs points à partir d'une valeur binaire connue.</returns>
      <param name="multiPointWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>Retourne la valeur à plusieurs points à partir d'une valeur textuelle connue.</summary>
      <returns>Valeur à plusieurs points à partir d'une valeur textuelle connue.</returns>
      <param name="multiPointWellKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Retourne la valeur à plusieurs polygones à partir d'une valeur binaire connue.</summary>
      <returns>Valeur à plusieurs points à partir d'une valeur textuelle connue.</returns>
      <param name="multiPolygonWellKnownBinary">Valeur textuelle connue à plusieurs polygones.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Retourne la valeur à plusieurs polygones à partir d'une valeur binaire connue.</summary>
      <returns>Valeur à plusieurs polygones à partir d'une valeur binaire connue.</returns>
      <param name="multiPolygonWellKnownText">Valeur textuelle connue à plusieurs polygones.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry chevauche spatialement l'argument DbGeometry spécifié.</summary>
      <returns>true si cette valeur de géométrie chevauche une autre valeur ; sinon, false.</returns>
      <param name="other">valeur de géométrie dont le chevauchement doit être comparé par rapport à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>Retourne un élément de cette valeur DbGeometry à une position spécifique, si elle représente un linestring ou un anneau linéaire. </summary>
      <returns>Élément de cette valeur de géométrie à la position spécifiée, si elle représente un linestring ou un anneau linéaire ; sinon, null.</returns>
      <param name="index">Position au sein de cette valeur de géométrie à partir de laquelle l'élément doit être pris.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>Obtient le nombre de points dans cette valeur DbGeometry, si elle représente un linestring ou un anneau linéaire. </summary>
      <returns>Nombre d'éléments de cette valeur de géométrie, si elle représente un linestring ou un anneau linéaire ; sinon, null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="pointWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="pointWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>Obtient un point sur la surface de cette valeur DbGeometry, qui peut être Null si cette valeur ne représente pas une surface.</summary>
      <returns>Point sur la surface de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="polygonWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur DbGeometry telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées spécifié.</returns>
      <param name="polygonWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur géométrique.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur DbGeométry doit utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> n'est pas valide.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>Obtient le fournisseur spatial qui sera utilisé pour les opérations sur ce type spatial.</summary>
      <returns>Fournisseur spatial qui sera utilisé pour les opérations sur ce type spatial.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>Obtient une représentation de cette valeur DbGeometry qui est spécifique au fournisseur sous-jacent qui l'a créée.</summary>
      <returns>Représentation de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Détermine si cette valeur DbGeometry est liée spatialement à l'argument DbGeometry spécifié en fonction du modèle d'intersection DE-9IM (Dimensionally Extended Nine-Intersection Model) donné.</summary>
      <returns>true si cette valeur de géométrie est liée à une autre valeur en fonction de la matrice du modèle d'intersection spécifié ; sinon, false.</returns>
      <param name="other">valeur de géométrie dont la relation doit être comparée par rapport à cette valeur de géométrie.</param>
      <param name="matrix">Chaîne qui contient une représentation textuelle du modèle d'intersection (DE-9IM) qui définit la relation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> et <paramref name="matrix" /> sont null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry est égale spatialement à l'argument DbGeometry spécifié.</summary>
      <returns>true si une autre valeur est spatialement égale à cette valeur de géométrie ; sinon, false.</returns>
      <param name="other">Valeur de géométrie dont l'égalité doit être comparée par rapport à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>Obtient la représentation d'un nom de type spatial de cette valeur DbGeometry.</summary>
      <returns>Représentation d'un nom de type spatial de cette valeur DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>Obtient une valeur DbGeometry qui représente le point de départ de cette valeur, qui peut être Null si cette valeur DbGeometry ne représente pas une courbe.</summary>
      <returns>Valeur DbGeometry représentant le point de départ de cette valeur.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule la différence symétrique entre cette valeur DbGeometry et une autre valeur DbGeometry.</summary>
      <returns>Nouvelle valeur DbGeometry qui représente la différence symétrique entre cette valeur de géométrie et d'autres.</returns>
      <param name="other">valeur de géométrie pour laquelle la différence symétrique par rapport à cette valeur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>Retourne une chaîne représentant la valeur de géométrie.</summary>
      <returns>Chaîne représentant la valeur de géométrie.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry touche spatialement l'argument DbGeometry spécifié.</summary>
      <returns>true si une autre valeur touche cette valeur de géométrie ; sinon, false.</returns>
      <param name="other">Valeur de géométrie qui doit être comparée à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule l'union de cette valeur DbGeometry et d'une autre valeur DbGeometry.</summary>
      <returns>Nouvelle valeur DbGeometry qui représente l'union entre cette valeur de géométrie et d'autres.</returns>
      <param name="other">valeur de géométrie pour laquelle l'union par rapport à cette valeur doit être calculée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>Obtient ou définit une représentation sérialisable de contrat de données connue de cette valeur DbGeometry.</summary>
      <returns>Représentation sérialisable de contrat de données connue de cette valeur DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si cette valeur DbGeometry se trouve spatialement dans l'argument DbGeometry spécifié.</summary>
      <returns>true si cette valeur de géométrie se trouve dans une autre valeur ; sinon, false.</returns>
      <param name="other">Valeur de géométrie dont la relation contenant-contenu doit être comparée par rapport à cette valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>Obtient la coordonnée X de cette valeur DbGeometry, si elle représente un point.</summary>
      <returns>Coordonnée X de cette valeur de géométrie, si elle représente un point ; sinon, null.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>Obtient la coordonnée Y de cette valeur DbGeometry, si elle représente un point.</summary>
      <returns>Coordonnée Y de cette valeur de géométrie, si elle représente un point ; sinon, null.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>Représentation sérialisable du contrat de données d'une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>Obtient ou définit l'identificateur du système de coordonnées (SRID) de cette valeur.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>Obtient ou définit la représentation binaire connue de cette valeur.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>Obtient ou définit la représentation textuelle connue de cette valeur.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>API de service indépendante du fournisseur pour la prise en charge des types géospatiaux (Geometry/Geography).</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>Lors d'une implémentation dans des types dérivés, lit une instance de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> de la colonne à l'ordinal de colonne spécifié.</summary>
      <returns>Instance de DbGeography à la valeur de colonne spécifiée</returns>
      <param name="ordinal">Ordinal de la colonne qui contient la valeur de géographie</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone une instance de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> de la colonne à l'ordinal de colonne spécifié.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient l'instance de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à la valeur de colonne spécifiée.</returns>
      <param name="ordinal">Ordinal de la colonne qui contient la valeur de géographie.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>Lors d'une implémentation dans des types dérivés, lit une instance de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> de la colonne à l'ordinal de colonne spécifié.</summary>
      <returns>Instance de DbGeometry à la valeur de colonne spécifiée</returns>
      <param name="ordinal">Ordinal de la colonne d'enregistrement de données qui contient les données de géométrie spécifiques au fournisseur</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone une instance de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> de la colonne à l'ordinal de colonne spécifié.</summary>
      <returns>Tâche qui représente l'opération asynchrone.Le résultat de la tâche contient l'instance de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à la valeur de colonne spécifiée.</returns>
      <param name="ordinal">Ordinal de la colonne d'enregistrement de données qui contient les données de géométrie spécifiques au fournisseur.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> à observer en attendant que la tâche se termine.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>Retourne une valeur indiquant si la colonne à l'ordinal spécifié est de type geography</summary>
      <returns>true si la colonne à l'ordinal spécifié est de type geography ; sinon, false.</returns>
      <param name="ordinal">Ordinal de colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>Retourne une valeur indiquant si la colonne à l'ordinal spécifié est de type geometry</summary>
      <returns>true si la colonne à l'ordinal spécifié est de type geometry ; sinon, false.</returns>
      <param name="ordinal">Ordinal de colonne.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>API de service indépendante du fournisseur pour la prise en charge des types géospatiaux (Geometry/Geography).</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>Obtient la représentation binaire connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</summary>
      <returns>Représentation binaire connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie pour laquelle la représentation binaire connue doit être générée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtient la représentation binaire connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</summary>
      <returns>Représentation binaire connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie pour laquelle la représentation binaire connue doit être générée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>Génère la représentation GML (Geography Markup Language) de cette valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Chaîne qui contient la représentation GML de cette valeur DbGeography.</returns>
      <param name="geographyValue">Valeur de géographie pour laquelle la représentation GML doit être générée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Génère la représentation GML (Geography Markup Language) de cette valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Chaîne qui contient la représentation GML de cette valeur DbGeometry.</returns>
      <param name="geometryValue">Valeur de géométrie pour laquelle la représentation GML doit être générée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>Obtient la représentation textuelle connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.Cette valeur ne doit inclure que la longitude et la latitude des points.</summary>
      <returns>Chaîne qui contient la représentation textuelle connue de geographyValue.</returns>
      <param name="geographyValue">Valeur de géographie pour laquelle la représentation textuelle connue doit être générée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtient la représentation textuelle connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, comprenant uniquement les coordonnées X et Y des points.</summary>
      <returns>Chaîne qui contient la représentation textuelle connue de geometryValue.</returns>
      <param name="geometryValue">Valeur de géométrie pour laquelle la représentation textuelle connue doit être générée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une représentation textuelle de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> avec élévation et mesure.</summary>
      <returns>Représentation textuelle de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</returns>
      <param name="geographyValue">Valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une représentation textuelle de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> avec élévation et mesure.</summary>
      <returns>Représentation textuelle de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> avec élévation et mesure.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>Crée une valeur de géographie qui représente tous les points dont la distance est inférieure ou égale à la distance à partir de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</summary>
      <returns>Nouvelle valeur DbGeography qui représente tous les points dont la distance est inférieure ou égale à la distance à partir de geographyValue.</returns>
      <param name="geographyValue">Valeur de géographie.</param>
      <param name="distance">Valeur double spécifiant à quelle distance de geographyValue la mise en mémoire tampon doit s'effectuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>Crée une valeur de géométrie qui représente tous les points dont la distance est inférieure ou égale à la distance à partir de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</summary>
      <returns>Nouvelle valeur DbGeometry qui représente tous les points dont la distance est inférieure ou égale à la distance à partir de geometryValue.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <param name="distance">Valeur double spécifiant à quelle distance de geometryValue la mise en mémoire tampon doit s'effectuer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> contient spatialement une autre.</summary>
      <returns>true si geometryValue contient otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Cette méthode est conçue pour une utilisation par les implémentations dérivées de <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> après validation de la valeur du fournisseur spécifiée de façon à garantir qu'elle est adaptée à une utilisation avec l'implémentation dérivée.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> qui contient le providerValue spécifié et utilise le spatialServices spécifié comme implémentation spatiale.</returns>
      <param name="spatialServices">Instance des services spatiaux dont dépend la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> pour l'implémentation des fonctionnalités spatiales.</param>
      <param name="providerValue">Valeur de fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Cette méthode est conçue pour une utilisation par les implémentations dérivées de <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> après validation de la valeur du fournisseur spécifiée de façon à garantir qu'elle est adaptée à une utilisation avec l'implémentation dérivée.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui contient le providerValue spécifié et utilise le spatialServices spécifié comme implémentation spatiale.</returns>
      <param name="spatialServices">Instance des services spatiaux dont dépend la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> pour l'implémentation des fonctionnalités spatiales.</param>
      <param name="providerValue">Valeur de fournisseur.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>Crée une valeur spécifique au fournisseur compatible avec cette implémentation des services spatiaux en fonction de la représentation connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Valeur spécifique au fournisseur qui encode les informations contenues dans wellKnownValue de façon compatible avec cette implémentation des services spatiaux.</returns>
      <param name="wellKnownValue">Instance de <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> qui contient la représentation connue d'une valeur de géographie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>Crée une valeur spécifique au fournisseur compatible avec cette implémentation des services spatiaux en fonction de la représentation connue de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Valeur spécifique au fournisseur qui encode les informations contenues dans wellKnownValue de façon compatible avec cette implémentation des services spatiaux.</returns>
      <param name="wellKnownValue">Instance de <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> qui contient la représentation connue d'une valeur de géométrie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> qui représente la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> spécifiée à l'aide d'un ou des deux formats standard de valeurs spatiales connus.</summary>
      <returns>Représentation connue de geographyValue, comme nouveau <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />.</returns>
      <param name="geographyValue">Valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> qui représente la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiée à l'aide d'un ou des deux formats standard de valeurs spatiales connus.</summary>
      <returns>Représentation connue de geometryValue, comme nouveau <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiées se croisent spatialement.</summary>
      <returns>true si geometryValue croise otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>Obtient les services par défaut pour <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</summary>
      <returns>Services par défaut.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule la différence entre deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Nouvelle valeur DbGeography qui représente la différence entre geographyValue et otherGeography.</returns>
      <param name="geographyValue">Première valeur de géographie.</param>
      <param name="otherGeography">Deuxième valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule la différence entre deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nouvelle valeur DbGeometry qui représente la différence entre geometryValue et otherGeometry.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" /> spécifiées sont disjointes spatialement.</summary>
      <returns>true si geographyValue est disjointe d'otherGeography ; sinon, false.</returns>
      <param name="geographyValue">Première valeur de géographie dont la disjointure doit être comparée.</param>
      <param name="otherGeography">Deuxième valeur de géographie dont la disjointure doit être comparée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiées sont disjointes spatialement.</summary>
      <returns>true si geometryValue est disjointe d'otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie dont la disjointure doit être comparée.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie dont la disjointure doit être comparée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule la distance entre les points les plus proches de deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Valeur double qui spécifie la distance entre les deux points les plus proches de geographyValue et otherGeography.</returns>
      <param name="geographyValue">Première valeur de géographie.</param>
      <param name="otherGeography">Deuxième valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule la distance entre les points les plus proches de deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Valeur double qui spécifie la distance entre les deux points les plus proches de geometryValue et otherGeometry.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Retourne un élément de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, s'il représente une collection de géographies.</summary>
      <returns>Élément de geographyValue à la position index, s'il représente une collection d'autres valeurs de géographie ; sinon, null.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter une collection de géographies.</param>
      <param name="index">Position au sein de la valeur de géographie à partir de laquelle l'élément doit être pris.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Retourne un élément de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, s'il représente une collection de géométries.</summary>
      <returns>Élément de geometryValue à la position index, s'il représente une collection d'autres valeurs de géométrie ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une collection de géométries.</param>
      <param name="index">Position au sein de la valeur de géométrie à partir de laquelle l'élément doit être pris.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyCollectionWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyCollectionWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue spécifiée.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeography" /> par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géographie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur GML (Geography Markup Language) spécifiée.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeography" /> par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyMarkup">Chaîne qui contient une représentation GML (Geometry Markup Language) de la valeur de géographie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur GML (Geography Markup Language) et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées spécifié (SRID).</returns>
      <param name="geographyMarkup">Chaîne qui contient une représentation GML (Geometry Markup Language) de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur une valeur spécifique au fournisseur compatible avec cette implémentation des services spatiaux.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> stockée par cette implémentation des services spatiaux et la valeur du fournisseur spécifiée.</returns>
      <param name="providerValue">Valeur spécifique au fournisseur que cette implémentation des services spatiaux est capable d'interpréter en tant que valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue spécifiée.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeography" /> par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géographie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur à plusieurs lignes <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue spécifiée et sur l'identificateur du système de coordonnées.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à plusieurs lignes.</returns>
      <param name="multiLineWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>Crée une valeur à plusieurs lignes <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à plusieurs lignes.</returns>
      <param name="multiLineWellKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur à plusieurs points <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à plusieurs points.</returns>
      <param name="multiPointWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>Crée une valeur à plusieurs points <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à plusieurs points.</returns>
      <param name="multiPointWellKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur à plusieurs polygones <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à plusieurs polygones.</returns>
      <param name="multiPolygonWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>Crée une valeur à plusieurs polygones <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> à plusieurs polygones.</returns>
      <param name="multiPolygonKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeography" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géographie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryCollectionWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Crée une valeur de collection <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryCollectionWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue spécifiée.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géométrie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur GML (Geography Markup Language) spécifiée.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryMarkup">Chaîne qui contient une représentation GML (Geography Markup Language) de la valeur de géométrie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur GML (Geography Markup Language) et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur GML avec l'identificateur du système de coordonnées spécifié (SRID).</returns>
      <param name="geometryMarkup">Chaîne qui contient une représentation GML (Geography Markup Language) de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur une valeur spécifique au fournisseur compatible avec cette implémentation des services spatiaux.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> stockée par cette implémentation des services spatiaux et la valeur du fournisseur spécifiée.</returns>
      <param name="providerValue">Valeur spécifique au fournisseur que cette implémentation des services spatiaux est capable d'interpréter en tant que valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue spécifiée.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> par défaut (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géométrie.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>Crée une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>Crée une valeur de ligne <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur à plusieurs lignes <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue spécifiée et sur l'identificateur du système de coordonnées.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à plusieurs lignes</returns>
      <param name="multiLineWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>Crée une valeur à plusieurs lignes <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à plusieurs lignes</returns>
      <param name="multiLineWellKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur à plusieurs points <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à plusieurs points.</returns>
      <param name="multiPointWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>Crée une valeur à plusieurs points <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à plusieurs points.</returns>
      <param name="multiPointWellKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur à plusieurs polygones <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à plusieurs polygones.</returns>
      <param name="multiPolygonWellKnownBinary">Valeur binaire connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>Crée une valeur à plusieurs polygones <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> à plusieurs polygones.</returns>
      <param name="multiPolygonKnownText">Valeur textuelle connue.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>Crée une valeur de point <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur binaire connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur binaire connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownBinary">Tableau d'octets qui contient la représentation binaire connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>Crée une valeur de polygone <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> basée sur la valeur textuelle connue et sur l'identificateur du système de coordonnées (SRID) spécifiés.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> telle qu'elle est définie par la valeur textuelle connue avec l'identificateur du système de coordonnées (SRID) spécifié (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownText">Chaîne qui contient la représentation textuelle connue de la valeur de géométrie.</param>
      <param name="coordinateSystemId">Identificateur du système de coordonnées que la nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> doit utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une valeur double nullable qui indique la zone de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, qui peut être Null si la valeur ne représente pas une surface.</summary>
      <returns>Valeur double nullable qui indique la zone de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">valeur de géographie, qui ne doit pas représenter une surface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur double nullable qui indique la zone de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, qui peut être Null si la valeur ne représente pas une surface.</summary>
      <returns>Valeur double nullable qui indique la zone de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une surface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur double nullable qui indique la limite de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</summary>
      <returns>Limite de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente le centre de la valeur DbGeometry données, qui peut être Null si la valeur ne représente pas une surface.</summary>
      <returns>Centre de geometryValue, s'il représente une surface ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une surface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur double nullable qui indique la forme convexe de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</summary>
      <returns>Forme convexe de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne l'identificateur du système de coordonnées de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</summary>
      <returns>Identificateur du système de coordonnées de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne l'identificateur du système de coordonnées de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</summary>
      <returns>Identificateur du système de coordonnées de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>Obtient la dimension de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, ou si la valeur est une collection, la dimension de l'élément le plus grand.</summary>
      <returns>Dimension de geographyValue, ou la dimension de l'élément le plus grand, si <see cref="T:System.Data.Entity.Spatial.DbGeography" /> est une collection.</returns>
      <param name="geographyValue">valeur de géographie pour laquelle la valeur de dimension doit être récupérée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtient la dimension de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, ou si la valeur est une collection, la dimension de l'élément le plus grand.</summary>
      <returns>Dimension de geometryValue, ou la dimension de l'élément le plus grand, si <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> est une collection.</returns>
      <param name="geometryValue">Valeur de géométrie pour laquelle la valeur de dimension doit être récupérée.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne le nombre d'éléments dans la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, s'il représente une collection de géographies.</summary>
      <returns>Nombre d'éléments de geographyValue, s'il représente une collection d'autres valeurs de géographie ; sinon, null.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter une collection de géographies.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne le nombre d'éléments dans la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, s'il représente une collection de géométries.</summary>
      <returns>Nombre d'éléments de geometryValue, s'il représente une collection d'autres valeurs de géométrie ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une collection de géométries.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne l'élévation (coordonnée Z) de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, si elle représente un point.</summary>
      <returns>Élévation (Z) de geographyValue, s'il représente un point ; sinon, null.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne l'élévation (Z) de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un point.</summary>
      <returns>Élévation (Z) de geometryValue, s'il représente un point ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> qui représente la terminaison de la valeur DbGeography donnée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>Point de terminaison de geographyValue, s'il représente une courbe ; sinon, null.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente la terminaison de la valeur DbGeometry donnée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>Point de terminaison de geometryValue, s'il représente une courbe ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtient l'enveloppe (cadre englobant minimal) de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, en tant que valeur de géométrie.</summary>
      <returns>Enveloppe de geometryValue, comme valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Valeur de géométrie pour laquelle la valeur de l'enveloppe doit être récupérée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente l'anneau extérieur de la valeur DbGeometry donnée, qui peut être Null si la valeur ne représente pas un polygone.</summary>
      <returns>Valeur DbGeometry qui représente l'anneau extérieur sur geometryValue, s'il représente un polygone ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un polygone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne le nombre d'anneaux intérieurs de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un polygone.</summary>
      <returns>Nombre d'éléments dans geometryValue, s'il représente un polygone ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un polygone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une valeur booléenne nullable qui indique si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée est fermée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>true si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée est fermée ; sinon, false.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur booléenne nullable qui indique si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est fermée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>true si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée est fermée ; sinon, false.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une valeur booléenne nullable qui indique si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée est vide.</summary>
      <returns>true si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée est vide ; sinon, false.</returns>
      <param name="geographyValue">Valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur booléenne nullable qui indique si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est vide.</summary>
      <returns>true si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est vide ; sinon, false.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur booléenne nullable qui indique si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est un anneau, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>true si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est un anneau ; sinon, false.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur booléenne nullable qui indique si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est simple.</summary>
      <returns>true si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est simple ; sinon, false.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur booléenne nullable qui indique si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est valide.</summary>
      <returns>true si la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée est valide ; sinon, false.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne la coordonnée de latitude de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, si elle représente un point.</summary>
      <returns>Coordonnée de latitude de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une valeur double nullable qui indique la longueur de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>Longueur de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur double nullable qui indique la longueur de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>Longueur de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne la coordonnée de longitude de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, si elle représente un point.</summary>
      <returns>Coordonnée de longitude de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne la coordonnée M (mesure) de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, si elle représente un point.</summary>
      <returns>Coordonnée M (mesure) de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne la coordonnée M (mesure) de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un point.</summary>
      <returns>Coordonnée M (mesure) de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne le nombre de points dans la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, si elle représente un linestring ou un anneau linéaire.</summary>
      <returns>Nombre de points dans la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter un linestring ou un anneau linéaire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne le nombre de points dans la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un linestring ou un anneau linéaire.</summary>
      <returns>Nombre de points dans la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un linestring ou un anneau linéaire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente un point sur la surface de la valeur DbGeometry donnée, qui peut être Null si la valeur ne représente pas une surface.</summary>
      <returns>Valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente un point sur la surface de la valeur DbGeometry donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une surface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une valeur qui indique le nom du type spatial de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</summary>
      <returns>Nom du type spatial de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur qui indique le nom du type spatial de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</summary>
      <returns>Nom du type spatial de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Retourne une valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> qui représente le point de départ de la valeur DbGeography donnée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>Point de départ de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente le point de départ de la valeur DbGeometry donnée, qui peut être Null si la valeur ne représente pas une courbe.</summary>
      <returns>Point de départ de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter une courbe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne la coordonnée X de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un point.</summary>
      <returns>Coordonnée X de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Retourne la coordonnée Y de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un point.</summary>
      <returns>Coordonnée Y de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Retourne un anneau intérieurs à partir de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un polygone.</summary>
      <returns>Anneau intérieur de geometryValue à la position index, s'il représente un polygone ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un polygone.</param>
      <param name="index">Position au sein de la valeur de géométrie à partir de laquelle l'élément doit être pris.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule l'intersection de deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> qui représente l'intersection de geographyValue et d'otherGeography.</returns>
      <param name="geographyValue">Première valeur de géographie.</param>
      <param name="otherGeography">Deuxième valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule l'intersection de deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente l'intersection de geometryValue et d'otherGeometry.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" /> données se coupent spatialement.</summary>
      <returns>true si geographyValue coupe otherGeography ; sinon, false.</returns>
      <param name="geographyValue">Première valeur de géographie dont l'intersection doit être comparée.</param>
      <param name="otherGeography">Deuxième valeur de géographie dont l'intersection doit être comparée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> données se coupent spatialement.</summary>
      <returns>true si geometryValue coupe otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie dont l'intersection doit être comparée.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie dont l'intersection doit être comparée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>Obtient une valeur qui indique si Entity Framework continue de s'exécuter en supposant que le fournisseur dispose des types/ressources nécessaires plutôt que d'entraîner un échec rapide.La valeur par défaut est true.</summary>
      <returns>true si Entity Framework continue de s'exécuter en supposant que le fournisseur dispose des types/ressources nécessaires plutôt que d'entraîner un échec rapide ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiées se chevauchent spatialement.</summary>
      <returns>true si geometryValue chevauche otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Retourne un élément de point de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> donnée, si elle représente un linestring ou un anneau linéaire.</summary>
      <returns>Point de geographyValue à la position index, s'il représente un linestring ou un anneau linéaire ; sinon, null.</returns>
      <param name="geographyValue">Valeur de géographie, qui ne doit pas nécessairement représenter un linestring ou un anneau linéaire.</param>
      <param name="index">Position au sein de la valeur de géographie à partir de laquelle l'élément doit être pris.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Retourne un élément de point de la valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> donnée, si elle représente un linestring ou un anneau linéaire.</summary>
      <returns>Point de geometryValue à la position index, s'il représente un linestring ou un anneau linéaire ; sinon, null.</returns>
      <param name="geometryValue">Valeur de géométrie, qui ne doit pas nécessairement représenter un linestring ou un anneau linéaire.</param>
      <param name="index">Position au sein de la valeur de géométrie à partir de laquelle l'élément doit être pris.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiées sont liées spatialement en fonction du modèle d'intersection DE-9IM (Dimensionally Extended Nine-Intersection Model) donné.</summary>
      <returns>true si cette valeur geometryValue est liée à otherGeometry en fonction de la matrice du modèle d'intersection spécifié ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Valeur de géométrie dont la relation doit être comparée par rapport à la première valeur de géométrie.</param>
      <param name="matrix">Chaîne qui contient une représentation textuelle du modèle d'intersection (DE-9IM) qui définit la relation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> , <paramref name="otherGeometry" /> ou <paramref name="matrix" /> est Null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" /> spécifiées sont égales spatialement.</summary>
      <returns>true si geographyValue est spatialement égale à otherGeography ; sinon, false.</returns>
      <param name="geographyValue">Première valeur de géographie dont l'égalité doit être comparée.</param>
      <param name="otherGeography">Deuxième valeur de géographie dont l'égalité doit être comparée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiées sont égales spatialement.</summary>
      <returns>true si geometryValue est spatialement égale à otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie dont l'égalité doit être comparée.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie dont l'égalité doit être comparée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule la différence symétrique deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> qui représente la différence symétrique entre geographyValue et otherGeography.</returns>
      <param name="geographyValue">Première valeur de géographie.</param>
      <param name="otherGeography">Deuxième valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule la différence symétrique entre deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente la différence symétrique entre geometryValue et otherGeometry.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si les deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> spécifiées se touchent spatialement.</summary>
      <returns>true si geometryValue touche otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcule l'union de deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeography" /> qui représente l'union de geographyValue et d'otherGeography.</returns>
      <param name="geographyValue">Première valeur de géographie.</param>
      <param name="otherGeography">Deuxième valeur de géographie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> ou <paramref name="otherGeography" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcule l'union de deux valeurs <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nouvelle valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> qui représente l'union de geometryValue et d'otherGeometry.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Détermine si une valeur <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> se trouve spatialement dans une autre.</summary>
      <returns>true si geometryValue se trouve à l'intérieur d'otherGeometry ; sinon, false.</returns>
      <param name="geometryValue">Première valeur de géométrie.</param>
      <param name="otherGeometry">Deuxième valeur de géométrie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> est null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> ou <paramref name="otherGeometry" /> n'est pas compatible avec cette implémentation des services spatiaux.</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions">
      <summary>Contient les méthodes d'extension de la classe <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)">
      <summary>Configure un élément pouvant être attendu pour attendre <see cref="T:System.Threading.Tasks.Task" /> et éviter de marshaler la poursuite de l'opération dans le contexte d'origine, tout en conservant la culture actuelle et la culture d'interface utilisateur.</summary>
      <returns>Objet utilisé pour attendre cette tâche.</returns>
      <param name="task">Tâche à attendre.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})">
      <summary>Configure un élément pouvant être attendu pour attendre <see cref="T:System.Threading.Tasks.Task`1" /> et éviter de marshaler la poursuite de l'opération dans le contexte d'origine, tout en conservant la culture actuelle et la culture d'interface utilisateur.</summary>
      <returns>Objet utilisé pour attendre cette tâche.</returns>
      <param name="task">Tâche à attendre.</param>
      <typeparam name="T">Type du résultat produit par le <see cref="T:System.Threading.Tasks.Task`1" /> associé.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter">
      <summary>Fournit un objet pouvant être attendu. Ce dernier autorise les attentes sur <see cref="T:System.Threading.Tasks.Task" /> qui conservent la culture.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.#ctor(System.Threading.Tasks.Task)">
      <summary>Construit une instance de la classe <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter" />.</summary>
      <param name="task">Tâche à attendre.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetAwaiter">
      <summary>Obtient l'élément pouvant être attendu utilisé pour attendre <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Instance d'élément pouvant être attendu.</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetResult">
      <summary>Met fin à l'attente sur le <see cref="T:System.Threading.Tasks.Task" /> achevé.</summary>
      <exception cref="T:System.NullReferenceException">L'élément pouvant être attendu n'a pas été correctement initialisé.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">La tâche a été annulée.</exception>
      <exception cref="T:System.Exception">La tâche s'est achevée dans un état d'échec.</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.IsCompleted">
      <summary>Détermine si <see cref="T:System.Threading.Tasks.Task" /> s'est achevé.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.OnCompleted(System.Action)">
      <summary>Cette méthode n'est pas implémentée et ne doit pas être appelée.</summary>
      <param name="continuation">Action à appeler quand l'opération d'attente s'achève.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Planifie la poursuite de l'opération sur le <see cref="T:System.Threading.Tasks.Task" /> associé à <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" />.</summary>
      <param name="continuation">Action à appeler quand l'opération d'attente s'achève.</param>
      <exception cref="T:System.ArgumentNullException">L'argument <paramref name="continuation" /> a la valeur null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">L'élément pouvant être attendu n'a pas été correctement initialisé.</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1">
      <summary>Fournit un objet pouvant être attendu. Ce dernier autorise les attentes sur <see cref="T:System.Threading.Tasks.Task`1" /> qui conservent la culture.</summary>
      <typeparam name="T">Type du résultat produit par le <see cref="T:System.Threading.Tasks.Task`1" /> associé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>Construit une instance de la classe <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1" />.</summary>
      <param name="task">Tâche à attendre.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetAwaiter">
      <summary>Obtient l'élément pouvant être attendu utilisé pour attendre <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Instance d'élément pouvant être attendu.</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetResult">
      <summary>Met fin à l'attente sur le <see cref="T:System.Threading.Tasks.Task`1" /> achevé.</summary>
      <returns>Résultat du <see cref="T:System.Threading.Tasks.Task`1" /> achevé.</returns>
      <exception cref="T:System.NullReferenceException">L'élément pouvant être attendu n'a pas été correctement initialisé.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">La tâche a été annulée.</exception>
      <exception cref="T:System.Exception">La tâche s'est achevée dans un état d'échec.</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.IsCompleted">
      <summary>Détermine si <see cref="T:System.Threading.Tasks.Task" /> s'est achevé.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.OnCompleted(System.Action)">
      <summary>Cette méthode n'est pas implémentée et ne doit pas être appelée.</summary>
      <param name="continuation">Action à appeler quand l'opération d'attente s'achève.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>Planifie la poursuite de l'opération sur le <see cref="T:System.Threading.Tasks.Task`1" /> associé à <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" />.</summary>
      <param name="continuation">Action à appeler quand l'opération d'attente s'achève.</param>
      <exception cref="T:System.ArgumentNullException">L'argument <paramref name="continuation" /> a la valeur null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">L'élément pouvant être attendu n'a pas été correctement initialisé.</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Représente une exception levée à partir de <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> lorsque la validation des entités échoue.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> à l'aide des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> avec le message d'erreur et les résultats de la validation spécifiés.</summary>
      <param name="message">Message d'exception.</param>
      <param name="entityValidationResults">Résultats de la validation.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> avec le message d'erreur, des résultats de validation et une exception interne spécifiés.</summary>
      <param name="message">Message d'exception.</param>
      <param name="entityValidationResults">Résultats de la validation.</param>
      <param name="innerException">Erreur qui a provoqué l'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> avec un message d'erreur et une exception interne spécifiés.</summary>
      <param name="message">Message d'exception.</param>
      <param name="innerException">Erreur qui a provoqué l'exception.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Obtient les erreurs de validation associées à l'entité.</summary>
      <returns>Erreurs de validation associées à l'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Représente les résultats de validation pour une entité unique.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Crée une instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />.</summary>
      <param name="entry">Entrée d'entité à laquelle s'appliquent les résultats.Jamais Null.</param>
      <param name="validationErrors">Liste d'instances <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Jamais Null.Peut être vide, ce qui signifie que l'entité n'est pas valide.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Obtient une instance de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> à laquelle s'appliquent les résultats.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Obtient un indicateur si l'entité est valide.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Obtient les erreurs de validation.Jamais Null.</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Exception levée à partir de <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> lorsqu'une exception est levée à partir du code de validation.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Initialise une nouvelle instance de DbUnexpectedValidationException.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de DbUnexpectedValidationException avec les informations de sérialisation et le contexte spécifiés.</summary>
      <param name="info">Informations de sérialisation.</param>
      <param name="context">Contexte de diffusion en continu.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de DbUnexpectedValidationException.</summary>
      <param name="message">Message d'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de DbUnexpectedValidationException.</summary>
      <param name="message">Message d'exception.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Erreur de validation.Erreur de validation au niveau de la propriété ou de l'entité.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Nom de la propriété non valide.Peut être Null.</param>
      <param name="errorMessage">Message d'erreur de validation.Peut être Null.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Obtient le message d'erreur de validation.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Obtient le nom de la propriété non valide.</summary>
    </member>
  </members>
</doc>