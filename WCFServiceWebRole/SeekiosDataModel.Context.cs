//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServiceWebRole
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class seekios_dbEntities : DbContext
    {
        public seekios_dbEntities()
            : base("name=seekios_dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<alert> alert { get; set; }
        public virtual DbSet<alertDefinition> alertDefinition { get; set; }
        public virtual DbSet<alertRecipient> alertRecipient { get; set; }
        public virtual DbSet<connection> connection { get; set; }
        public virtual DbSet<countryResources> countryResources { get; set; }
        public virtual DbSet<device> device { get; set; }
        public virtual DbSet<friendship> friendship { get; set; }
        public virtual DbSet<historyAlert> historyAlert { get; set; }
        public virtual DbSet<historyMode> historyMode { get; set; }
        public virtual DbSet<location> location { get; set; }
        public virtual DbSet<locationDefinition> locationDefinition { get; set; }
        public virtual DbSet<logExceptionSeekios> logExceptionSeekios { get; set; }
        public virtual DbSet<logExceptionSES> logExceptionSES { get; set; }
        public virtual DbSet<logVodafoneAndOnesignal> logVodafoneAndOnesignal { get; set; }
        public virtual DbSet<mode> mode { get; set; }
        public virtual DbSet<modeDefinition> modeDefinition { get; set; }
        public virtual DbSet<operation> operation { get; set; }
        public virtual DbSet<operationFromStore> operationFromStore { get; set; }
        public virtual DbSet<operationType> operationType { get; set; }
        public virtual DbSet<packCredit> packCredit { get; set; }
        public virtual DbSet<seekios> seekios { get; set; }
        public virtual DbSet<seekiosCommunication> seekiosCommunication { get; set; }
        public virtual DbSet<seekiosHardwareReport> seekiosHardwareReport { get; set; }
        public virtual DbSet<seekiosInstruction> seekiosInstruction { get; set; }
        public virtual DbSet<seekiosProduction> seekiosProduction { get; set; }
        public virtual DbSet<sharing> sharing { get; set; }
        public virtual DbSet<statusDefinition> statusDefinition { get; set; }
        public virtual DbSet<token> token { get; set; }
        public virtual DbSet<user> user { get; set; }
        public virtual DbSet<versionApplication> versionApplication { get; set; }
        public virtual DbSet<versionEmbedded> versionEmbedded { get; set; }
        public virtual DbSet<historySeekios> historySeekios { get; set; }
        public virtual DbSet<alertAndAlertRecipient> alertAndAlertRecipient { get; set; }
        public virtual DbSet<packCreditAndOperationType> packCreditAndOperationType { get; set; }
        public virtual DbSet<historyLocation> historyLocation { get; set; }
        public virtual DbSet<seekiosAndSeekiosProduction> seekiosAndSeekiosProduction { get; set; }
    
        public virtual int DeleteModeById(Nullable<int> idMode, ObjectParameter result)
        {
            var idModeParameter = idMode.HasValue ?
                new ObjectParameter("IdMode", idMode) :
                new ObjectParameter("IdMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteModeById", idModeParameter, result);
        }
    
        public virtual int DeleteSeekiosById(Nullable<int> idSeekios, ObjectParameter result)
        {
            var idSeekiosParameter = idSeekios.HasValue ?
                new ObjectParameter("IdSeekios", idSeekios) :
                new ObjectParameter("IdSeekios", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSeekiosById", idSeekiosParameter, result);
        }
    
        public virtual int DeleteSeekiosInstructionByIdSeekios(Nullable<int> idSeekios, Nullable<int> instructionType)
        {
            var idSeekiosParameter = idSeekios.HasValue ?
                new ObjectParameter("IdSeekios", idSeekios) :
                new ObjectParameter("IdSeekios", typeof(int));
    
            var instructionTypeParameter = instructionType.HasValue ?
                new ObjectParameter("InstructionType", instructionType) :
                new ObjectParameter("InstructionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSeekiosInstructionByIdSeekios", idSeekiosParameter, instructionTypeParameter);
        }
    
        public virtual int DeleteUserByIDuser(string iduser)
        {
            var iduserParameter = iduser != null ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserByIDuser", iduserParameter);
        }
    
        public virtual int GenerateToken(string email, string password, ObjectParameter returnException, ObjectParameter returnToken, ObjectParameter returnDateCreation, ObjectParameter returnDateExpires)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateToken", emailParameter, passwordParameter, returnException, returnToken, returnDateCreation, returnDateExpires);
        }
    
        public virtual ObjectResult<alert> GetAlertAndAlertSOSByUser(Nullable<int> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<alert>("GetAlertAndAlertSOSByUser", idUserParameter);
        }
    
        public virtual ObjectResult<alert> GetAlertAndAlertSOSByUser(Nullable<int> idUser, MergeOption mergeOption)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<alert>("GetAlertAndAlertSOSByUser", mergeOption, idUserParameter);
        }
    
        public virtual ObjectResult<alertRecipient> GetAlertRecipientAndAlertRecipientSOSByUser(Nullable<int> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<alertRecipient>("GetAlertRecipientAndAlertRecipientSOSByUser", idUserParameter);
        }
    
        public virtual ObjectResult<alertRecipient> GetAlertRecipientAndAlertRecipientSOSByUser(Nullable<int> idUser, MergeOption mergeOption)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<alertRecipient>("GetAlertRecipientAndAlertRecipientSOSByUser", mergeOption, idUserParameter);
        }
    
        public virtual ObjectResult<seekios> GetAllSeekiosByUser(Nullable<int> iduser)
        {
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<seekios>("GetAllSeekiosByUser", iduserParameter);
        }
    
        public virtual ObjectResult<seekios> GetAllSeekiosByUser(Nullable<int> iduser, MergeOption mergeOption)
        {
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<seekios>("GetAllSeekiosByUser", mergeOption, iduserParameter);
        }
    
        public virtual int GetLowerDateAndUpperDate(Nullable<int> idSeekios, ObjectParameter upperDate, ObjectParameter lowerDate)
        {
            var idSeekiosParameter = idSeekios.HasValue ?
                new ObjectParameter("IdSeekios", idSeekios) :
                new ObjectParameter("IdSeekios", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLowerDateAndUpperDate", idSeekiosParameter, upperDate, lowerDate);
        }
    
        public virtual int UpdateSeekiosFreeCreditById(Nullable<int> idSeekios, Nullable<int> valueToSubstract)
        {
            var idSeekiosParameter = idSeekios.HasValue ?
                new ObjectParameter("IdSeekios", idSeekios) :
                new ObjectParameter("IdSeekios", typeof(int));
    
            var valueToSubstractParameter = valueToSubstract.HasValue ?
                new ObjectParameter("ValueToSubstract", valueToSubstract) :
                new ObjectParameter("ValueToSubstract", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSeekiosFreeCreditById", idSeekiosParameter, valueToSubstractParameter);
        }
    
        public virtual int UpdateSeekiosHasGetLastInstruction(Nullable<int> idSeekios)
        {
            var idSeekiosParameter = idSeekios.HasValue ?
                new ObjectParameter("IdSeekios", idSeekios) :
                new ObjectParameter("IdSeekios", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSeekiosHasGetLastInstruction", idSeekiosParameter);
        }
    
        public virtual int UpdateSeekiosProductionFirstAssociation(string imei, Nullable<int> credit)
        {
            var imeiParameter = imei != null ?
                new ObjectParameter("imei", imei) :
                new ObjectParameter("imei", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSeekiosProductionFirstAssociation", imeiParameter, creditParameter);
        }
    
        public virtual int InsertMode(Nullable<int> idUser, Nullable<int> idSeekios, Nullable<int> idDevice, string trame, Nullable<int> idModeDefinition, Nullable<bool> isPowerSavingEnabled, Nullable<int> timeRefreshTracking, Nullable<int> timeDiffHours, Nullable<int> timeActivation, Nullable<int> timeDesactivation, Nullable<int> maxLocation, ObjectParameter resultExceptionOrNewIdMode)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            var idSeekiosParameter = idSeekios.HasValue ?
                new ObjectParameter("IdSeekios", idSeekios) :
                new ObjectParameter("IdSeekios", typeof(int));
    
            var idDeviceParameter = idDevice.HasValue ?
                new ObjectParameter("IdDevice", idDevice) :
                new ObjectParameter("IdDevice", typeof(int));
    
            var trameParameter = trame != null ?
                new ObjectParameter("Trame", trame) :
                new ObjectParameter("Trame", typeof(string));
    
            var idModeDefinitionParameter = idModeDefinition.HasValue ?
                new ObjectParameter("IdModeDefinition", idModeDefinition) :
                new ObjectParameter("IdModeDefinition", typeof(int));
    
            var isPowerSavingEnabledParameter = isPowerSavingEnabled.HasValue ?
                new ObjectParameter("IsPowerSavingEnabled", isPowerSavingEnabled) :
                new ObjectParameter("IsPowerSavingEnabled", typeof(bool));
    
            var timeRefreshTrackingParameter = timeRefreshTracking.HasValue ?
                new ObjectParameter("timeRefreshTracking", timeRefreshTracking) :
                new ObjectParameter("timeRefreshTracking", typeof(int));
    
            var timeDiffHoursParameter = timeDiffHours.HasValue ?
                new ObjectParameter("timeDiffHours", timeDiffHours) :
                new ObjectParameter("timeDiffHours", typeof(int));
    
            var timeActivationParameter = timeActivation.HasValue ?
                new ObjectParameter("timeActivation", timeActivation) :
                new ObjectParameter("timeActivation", typeof(int));
    
            var timeDesactivationParameter = timeDesactivation.HasValue ?
                new ObjectParameter("timeDesactivation", timeDesactivation) :
                new ObjectParameter("timeDesactivation", typeof(int));
    
            var maxLocationParameter = maxLocation.HasValue ?
                new ObjectParameter("maxLocation", maxLocation) :
                new ObjectParameter("maxLocation", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMode", idUserParameter, idSeekiosParameter, idDeviceParameter, trameParameter, idModeDefinitionParameter, isPowerSavingEnabledParameter, timeRefreshTrackingParameter, timeDiffHoursParameter, timeActivationParameter, timeDesactivationParameter, maxLocationParameter, resultExceptionOrNewIdMode);
        }
    }
}
